class App {
    static start() {
        if (!App.debug) {
            Object.freeze(GameConstants);
        }
        Preload.load(App.debug).then(() => {
            ko.options.deferUpdates = true;
            console.log(`[${GameConstants.formatDate(new Date())}] %cLoading Game Data..`, 'color:#8e44ad;font-weight:900;');
            // Needs to be loaded first so save data can be updated (specifically "player" data)
            const update = new Update();
            UndergroundItem.initialize();
            player = Save.load();
            App.game = new Game(update, new Breeding(), new Pokeballs(), new Wallet(), new KeyItems(), new BadgeCase(), new OakItems([20, 50, 100]), new Party(), new Shards(), new Farming(), new LogBook(), new RedeemableCodes(), new Statistics(), new Quests(), new SpecialEvents(), new Discord(), new AchievementTracker());
            console.log(`[${GameConstants.formatDate(new Date())}] %cGame loaded`, 'color:#8e44ad;font-weight:900;');
            Notifier.notify({ message: 'Game loaded', type: NotificationConstants.NotificationOption.info });
            GameController.bindToolTips();
            GameController.addKeyListeners();
            PokedexHelper.populateFilters();
            PokedexHelper.updateList();
            App.game.initialize();
            ko.applyBindings(App.game);
            GameController.applyRouteBindings();
            Preload.hideSplashScreen();
            App.game.start();
        });
    }
}
App.debug = false;
class ArrayOfObservables extends Array {
    constructor(array) {
        super();
        this.array = array;
        this._array = this.array.map((el) => {
            return ko.observable(el);
        });
        return new Proxy(this._array, ArrayOfObservables.proxyHandler);
    }
}
ArrayOfObservables.proxyHandler = {
    get: function (target, prop) {
        if (ko.isObservable(target[prop])) {
            return target[prop]();
        }
        else {
            return Reflect.get(target, prop);
        }
    },
    set: function (target, prop, value) {
        if (Array.prototype.hasOwnProperty(prop)) {
            return Reflect.set(target, prop, value);
        }
        if (ko.isObservable(target[prop])) {
            target[prop](value);
        }
        else {
            target[prop] = ko.observable(value);
        }
        return true;
    },
};
class Evolution {
    constructor(basePokemon) {
        this.basePokemon = basePokemon;
        this.type = [];
    }
    isSatisfied() {
        // Check that evolution is within reached regions
        return PokemonHelper.calcNativeRegion(this.getEvolvedPokemon()) <= player.highestRegion();
    }
    evolve(notification = false) {
        const evolvedPokemon = this.getEvolvedPokemon();
        // This Pokemon is from a region we haven't reached yet
        if (PokemonHelper.calcNativeRegion(evolvedPokemon) > player.highestRegion()) {
            return false;
        }
        // Notify the player if they haven't already caught the evolution, or notifications are forced
        if (!App.game.party.alreadyCaughtPokemonByName(evolvedPokemon) || notification) {
            Notifier.notify({
                message: `Your ${this.basePokemon} evolved into a ${evolvedPokemon}`,
                type: NotificationConstants.NotificationOption.success,
            });
        }
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_STONE);
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(evolvedPokemon).id, shiny, true);
        return shiny;
    }
}
var EvolutionType;
(function (EvolutionType) {
    EvolutionType[EvolutionType["Level"] = 0] = "Level";
    EvolutionType[EvolutionType["Stone"] = 1] = "Stone";
    EvolutionType[EvolutionType["Timed"] = 2] = "Timed";
    EvolutionType[EvolutionType["Location"] = 3] = "Location";
    EvolutionType[EvolutionType["Other"] = 4] = "Other";
})(EvolutionType || (EvolutionType = {}));
///<reference path="Evolution.ts"/>
///<reference path="EvolutionType.ts"/>
class LevelEvolution extends Evolution {
    constructor(basePokemon, evolvedPokemon, level) {
        super(basePokemon);
        this.evolvedPokemon = evolvedPokemon;
        this.level = level;
        this.type.push(EvolutionType.Level);
    }
    getEvolvedPokemon() {
        return this.evolvedPokemon;
    }
    isSatisfied() {
        return super.isSatisfied()
            // Check high enough level
            && App.game.party.getPokemon(PokemonHelper.getPokemonByName(this.basePokemon).id).level >= this.level;
    }
    evolve() {
        if (this.triggered) {
            return false;
        }
        this.triggered = true;
        // We have already obtained the evolution
        if (App.game.party.alreadyCaughtPokemonByName(this.getEvolvedPokemon())) {
            return false;
        }
        return super.evolve(true);
    }
}
///<reference path="Evolution.ts"/>
///<reference path="EvolutionType.ts"/>
class StoneEvolution extends Evolution {
    constructor(basePokemon, evolvedPokemon, stone) {
        super(basePokemon);
        this.stone = stone;
        this.evolvedPokemon = evolvedPokemon;
        this.type.push(EvolutionType.Stone);
    }
    getEvolvedPokemon() {
        return this.evolvedPokemon;
    }
}
function TimeRestricted(start, end, Base) {
    return class extends Base {
        constructor(...args) {
            super(...args);
            this.startHour = start;
            this.endHour = end;
            this.type.push(EvolutionType.Timed);
        }
        isWithinTime() {
            const currentHour = new Date().getHours();
            return this.startHour < this.endHour ?
                // If the start time is before the end time, both need to be true
                currentHour >= this.startHour && currentHour < this.endHour :
                // If the start time is after the end time, only 1 needs to be true
                currentHour >= this.startHour || currentHour < this.endHour;
        }
        isSatisfied() {
            // Check current time within evolution hours
            return this.isWithinTime()
                && super.isSatisfied();
        }
    };
}
function DayTimeRestricted(Base) {
    return TimeRestricted(6, 18, Base);
}
function NightTimeRestricted(Base) {
    return TimeRestricted(18, 6, Base);
}
const DayTimedLevelEvolution = DayTimeRestricted(LevelEvolution);
const NightTimedLevelEvolution = NightTimeRestricted(LevelEvolution);
const DayTimedStoneEvolution = DayTimeRestricted(StoneEvolution);
const NightTimedStoneEvolution = NightTimeRestricted(StoneEvolution);
function LocationRestricted(Base) {
    return class extends Base {
        constructor(...args) {
            super(...args);
            this.type.push(EvolutionType.Location);
        }
        isSatisfied() {
            return this.atLocation()
                && super.isSatisfied();
        }
    };
}
function ByDungeon(Base) {
    return class extends Base {
        constructor(...args) {
            const [dungeon, ...rest] = args;
            super(...rest);
            this.dungeon = dungeon;
        }
        atLocation() {
            return App.game.gameState == GameConstants.GameState.dungeon
                && DungeonRunner.dungeon.name() == this.dungeon;
        }
    };
}
function DungeonRestricted(Base) {
    return LocationRestricted(ByDungeon(Base));
}
// Typescript will only unroll the other constructor
// params if we use the utility type on the class variable.
// If we only specify the type for the DungeonRestricted function,
// it will only tell us that this class is constructed with
// (dungeon: string, ...rest: any[])
const DungeonRestrictedLevelEvolution = DungeonRestricted(LevelEvolution);
/**
 * Contains all game constants for easy access.
 */
var GameConstants;
(function (GameConstants) {
    // Ticks
    GameConstants.TICK_TIME = 100;
    GameConstants.BATTLE_TICK = 1000;
    GameConstants.BATTLE_FRONTIER_TICK = 500;
    GameConstants.UNDERGROUND_TICK = 1000;
    GameConstants.DUNGEON_TIME = 6000;
    GameConstants.DUNGEON_TICK = 10;
    GameConstants.EFFECT_ENGINE_TICK = 1000;
    GameConstants.SAVE_TICK = 10000;
    GameConstants.GYM_TIME = 3000;
    GameConstants.GYM_COUNTDOWN = 1000;
    GameConstants.GYM_TICK = 10;
    GameConstants.ACHIEVEMENT_TICK = 1000;
    GameConstants.MIN_LOAD_TIME = 500; // 0.5 Seconds
    GameConstants.MAX_LOAD_TIME = 20000; // 20 Seconds
    GameConstants.MAX_AVAILABLE_REGION = 3; // Sinnoh
    GameConstants.TotalPokemonsPerRegion = [
        151,
        251,
        386,
        493,
        649,
        721,
        809,
        893,
    ];
    GameConstants.ITEM_USE_TIME = 30;
    GameConstants.SECOND = 1000;
    GameConstants.MINUTE = 1000 * 60;
    GameConstants.HOUR = 1000 * 60 * 60;
    GameConstants.DAY = 1000 * 60 * 60 * 24;
    GameConstants.ROAMING_MIN_CHANCE = 8192;
    GameConstants.ROAMING_MAX_CHANCE = 4096;
    // Shinies
    GameConstants.SHINY_CHANCE_BATTLE = 8192;
    GameConstants.SHINY_CHANCE_DUNGEON = 4096;
    GameConstants.SHINY_CHANCE_SHOP = 2048;
    GameConstants.SHINY_CHANCE_STONE = 2048;
    GameConstants.SHINY_CHANCE_SAFARI = 2048;
    GameConstants.SHINY_CHANCE_BREEDING = 1024;
    GameConstants.ITEM_PRICE_MULTIPLIER = 1.00045;
    GameConstants.ITEM_PRICE_DEDUCT = 1.0005;
    GameConstants.PLATE_VALUE = 100;
    // Breeding
    GameConstants.BREEDING_ATTACK_BONUS = 25;
    GameConstants.BerryDistribution = [0.39, 0.63, 0.78, 0.87, 0.93, 0.96, 0.98, 1];
    // Dungeons
    GameConstants.DUNGEON_SIZE = 5;
    GameConstants.DUNGEON_CHEST_SHOW = 2;
    GameConstants.DUNGEON_MAP_SHOW = 4;
    // Achievements
    let AchievementOption;
    (function (AchievementOption) {
        AchievementOption[AchievementOption["less"] = 0] = "less";
        AchievementOption[AchievementOption["equal"] = 1] = "equal";
        AchievementOption[AchievementOption["more"] = 2] = "more";
    })(AchievementOption = GameConstants.AchievementOption || (GameConstants.AchievementOption = {}));
    let DungeonTile;
    (function (DungeonTile) {
        DungeonTile[DungeonTile["empty"] = 0] = "empty";
        DungeonTile[DungeonTile["enemy"] = 1] = "enemy";
        DungeonTile[DungeonTile["chest"] = 2] = "chest";
        DungeonTile[DungeonTile["boss"] = 3] = "boss";
    })(DungeonTile = GameConstants.DungeonTile || (GameConstants.DungeonTile = {}));
    // Held item chance
    GameConstants.ROUTE_HELD_ITEM_CHANCE = 512;
    GameConstants.DUNGEON_HELD_ITEM_CHANCE = 128;
    //Shards from battle
    GameConstants.DUNGEON_SHARDS = 3;
    GameConstants.DUNGEON_BOSS_SHARDS = 20;
    GameConstants.GYM_SHARDS = 5;
    GameConstants.SAFARI_BATTLE_CHANCE = 5;
    GameConstants.SAFARI_BASE_POKEBALL_COUNT = 30;
    GameConstants.LEGAL_WALK_BLOCKS = [
        0,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
    ];
    GameConstants.SAFARI_OUT_OF_BALLS = 'Game Over!<br>You have run out of safari balls to use.';
    //Quests
    // Numbers calculated by Dimava assumes ability to 1 shot on high routes and some use oak items,
    //   which are now nerfed slightly until upgraded, so those numbers may need further adjusting
    const questBase = 1; // change this to scale all quest points
    GameConstants.DEFEAT_POKEMONS_BASE_REWARD = questBase * 1;
    GameConstants.CAPTURE_POKEMONS_BASE_REWARD = GameConstants.DEFEAT_POKEMONS_BASE_REWARD / 0.8; // Defeat reward divided by chance to catch (guessed)
    GameConstants.GAIN_MONEY_BASE_REWARD = questBase * 0.0017; // Dimava
    GameConstants.GAIN_TOKENS_BASE_REWARD = GameConstants.CAPTURE_POKEMONS_BASE_REWARD / 13; // <route number> tokens gained for every capture
    GameConstants.HATCH_EGGS_BASE_REWARD = questBase * 33; // Dimava
    GameConstants.MINE_LAYERS_BASE_REWARD = questBase * 720; // Average of 1/4 squares revealed = 75 energy ~ 12 minutes ~ 720 pokemons
    GameConstants.SHINY_BASE_REWARD = questBase * 3000; // Dimava
    GameConstants.USE_OAK_ITEM_BASE_REWARD = GameConstants.DEFEAT_POKEMONS_BASE_REWARD; // not balanced at all for some oak items
    GameConstants.ACTIVE_QUEST_MULTIPLIER = 4;
    // Some active quests may be quicker if passive pokemon attack is used instead of active clicking
    // This number is used to estimate time taken in terms of clicks, for reward calculation
    GameConstants.QUEST_CLICKS_PER_SECOND = 5;
    GameConstants.QuestTypes = [
        'DefeatPokemons',
        'CapturePokemons',
        'GainMoney',
        'GainTokens',
        'GainShards',
        'HatchEggs',
        'MineLayers',
        'CatchShinies',
        'DefeatGym',
        'DefeatDungeon',
        'UsePokeball',
        'UseOakItem',
        'HarvestBerriesQuest',
    ];
    GameConstants.QUESTS_PER_SET = 10;
    /**
     * idle: The game is not doing anything, the battle view isn't shown
     * paused: The battle view is shown, but there are no game ticks
     * fighting: On a route and battling a pokemon
     * gym: Battling a gym
     * dungeon: Exploring a dungeon
     * safari: Exploring the safari zone
     * town: In a town/pre-dungeon, town view is not shown
     */
    let GameState;
    (function (GameState) {
        GameState[GameState["idle"] = 0] = "idle";
        GameState[GameState["paused"] = 1] = "paused";
        GameState[GameState["fighting"] = 2] = "fighting";
        GameState[GameState["gym"] = 3] = "gym";
        GameState[GameState["dungeon"] = 4] = "dungeon";
        GameState[GameState["safari"] = 5] = "safari";
        GameState[GameState["town"] = 6] = "town";
        GameState[GameState["shop"] = 7] = "shop";
        GameState[GameState["battleFrontier"] = 8] = "battleFrontier";
    })(GameState = GameConstants.GameState || (GameConstants.GameState = {}));
    let Pokeball;
    (function (Pokeball) {
        Pokeball[Pokeball["None"] = -1] = "None";
        Pokeball[Pokeball["Pokeball"] = 0] = "Pokeball";
        Pokeball[Pokeball["Greatball"] = 1] = "Greatball";
        Pokeball[Pokeball["Ultraball"] = 2] = "Ultraball";
        Pokeball[Pokeball["Masterball"] = 3] = "Masterball";
    })(Pokeball = GameConstants.Pokeball || (GameConstants.Pokeball = {}));
    let Currency;
    (function (Currency) {
        Currency[Currency["money"] = 0] = "money";
        Currency[Currency["questPoint"] = 1] = "questPoint";
        Currency[Currency["dungeonToken"] = 2] = "dungeonToken";
        Currency[Currency["diamond"] = 3] = "diamond";
        Currency[Currency["farmPoint"] = 4] = "farmPoint";
        Currency[Currency["battlePoint"] = 5] = "battlePoint";
    })(Currency = GameConstants.Currency || (GameConstants.Currency = {}));
    let TypeEffectiveness;
    (function (TypeEffectiveness) {
        TypeEffectiveness[TypeEffectiveness["Immune"] = 0] = "Immune";
        TypeEffectiveness[TypeEffectiveness["NotVery"] = 1] = "NotVery";
        TypeEffectiveness[TypeEffectiveness["Normal"] = 2] = "Normal";
        TypeEffectiveness[TypeEffectiveness["Very"] = 3] = "Very";
    })(TypeEffectiveness = GameConstants.TypeEffectiveness || (GameConstants.TypeEffectiveness = {}));
    let TypeEffectivenessValue;
    (function (TypeEffectivenessValue) {
        TypeEffectivenessValue[TypeEffectivenessValue["Immune"] = 0] = "Immune";
        TypeEffectivenessValue[TypeEffectivenessValue["NotVery"] = 0.5] = "NotVery";
        TypeEffectivenessValue[TypeEffectivenessValue["Normal"] = 1] = "Normal";
        TypeEffectivenessValue[TypeEffectivenessValue["Very"] = 2] = "Very";
    })(TypeEffectivenessValue = GameConstants.TypeEffectivenessValue || (GameConstants.TypeEffectivenessValue = {}));
    function humanifyString(str) {
        return str.replace(/[_-]+/g, ' ');
    }
    GameConstants.humanifyString = humanifyString;
    function camelCaseToString(str) {
        return str.replace(/[\s_-]?([A-Z])/g, ' $1').replace(/\b\w/g, (w) => (w.replace(/\w/, (c) => c.toUpperCase()))).trim();
    }
    GameConstants.camelCaseToString = camelCaseToString;
    function formatDate(date) {
        return date.toISOString().replace(/T/, ' ').replace(/.\d+Z/, '');
    }
    GameConstants.formatDate = formatDate;
    function formatTime(time) {
        if (time == 0) {
            return 'Ready';
        }
        time = parseInt(`${time}`, 10); // don't forget the second param
        const hours = `${Math.floor(time / 3600)}`.padStart(2, '0');
        const minutes = `${Math.floor((time - (hours * 3600)) / 60)}`.padStart(2, '0');
        const seconds = `${time - (hours * 3600) - (minutes * 60)}`.padStart(2, '0');
        return `${hours}:${minutes}:${seconds}`;
    }
    GameConstants.formatTime = formatTime;
    function formatTimeShortWords(time) {
        if (isNaN(+time) || time == 0) {
            return 'now';
        }
        time = Math.abs(time);
        if (time > GameConstants.DAY) {
            const days = Math.ceil(time / GameConstants.DAY);
            return `${time % GameConstants.DAY ? '< ' : ''}${days} day${days == 1 ? '' : 's'}`;
        }
        if (time > GameConstants.HOUR) {
            const hours = Math.ceil(time / GameConstants.HOUR);
            return `${time % GameConstants.HOUR ? '< ' : ''}${hours} hour${hours == 1 ? '' : 's'}`;
        }
        const minutes = Math.ceil(time / GameConstants.MINUTE);
        return `${time % GameConstants.MINUTE ? '< ' : ''}${minutes} min${minutes == 1 ? '' : 's'}`;
    }
    GameConstants.formatTimeShortWords = formatTimeShortWords;
    function formatNumber(num) {
        if (isNaN(+num)) {
            return '0';
        }
        const suffixes = ['K', 'M', 'B', 'T', 'QD', 'QT'];
        let returnNum = num;
        let suffixCounter = -1;
        while (returnNum >= 1e3 && (suffixCounter < suffixes.length - 1)) {
            returnNum /= 1e3;
            suffixCounter++;
        }
        if (returnNum > 1e3) {
            return '∞';
        }
        if (suffixCounter > -1) {
            const returnNumString = String(Math.floor(returnNum * 10) / 10);
            return `${returnNumString}${suffixes[suffixCounter]}`;
        }
        return num.toString();
    }
    GameConstants.formatNumber = formatNumber;
    let Region;
    (function (Region) {
        Region[Region["none"] = -1] = "none";
        Region[Region["kanto"] = 0] = "kanto";
        Region[Region["johto"] = 1] = "johto";
        Region[Region["hoenn"] = 2] = "hoenn";
        Region[Region["sinnoh"] = 3] = "sinnoh";
        Region[Region["unova"] = 4] = "unova";
        Region[Region["kalos"] = 5] = "kalos";
        Region[Region["alola"] = 6] = "alola";
        Region[Region["galar"] = 7] = "galar";
    })(Region = GameConstants.Region || (GameConstants.Region = {}));
    GameConstants.RegionRoute = {
        0: [1, 25],
        1: [26, 48],
        2: [101, 134],
        3: [201, 230],
    };
    function randomIntBetween(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    GameConstants.randomIntBetween = randomIntBetween;
    function randomElement(array) {
        return array[GameConstants.randomIntBetween(0, array.length - 1)];
    }
    GameConstants.randomElement = randomElement;
    // Return a random element from the array, with an exponential distribution
    // The last element has a 1/ratio chance of being chosen, one before last is 1/(ratio^2), etc
    // The logarithm is clipped up to 0, so the first two elements will have equal chance
    function expRandomElement(array, ratio) {
        const r = Math.random();
        const logr = Math.log(r) / Math.log(ratio);
        const n = Math.floor(logr + array.length);
        const x = GameConstants.clipNumber(n, 0, array.length - 1);
        return array[x];
    }
    GameConstants.expRandomElement = expRandomElement;
    function clipNumber(num, min, max) {
        return Math.min(Math.max(num, min), max);
    }
    GameConstants.clipNumber = clipNumber;
    GameConstants.TypeColor = [
        '#A8A77A',
        '#EE8130',
        '#6390F0',
        '#F7D02C',
        '#7AC74C',
        '#96D9D6',
        '#C22E28',
        '#A33EA1',
        '#E2BF65',
        '#A98FF3',
        '#F95587',
        '#A6B91A',
        '#B6A136',
        '#735797',
        '#6F35FC',
        '#705746',
        '#B7B7CE',
        '#D685AD',
    ];
    GameConstants.ROUTE_KILLS_NEEDED = 10;
    GameConstants.WaterAreas = {
        0: new Set(['Cerulean City', 19, 20, 21, 24]),
        1: new Set([40, 41, 'Slowpoke Well']),
        2: new Set([105, 106, 107, 108, 109, 118, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 'Shoal Cave', 'Seafloor Cavern']),
        3: new Set([218, 219, 220, 223, 230, 'Lake Verity', 'Lake Valor', 'Pastoria City']),
        4: new Set(['Undella Bay', 'Humilau City']),
    };
    GameConstants.IceAreas = {
        0: new Set(['Seafoam Islands']),
        1: new Set(['Mahogany Town', 'Ice Path', 'Whirl Islands']),
        2: new Set(['Sootopolis City']),
        3: new Set([216, 217, 'Lake Acuity', 'Snowpoint City']),
    };
    GameConstants.ForestAreas = {
        0: new Set([25, 'Fuchsia City', 'Viridian Forest']),
        1: new Set([36, 38, 43, 'Azalea Town', 'Ilex Forest']),
        2: new Set([119, 'Petalburg Woods']),
        3: new Set([201, 204, 'Eterna Forest', 'Eterna City', 'Fullmoon Island', 'Newmoon Island']),
        4: new Set(['Lostlorn Forest', 'Pinwheel Forest', 'Giant Chasm', 'Pledge Grove', 'Castelia City']),
    };
    GameConstants.CaveAreas = {
        0: new Set(['Pewter City', 'Digletts Cave', 'Mt. Moon', 'Rock Tunnel', 'Victory Road']),
        1: new Set(['Cianwood City', 'Ruins of Alph', 'Union Cave', 'Mt Mortar', 'Dark Cave']),
        2: new Set(['Rustboro City', 'Dewford Town', 'Rusturf Tunnel', 'Granite Cave', 'New Mauville', 'Meteor Falls', 'Victory Road Hoenn']),
        3: new Set(['Oreburgh Gate', 'Oreburgh City', 'Ravaged Path', 'Wayward Cave', 'Mt. Coronet South', 'Iron Island', 'Mt. Coronet North', 'Victory Road Sinnoh']),
        4: new Set(['Mistralton Cave', 'Seaside Cave', 'Wellspring Cave', 'Twist Mountain', 'Reversal Mountain', 'Cave of Being', 'Relic Passage', 'Relica Castle', 'Victory Road Unova']),
    };
    GameConstants.GemCaveAreas = {
        0: new Set(['Viridian City', 'Cerulean Cave']),
        1: new Set(['Blackthorn City', 'Mt Silver']),
        2: new Set(['Cave of Origin', 'Sky Pillar']),
        3: new Set(['Spear Pillar', 'Hall of Origin', 'Stark Mountain']),
        4: new Set(['Chargestone Cave', 'Driftveil City']),
    };
    GameConstants.PowerPlantAreas = {
        0: new Set(['Vermillion City', 'Power Plant']),
        1: new Set(['Tin Tower']),
        2: new Set(['Mauville City']),
        3: new Set(['Sunyshore City']),
        4: new Set(['Virbank Complex', 'Castelia Sewers', 'Nimbasa City']),
    };
    GameConstants.MansionAreas = {
        0: new Set(['Cinnabar Island', 'Pokemon Mansion']),
        1: new Set(['Olivine City', 'Burned Tower']),
        2: new Set(['Lavaridge Town', 'Petalburg City', 'Jagged Pass', 'Fiery Path', 'Mt. Chimney']),
        3: new Set(['Old Chateau', 'Veilstone City', 'Canalave City', 'Snowpoint Temple']),
        4: new Set(['Liberty Garden', 'Dreamyard', 'Mistralton City', 'Opelucid City']),
    };
    GameConstants.GraveyardAreas = {
        0: new Set(['Saffron City', 'Pokemon Tower']),
        1: new Set(['Ecruteak City']),
        2: new Set(['Mossdeep City', 'Mt. Pyre']),
        3: new Set(['Hearthome City']),
        4: new Set(['Virbank City']),
    };
    let Starter;
    (function (Starter) {
        Starter[Starter["None"] = -1] = "None";
        Starter[Starter["Bulbasaur"] = 0] = "Bulbasaur";
        Starter[Starter["Charmander"] = 1] = "Charmander";
        Starter[Starter["Squirtle"] = 2] = "Squirtle";
        Starter[Starter["Pikachu"] = 3] = "Pikachu";
    })(Starter = GameConstants.Starter || (GameConstants.Starter = {}));
    let StoneType;
    (function (StoneType) {
        StoneType[StoneType["None"] = -1] = "None";
        StoneType[StoneType["Fire_stone"] = 0] = "Fire_stone";
        StoneType[StoneType["Water_stone"] = 1] = "Water_stone";
        StoneType[StoneType["Thunder_stone"] = 2] = "Thunder_stone";
        StoneType[StoneType["Leaf_stone"] = 3] = "Leaf_stone";
        StoneType[StoneType["Moon_stone"] = 4] = "Moon_stone";
        StoneType[StoneType["Sun_stone"] = 5] = "Sun_stone";
        StoneType[StoneType["Trade_stone"] = 6] = "Trade_stone";
        StoneType[StoneType["Dragon_scale"] = 7] = "Dragon_scale";
        StoneType[StoneType["Metal_coat"] = 8] = "Metal_coat";
        StoneType[StoneType["Kings_rock"] = 9] = "Kings_rock";
        StoneType[StoneType["Upgrade"] = 10] = "Upgrade";
        StoneType[StoneType["Soothe_bell"] = 11] = "Soothe_bell";
        StoneType[StoneType["Deepsea_tooth"] = 12] = "Deepsea_tooth";
        StoneType[StoneType["Deepsea_scale"] = 13] = "Deepsea_scale";
        StoneType[StoneType["Dawn_stone"] = 14] = "Dawn_stone";
        StoneType[StoneType["Dusk_stone"] = 15] = "Dusk_stone";
        StoneType[StoneType["Shiny_stone"] = 16] = "Shiny_stone";
        StoneType[StoneType["Dubious_disc"] = 17] = "Dubious_disc";
        StoneType[StoneType["Electirizer"] = 18] = "Electirizer";
        StoneType[StoneType["Magmarizer"] = 19] = "Magmarizer";
        StoneType[StoneType["Protector"] = 20] = "Protector";
        StoneType[StoneType["Reaper_cloth"] = 21] = "Reaper_cloth";
        StoneType[StoneType["Razor_claw"] = 22] = "Razor_claw";
        StoneType[StoneType["Razor_fang"] = 23] = "Razor_fang";
        StoneType[StoneType["Prism_scale"] = 24] = "Prism_scale";
        StoneType[StoneType["Sachet"] = 25] = "Sachet";
        StoneType[StoneType["Whipped_dream"] = 26] = "Whipped_dream";
    })(StoneType = GameConstants.StoneType || (GameConstants.StoneType = {}));
    let BattleItemType;
    (function (BattleItemType) {
        BattleItemType["xAttack"] = "xAttack";
        BattleItemType["xClick"] = "xClick";
        BattleItemType["Lucky_egg"] = "Lucky_egg";
        BattleItemType["Token_collector"] = "Token_collector";
        BattleItemType["Item_magnet"] = "Item_magnet";
        BattleItemType["Lucky_incense"] = "Lucky_incense";
    })(BattleItemType = GameConstants.BattleItemType || (GameConstants.BattleItemType = {}));
    let PokemonItemType;
    (function (PokemonItemType) {
        PokemonItemType[PokemonItemType["Eevee"] = 0] = "Eevee";
        PokemonItemType[PokemonItemType["Porygon"] = 1] = "Porygon";
        PokemonItemType[PokemonItemType["Jynx"] = 2] = "Jynx";
        PokemonItemType[PokemonItemType["Mr. Mime"] = 3] = "Mr. Mime";
        PokemonItemType[PokemonItemType["Lickitung"] = 4] = "Lickitung";
        PokemonItemType[PokemonItemType["Togepi"] = 5] = "Togepi";
        PokemonItemType[PokemonItemType["Beldum"] = 6] = "Beldum";
        PokemonItemType[PokemonItemType["Skorupi"] = 7] = "Skorupi";
        PokemonItemType[PokemonItemType["Combee"] = 8] = "Combee";
        PokemonItemType[PokemonItemType["Burmy (plant)"] = 9] = "Burmy (plant)";
        PokemonItemType[PokemonItemType["Spiritomb"] = 10] = "Spiritomb";
        PokemonItemType[PokemonItemType["Cherubi"] = 11] = "Cherubi";
        PokemonItemType[PokemonItemType["Meloetta (pirouette)"] = 12] = "Meloetta (pirouette)";
    })(PokemonItemType = GameConstants.PokemonItemType || (GameConstants.PokemonItemType = {}));
    let PokeBlockColor;
    (function (PokeBlockColor) {
        PokeBlockColor[PokeBlockColor["Black"] = 0] = "Black";
        PokeBlockColor[PokeBlockColor["Red"] = 1] = "Red";
        PokeBlockColor[PokeBlockColor["Gold"] = 2] = "Gold";
        PokeBlockColor[PokeBlockColor["Purple"] = 3] = "Purple";
        PokeBlockColor[PokeBlockColor["Gray"] = 4] = "Gray";
        PokeBlockColor[PokeBlockColor["White"] = 5] = "White";
    })(PokeBlockColor = GameConstants.PokeBlockColor || (GameConstants.PokeBlockColor = {}));
    let VitaminType;
    (function (VitaminType) {
        VitaminType[VitaminType["Protein"] = 0] = "Protein";
        VitaminType[VitaminType["RareCandy"] = 1] = "RareCandy";
    })(VitaminType = GameConstants.VitaminType || (GameConstants.VitaminType = {}));
    let EnergyRestoreSize;
    (function (EnergyRestoreSize) {
        EnergyRestoreSize[EnergyRestoreSize["SmallRestore"] = 0] = "SmallRestore";
        EnergyRestoreSize[EnergyRestoreSize["MediumRestore"] = 1] = "MediumRestore";
        EnergyRestoreSize[EnergyRestoreSize["LargeRestore"] = 2] = "LargeRestore";
    })(EnergyRestoreSize = GameConstants.EnergyRestoreSize || (GameConstants.EnergyRestoreSize = {}));
    let EggItemType;
    (function (EggItemType) {
        EggItemType[EggItemType["Fire_egg"] = 0] = "Fire_egg";
        EggItemType[EggItemType["Water_egg"] = 1] = "Water_egg";
        EggItemType[EggItemType["Grass_egg"] = 2] = "Grass_egg";
        EggItemType[EggItemType["Fighting_egg"] = 3] = "Fighting_egg";
        EggItemType[EggItemType["Electric_egg"] = 4] = "Electric_egg";
        EggItemType[EggItemType["Dragon_egg"] = 5] = "Dragon_egg";
        EggItemType[EggItemType["Pokemon_egg"] = 6] = "Pokemon_egg";
        EggItemType[EggItemType["Mystery_egg"] = 7] = "Mystery_egg";
    })(EggItemType = GameConstants.EggItemType || (GameConstants.EggItemType = {}));
    GameConstants.EnergyRestoreEffect = {
        SmallRestore: 0.1,
        MediumRestore: 0.2,
        LargeRestore: 0.5,
    };
    GameConstants.KeyCodeToDirection = {
        'ArrowUp': 'up',
        'ArrowLeft': 'left',
        'ArrowDown': 'down',
        'ArrowRight': 'right',
        'KeyW': 'up',
        'KeyA': 'left',
        'KeyS': 'down',
        'KeyD': 'right',
    };
    GameConstants.FossilToPokemon = {
        'Helix Fossil': 'Omanyte',
        'Dome Fossil': 'Kabuto',
        'Old Amber': 'Aerodactyl',
        'Root Fossil': 'Lileep',
        'Claw Fossil': 'Anorith',
        'Armor Fossil': 'Shieldon',
        'Skull Fossil': 'Cranidos',
        'Cover Fossil': 'Tirtouga',
        'Plume Fossil': 'Archen',
    };
    //Used for image name
    GameConstants.PokemonToFossil = {
        'Omanyte': 'Helix Fossil',
        'Kabuto': 'Dome Fossil',
        'Aerodactyl': 'Old Amber',
        'Lileep': 'Root Fossil',
        'Anorith': 'Claw Fossil',
        'Shieldon': 'Armor Fossil',
        'Cranidos': 'Skull Fossil',
        'Tirtouga': 'Cover Fossil',
        'Archen': 'Plume Fossil',
    };
    // For random quest, name matches entry in gymList (created in Gym.ts)
    GameConstants.KantoGyms = [
        'Pewter City',
        'Cerulean City',
        'Vermillion City',
        'Celadon City',
        'Saffron City',
        'Fuchsia City',
        'Cinnabar Island',
        'Viridian City',
        'Elite Lorelei',
        'Elite Bruno',
        'Elite Agatha',
        'Elite Lance',
        'Champion Blue',
    ];
    GameConstants.JohtoGyms = [
        'Violet City',
        'Azalea Town',
        'Goldenrod City',
        'Ecruteak City',
        'Cianwood City',
        'Olivine City',
        'Mahogany Town',
        'Blackthorn City',
        'Elite Will',
        'Elite Koga',
        'Elite Bruno2',
        'Elite Karen',
        'Champion Lance',
    ];
    GameConstants.HoennGyms = [
        'Rustboro City',
        'Dewford Town',
        'Mauville City',
        'Lavaridge Town',
        'Petalburg City',
        'Fortree City',
        'Mossdeep City',
        'Sootopolis City',
        'Elite Sidney',
        'Elite Phoebe',
        'Elite Glacia',
        'Elite Drake',
        'Champion Wallace',
    ];
    GameConstants.SinnohGyms = [
        'Oreburgh City',
        'Eterna City',
        'Hearthome City',
        'Veilstone City',
        'Pastoria City',
        'Canalave City',
        'Snowpoint City',
        'Sunyshore City',
        'Elite Aaron',
        'Elite Bertha',
        'Elite Flint',
        'Elite Lucian',
        'Champion Cynthia',
    ];
    GameConstants.UnovaGyms = [
        'Aspertia City',
        'Virbank City',
        'Castelia City',
        'Nimbasa City',
        'Driftveil City',
        'Mistralton City',
        'Opelucid City',
        'Humilau City',
        'Elite Shauntal',
        'Elite Marshal',
        'Elite Grimsley',
        'Elite Caitlin',
        'Champion Iris',
    ];
    GameConstants.KalosGyms = [
        'Santalune City',
        'Cyllage City',
        'Shalour City',
        'Coumarine City',
        'Lumiose City',
        'Laverre City',
        'Anistar City',
        'Snowbelle City',
        'Elite Malva',
        'Elite Siebold',
        'Elite Wikstrom',
        'Elite Drasna',
        'Champion Diantha',
    ];
    GameConstants.RegionGyms = [
        GameConstants.KantoGyms,
        GameConstants.JohtoGyms,
        GameConstants.HoennGyms,
        GameConstants.SinnohGyms,
        GameConstants.UnovaGyms,
        GameConstants.KalosGyms,
    ];
    function getGymIndex(gym) {
        return GameConstants.RegionGyms.flat().findIndex(g => g === gym);
    }
    GameConstants.getGymIndex = getGymIndex;
    GameConstants.KantoDungeons = [
        'Viridian Forest',
        'Digletts Cave',
        'Mt. Moon',
        'Rock Tunnel',
        'Power Plant',
        'Pokemon Tower',
        'Seafoam Islands',
        'Pokemon Mansion',
        'Victory Road',
        'Cerulean Cave',
    ];
    GameConstants.JohtoDungeons = [
        'Sprout Tower',
        'Ruins of Alph',
        'Union Cave',
        'Slowpoke Well',
        'Ilex Forest',
        'Burned Tower',
        'Tin Tower',
        'Whirl Islands',
        'Mt Mortar',
        'Ice Path',
        'Dark Cave',
        'Mt Silver',
    ];
    GameConstants.HoennDungeons = [
        'Petalburg Woods',
        'Rusturf Tunnel',
        'Granite Cave',
        'Jagged Pass',
        'Fiery Path',
        'Mt. Chimney',
        'Meteor Falls',
        'Mt. Pyre',
        'New Mauville',
        'Shoal Cave',
        'Seafloor Cavern',
        'Sealed Chamber',
        'Cave of Origin',
        'Sky Pillar',
        'Victory Road Hoenn',
    ];
    GameConstants.SinnohDungeons = [
        'Oreburgh Gate',
        'Ravaged Path',
        'Eterna Forest',
        'Old Chateau',
        'Wayward Cave',
        'Mt. Coronet South',
        'Iron Island',
        'Mt. Coronet North',
        'Lake Verity',
        'Lake Valor',
        'Lake Acuity',
        'Distortion World',
        'Victory Road Sinnoh',
        'Spear Pillar',
        'Fullmoon Island',
        'Newmoon Island',
        'Flower Paradise',
        'Snowpoint Temple',
        'Stark Mountain',
        'Hall of Origin',
    ];
    GameConstants.UnovaDungeons = [
        'Pledge Grove',
        'Floccesy Ranch',
        'Virbank Complex',
        'Liberty Garden',
        'Castelia Sewers',
        'Relic Passage',
        'Desert Resort',
        'Relic Castle',
        'Lostlorn Forest',
        'Chargestone Cave',
        'Mistralton Cave',
        'Celestial Tower',
        'Reversal Mountain',
        'Strange House',
        'Undella Bay',
        'Seaside Cave',
        'Giant Chasm',
        'Abundant Shrine',
        'Cave of Being',
        'Victory Road Unova',
        'Twist Mountain',
        'Dragonspiral Tower',
        'Moor of Icirrus',
        'Pinwheel Forest',
        'Wellspring Cave',
        'Dreamyard',
        'P2 Laboratory',
    ];
    GameConstants.KalosDungeons = [
        'Santalune Forest',
        'Parfum Palace',
        'Connecting Cave',
        'Glittering Cave',
        'Reflection Cave',
        //'Tower of Mastery',
        'Azure Bay',
        //'Sea Spirit's Den',
        //'Kalos Power Plant',
        //'Pokéball Factory',
        'Lost Hotel',
        'Frost Cavern',
        'Team Flare Secret HQ',
        'Terminus Cave',
        'Pokémon Village',
        'Victory Road Kalos',
    ];
    GameConstants.RegionDungeons = [
        GameConstants.KantoDungeons,
        GameConstants.JohtoDungeons,
        GameConstants.HoennDungeons,
        GameConstants.SinnohDungeons,
        GameConstants.UnovaDungeons,
        GameConstants.KalosDungeons,
    ];
    function getDungeonIndex(dungeon) {
        return GameConstants.RegionDungeons.flat().findIndex(d => d === dungeon);
    }
    GameConstants.getDungeonIndex = getDungeonIndex;
    GameConstants.StartingTowns = [
        'Pallet Town',
        'New Bark Town',
        'Littleroot Town',
        'Twinleaf Town',
        'Aspertia City',
        'Vaniville Town',
    ];
    GameConstants.DockTowns = [
        'Vermillion City',
        'Olivine City',
        'Slateport City',
        'Canalave City',
        'Castelia City',
        'Coumarine City',
    ];
})(GameConstants || (GameConstants = {}));
// TODO: Remove namespace after all scripts have been moved to modules
if (typeof module !== 'undefined') {
    module.exports = GameConstants;
}
var LevelType;
(function (LevelType) {
    LevelType[LevelType["erratic"] = 0] = "erratic";
    LevelType[LevelType["fast"] = 1] = "fast";
    LevelType[LevelType["mediumfast"] = 2] = "mediumfast";
    LevelType[LevelType["mediumslow"] = 3] = "mediumslow";
    LevelType[LevelType["slow"] = 4] = "slow";
    LevelType[LevelType["fluctuating"] = 5] = "fluctuating";
})(LevelType || (LevelType = {}));
const levelRequirements = [
    [0, 15, 52, 122, 237, 406, 637, 942, 1326, 1800, 2369, 3041, 3822, 4719, 5737, 6881, 8155, 9564, 11111, 12800, 14632, 16610, 18737, 21012, 23437, 26012, 28737, 31610, 34632, 37800, 41111, 44564, 48155, 51881, 55737, 59719, 63822, 68041, 72369, 76800, 81326, 85942, 90637, 95406, 100237, 105122, 110052, 115015, 120001, 125000, 131324, 137795, 144410, 151165, 158056, 165079, 172229, 179503, 186894, 194400, 202013, 209728, 217540, 225443, 233431, 241496, 249633, 257834, 267406, 276458, 286328, 296358, 305767, 316074, 326531, 336255, 346965, 357812, 367807, 378880, 390077, 400293, 411686, 423190, 433572, 445239, 457001, 467489, 479378, 491346, 501878, 513934, 526049, 536557, 548720, 560922, 571333, 583539, 591882, 600000, Number.MAX_SAFE_INTEGER],
    [0, 6, 21, 51, 100, 172, 274, 409, 583, 800, 1064, 1382, 1757, 2195, 2700, 3276, 3930, 4665, 5487, 6400, 7408, 8518, 9733, 11059, 12500, 14060, 15746, 17561, 19511, 21600, 23832, 26214, 28749, 31443, 34300, 37324, 40522, 43897, 47455, 51200, 55136, 59270, 63605, 68147, 72900, 77868, 83058, 88473, 94119, 100000, 106120, 112486, 119101, 125971, 133100, 140492, 148154, 156089, 164303, 172800, 181584, 190662, 200037, 209715, 219700, 229996, 240610, 251545, 262807, 274400, 286328, 298598, 311213, 324179, 337500, 351180, 365226, 379641, 394431, 409600, 425152, 441094, 457429, 474163, 491300, 508844, 526802, 545177, 563975, 583200, 602856, 622950, 643485, 664467, 685900, 707788, 730138, 752953, 776239, 800000, Number.MAX_SAFE_INTEGER],
    [0, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859, 8000, 9261, 10648, 12167, 13824, 15625, 17576, 19683, 21952, 24389, 27000, 29791, 32768, 35937, 39304, 42875, 46656, 50653, 54872, 59319, 64000, 68921, 74088, 79507, 85184, 91125, 97336, 103823, 110592, 117649, 125000, 132651, 140608, 148877, 157464, 166375, 175616, 185193, 195112, 205379, 216000, 226981, 238328, 250047, 262144, 274625, 287496, 300763, 314432, 328509, 343000, 357911, 373248, 389017, 405224, 421875, 438976, 456533, 474552, 493039, 512000, 531441, 551368, 571787, 592704, 614125, 636056, 658503, 681472, 704969, 729000, 753571, 778688, 804357, 830584, 857375, 884736, 912673, 941192, 970299, 1000000, Number.MAX_SAFE_INTEGER],
    [0, 9, 57, 96, 135, 179, 236, 314, 419, 560, 742, 973, 1261, 1612, 2035, 2535, 3120, 3798, 4575, 5460, 6458, 7577, 8825, 10208, 11735, 13411, 15244, 17242, 19411, 21760, 24294, 27021, 29949, 33084, 36435, 40007, 43808, 47846, 52127, 56660, 61450, 66505, 71833, 77440, 83335, 89523, 96012, 102810, 109923, 117360, 125126, 133229, 141677, 150476, 159635, 169159, 179056, 189334, 199999, 211060, 222522, 234393, 246681, 259392, 272535, 286115, 300140, 314618, 329555, 344960, 360838, 377197, 394045, 411388, 429235, 447591, 466464, 485862, 505791, 526260, 547274, 568841, 590969, 613664, 636935, 660787, 685228, 710266, 735907, 762160, 789030, 816525, 844653, 873420, 902835, 932903, 963632, 995030, 1027103, 1059860, Number.MAX_SAFE_INTEGER],
    [0, 10, 33, 80, 156, 270, 428, 640, 911, 1250, 1663, 2160, 2746, 3430, 4218, 5120, 6141, 7290, 8573, 10000, 11576, 13310, 15208, 17280, 19531, 21970, 24603, 27440, 30486, 33750, 37238, 40960, 44921, 49130, 53593, 58320, 63316, 68590, 74148, 80000, 86151, 92610, 99383, 106480, 113906, 121670, 129778, 138240, 147061, 156250, 165813, 175760, 186096, 196830, 207968, 219520, 231491, 243890, 256723, 270000, 283726, 297910, 312558, 327680, 343281, 359370, 375953, 393040, 410636, 428750, 447388, 466560, 486271, 506530, 527343, 548720, 570666, 593190, 616298, 640000, 664301, 689210, 714733, 740880, 767656, 795070, 823128, 851840, 881211, 911250, 941963, 973360, 1005446, 1038230, 1071718, 1105920, 1140841, 1176490, 1212873, 1250000, Number.MAX_SAFE_INTEGER],
    [0, 4, 13, 32, 65, 112, 178, 276, 393, 540, 745, 967, 1230, 1591, 1957, 2457, 3046, 3732, 4526, 5440, 6482, 7666, 9003, 10506, 12187, 14060, 16140, 18439, 20974, 23760, 26811, 30146, 33780, 37731, 42017, 46656, 50653, 55969, 60505, 66560, 71677, 78533, 84277, 91998, 98415, 107069, 114205, 123863, 131766, 142500, 151222, 163105, 172697, 185807, 196322, 210739, 222231, 238036, 250562, 267840, 281456, 300293, 315059, 335544, 351520, 373744, 390991, 415050, 433631, 459620, 479600, 507617, 529063, 559209, 582187, 614566, 639146, 673863, 700115, 737280, 765275, 804997, 834809, 877201, 908905, 954084, 987754, 1035837, 1071552, 1122660, 1160499, 1214753, 1254796, 1312322, 1354652, 1415577, 1460276, 1524731, 1571884, 1640000, Number.MAX_SAFE_INTEGER],
];
var PokemonType;
(function (PokemonType) {
    PokemonType[PokemonType["None"] = -1] = "None";
    PokemonType[PokemonType["Normal"] = 0] = "Normal";
    PokemonType[PokemonType["Fire"] = 1] = "Fire";
    PokemonType[PokemonType["Water"] = 2] = "Water";
    PokemonType[PokemonType["Electric"] = 3] = "Electric";
    PokemonType[PokemonType["Grass"] = 4] = "Grass";
    PokemonType[PokemonType["Ice"] = 5] = "Ice";
    PokemonType[PokemonType["Fighting"] = 6] = "Fighting";
    PokemonType[PokemonType["Poison"] = 7] = "Poison";
    PokemonType[PokemonType["Ground"] = 8] = "Ground";
    PokemonType[PokemonType["Flying"] = 9] = "Flying";
    PokemonType[PokemonType["Psychic"] = 10] = "Psychic";
    PokemonType[PokemonType["Bug"] = 11] = "Bug";
    PokemonType[PokemonType["Rock"] = 12] = "Rock";
    PokemonType[PokemonType["Ghost"] = 13] = "Ghost";
    PokemonType[PokemonType["Dragon"] = 14] = "Dragon";
    PokemonType[PokemonType["Dark"] = 15] = "Dark";
    PokemonType[PokemonType["Steel"] = 16] = "Steel";
    PokemonType[PokemonType["Fairy"] = 17] = "Fairy";
})(PokemonType || (PokemonType = {}));
///<reference path="../party/evolutions/LevelEvolution.ts"/>
///<reference path="../party/evolutions/StoneEvolution.ts"/>
///<reference path="../party/evolutions/TimedEvolution.ts"/>
///<reference path="../party/evolutions/LocationEvolution.ts"/>
///<reference path="../GameConstants.ts"/>
///<reference path="../party/LevelType.ts"/>
///<reference path="PokemonType.ts"/>
const pokemonDevolutionMap = {};
/**
 * Datalist that contains all Pokémon data
 */
const pokemonList = [
    {
        'id': 1,
        'name': 'Bulbasaur',
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Bulbasaur', 'Ivysaur', 16)],
        'base': {
            'hitpoints': 45,
            'attack': 49,
            'specialAttack': 65,
            'defense': 49,
            'specialDefense': 65,
            'speed': 45,
        },
    },
    {
        'id': 2,
        'name': 'Ivysaur',
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Ivysaur', 'Venusaur', 32)],
        'base': {
            'hitpoints': 60,
            'attack': 62,
            'specialAttack': 80,
            'defense': 63,
            'specialDefense': 80,
            'speed': 60,
        },
    },
    {
        'id': 3,
        'name': 'Venusaur',
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 236,
        'eggCycles': 20,
        'base': {
            'hitpoints': 80,
            'attack': 82,
            'specialAttack': 100,
            'defense': 83,
            'specialDefense': 100,
            'speed': 80,
        },
    },
    {
        'id': 4,
        'name': 'Charmander',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Charmander', 'Charmeleon', 16)],
        'base': {
            'hitpoints': 39,
            'attack': 52,
            'specialAttack': 60,
            'defense': 43,
            'specialDefense': 50,
            'speed': 65,
        },
    },
    {
        'id': 5,
        'name': 'Charmeleon',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Charmeleon', 'Charizard', 36)],
        'base': {
            'hitpoints': 58,
            'attack': 64,
            'specialAttack': 80,
            'defense': 58,
            'specialDefense': 65,
            'speed': 80,
        },
    },
    {
        'id': 6,
        'name': 'Charizard',
        'catchRate': 45,
        'type': [PokemonType.Fire, PokemonType.Flying],
        'levelType': LevelType.mediumslow,
        'exp': 240,
        'eggCycles': 20,
        'base': {
            'hitpoints': 78,
            'attack': 84,
            'specialAttack': 109,
            'defense': 78,
            'specialDefense': 85,
            'speed': 100,
        },
    },
    {
        'id': 7,
        'name': 'Squirtle',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumslow,
        'exp': 63,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Squirtle', 'Wartortle', 16)],
        'base': {
            'hitpoints': 44,
            'attack': 48,
            'specialAttack': 50,
            'defense': 65,
            'specialDefense': 64,
            'speed': 43,
        },
    },
    {
        'id': 8,
        'name': 'Wartortle',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Wartortle', 'Blastoise', 36)],
        'base': {
            'hitpoints': 59,
            'attack': 63,
            'specialAttack': 65,
            'defense': 80,
            'specialDefense': 80,
            'speed': 58,
        },
    },
    {
        'id': 9,
        'name': 'Blastoise',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'eggCycles': 20,
        'base': {
            'hitpoints': 79,
            'attack': 83,
            'specialAttack': 85,
            'defense': 100,
            'specialDefense': 105,
            'speed': 78,
        },
    },
    {
        'id': 10,
        'name': 'Caterpie',
        'catchRate': 255,
        'type': [PokemonType.Bug],
        'levelType': LevelType.mediumfast,
        'exp': 39,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Caterpie', 'Metapod', 7)],
        'base': {
            'hitpoints': 45,
            'attack': 30,
            'specialAttack': 20,
            'defense': 35,
            'specialDefense': 20,
            'speed': 45,
        },
    },
    {
        'id': 11,
        'name': 'Metapod',
        'catchRate': 120,
        'type': [PokemonType.Bug],
        'levelType': LevelType.mediumfast,
        'exp': 72,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Metapod', 'Butterfree', 10)],
        'base': {
            'hitpoints': 50,
            'attack': 20,
            'specialAttack': 25,
            'defense': 55,
            'specialDefense': 25,
            'speed': 30,
        },
    },
    {
        'id': 12,
        'name': 'Butterfree',
        'catchRate': 45,
        'type': [PokemonType.Bug, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 178,
        'eggCycles': 15,
        'base': {
            'hitpoints': 60,
            'attack': 45,
            'specialAttack': 90,
            'defense': 50,
            'specialDefense': 80,
            'speed': 70,
        },
    },
    {
        'id': 13,
        'name': 'Weedle',
        'catchRate': 255,
        'type': [PokemonType.Bug, PokemonType.Poison],
        'levelType': LevelType.mediumfast,
        'exp': 39,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Weedle', 'Kakuna', 7)],
        'base': {
            'hitpoints': 40,
            'attack': 35,
            'specialAttack': 20,
            'defense': 30,
            'specialDefense': 20,
            'speed': 50,
        },
    },
    {
        'id': 14,
        'name': 'Kakuna',
        'catchRate': 120,
        'type': [PokemonType.Bug, PokemonType.Poison],
        'levelType': LevelType.mediumfast,
        'exp': 72,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Kakuna', 'Beedrill', 10)],
        'base': {
            'hitpoints': 45,
            'attack': 25,
            'specialAttack': 25,
            'defense': 50,
            'specialDefense': 25,
            'speed': 35,
        },
    },
    {
        'id': 15,
        'name': 'Beedrill',
        'catchRate': 45,
        'type': [PokemonType.Bug, PokemonType.Poison],
        'levelType': LevelType.mediumfast,
        'exp': 178,
        'eggCycles': 15,
        'base': {
            'hitpoints': 65,
            'attack': 90,
            'specialAttack': 45,
            'defense': 40,
            'specialDefense': 80,
            'speed': 75,
        },
    },
    {
        'id': 16,
        'name': 'Pidgey',
        'catchRate': 255,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'levelType': LevelType.mediumslow,
        'exp': 50,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Pidgey', 'Pidgeotto', 18)],
        'base': {
            'hitpoints': 40,
            'attack': 45,
            'specialAttack': 35,
            'defense': 40,
            'specialDefense': 35,
            'speed': 56,
        },
    },
    {
        'id': 17,
        'name': 'Pidgeotto',
        'catchRate': 120,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'levelType': LevelType.mediumslow,
        'exp': 122,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Pidgeotto', 'Pidgeot', 36)],
        'base': {
            'hitpoints': 63,
            'attack': 60,
            'specialAttack': 50,
            'defense': 55,
            'specialDefense': 50,
            'speed': 71,
        },
    },
    {
        'id': 18,
        'name': 'Pidgeot',
        'catchRate': 45,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'levelType': LevelType.mediumslow,
        'exp': 216,
        'eggCycles': 15,
        'base': {
            'hitpoints': 83,
            'attack': 80,
            'specialAttack': 70,
            'defense': 75,
            'specialDefense': 70,
            'speed': 101,
        },
    },
    {
        'id': 19,
        'name': 'Rattata',
        'catchRate': 255,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 51,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Rattata', 'Raticate', 20)],
        'base': {
            'hitpoints': 30,
            'attack': 56,
            'specialAttack': 25,
            'defense': 35,
            'specialDefense': 35,
            'speed': 72,
        },
    },
    {
        'id': 20,
        'name': 'Raticate',
        'catchRate': 127,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 145,
        'eggCycles': 15,
        'base': {
            'hitpoints': 55,
            'attack': 81,
            'specialAttack': 50,
            'defense': 60,
            'specialDefense': 70,
            'speed': 97,
        },
    },
    {
        'id': 21,
        'name': 'Spearow',
        'catchRate': 255,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 52,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Spearow', 'Fearow', 20)],
        'base': {
            'hitpoints': 40,
            'attack': 60,
            'specialAttack': 31,
            'defense': 30,
            'specialDefense': 31,
            'speed': 70,
        },
    },
    {
        'id': 22,
        'name': 'Fearow',
        'catchRate': 90,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 155,
        'eggCycles': 15,
        'base': {
            'hitpoints': 65,
            'attack': 90,
            'specialAttack': 61,
            'defense': 65,
            'specialDefense': 61,
            'speed': 100,
        },
    },
    {
        'id': 23,
        'name': 'Ekans',
        'catchRate': 255,
        'type': [PokemonType.Poison],
        'levelType': LevelType.mediumfast,
        'exp': 58,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Ekans', 'Arbok', 22)],
        'base': {
            'hitpoints': 35,
            'attack': 60,
            'specialAttack': 40,
            'defense': 44,
            'specialDefense': 54,
            'speed': 55,
        },
    },
    {
        'id': 24,
        'name': 'Arbok',
        'catchRate': 90,
        'type': [PokemonType.Poison],
        'levelType': LevelType.mediumfast,
        'exp': 157,
        'eggCycles': 20,
        'base': {
            'hitpoints': 60,
            'attack': 95,
            'specialAttack': 65,
            'defense': 69,
            'specialDefense': 79,
            'speed': 80,
        },
    },
    {
        'id': 25,
        'name': 'Pikachu',
        'catchRate': 190,
        'type': [PokemonType.Electric],
        'levelType': LevelType.mediumfast,
        'exp': 112,
        'eggCycles': 10,
        'evolutions': [new StoneEvolution('Pikachu', 'Raichu', GameConstants.StoneType.Thunder_stone)],
        'base': {
            'hitpoints': 35,
            'attack': 55,
            'specialAttack': 50,
            'defense': 40,
            'specialDefense': 50,
            'speed': 90,
        },
    },
    {
        'id': 26,
        'name': 'Raichu',
        'catchRate': 75,
        'type': [PokemonType.Electric],
        'levelType': LevelType.mediumfast,
        'exp': 218,
        'eggCycles': 10,
        'base': {
            'hitpoints': 60,
            'attack': 90,
            'specialAttack': 90,
            'defense': 55,
            'specialDefense': 80,
            'speed': 110,
        },
    },
    {
        'id': 27,
        'name': 'Sandshrew',
        'catchRate': 255,
        'type': [PokemonType.Ground],
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Sandshrew', 'Sandslash', 22)],
        'base': {
            'hitpoints': 50,
            'attack': 75,
            'specialAttack': 20,
            'defense': 85,
            'specialDefense': 30,
            'speed': 40,
        },
    },
    {
        'id': 28,
        'name': 'Sandslash',
        'catchRate': 90,
        'type': [PokemonType.Ground],
        'levelType': LevelType.mediumfast,
        'exp': 158,
        'eggCycles': 20,
        'base': {
            'hitpoints': 75,
            'attack': 100,
            'specialAttack': 45,
            'defense': 110,
            'specialDefense': 55,
            'speed': 65,
        },
    },
    {
        'id': 29,
        'name': 'Nidoran(F)',
        'catchRate': 235,
        'type': [PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 55,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Nidoran(F)', 'Nidorina', 16)],
        'base': {
            'hitpoints': 55,
            'attack': 47,
            'specialAttack': 40,
            'defense': 120,
            'specialDefense': 40,
            'speed': 41,
        },
    },
    {
        'id': 30,
        'name': 'Nidorina',
        'catchRate': 120,
        'type': [PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 128,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Nidorina', 'Nidoqueen', GameConstants.StoneType.Moon_stone)],
        'base': {
            'hitpoints': 70,
            'attack': 62,
            'specialAttack': 55,
            'defense': 67,
            'specialDefense': 55,
            'speed': 56,
        },
    },
    {
        'id': 31,
        'name': 'Nidoqueen',
        'catchRate': 45,
        'type': [PokemonType.Poison, PokemonType.Ground],
        'levelType': LevelType.mediumslow,
        'exp': 227,
        'eggCycles': 20,
        'base': {
            'hitpoints': 90,
            'attack': 92,
            'specialAttack': 75,
            'defense': 87,
            'specialDefense': 85,
            'speed': 76,
        },
    },
    {
        'id': 32,
        'name': 'Nidoran(M)',
        'catchRate': 235,
        'type': [PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 55,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Nidoran(M)', 'Nidorino', 16)],
        'base': {
            'hitpoints': 46,
            'attack': 57,
            'specialAttack': 40,
            'defense': 40,
            'specialDefense': 40,
            'speed': 50,
        },
    },
    {
        'id': 33,
        'name': 'Nidorino',
        'catchRate': 120,
        'type': [PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 128,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Nidorino', 'Nidoking', GameConstants.StoneType.Moon_stone)],
        'base': {
            'hitpoints': 61,
            'attack': 72,
            'specialAttack': 55,
            'defense': 57,
            'specialDefense': 55,
            'speed': 65,
        },
    },
    {
        'id': 34,
        'name': 'Nidoking',
        'catchRate': 45,
        'type': [PokemonType.Poison, PokemonType.Ground],
        'levelType': LevelType.mediumslow,
        'exp': 227,
        'eggCycles': 20,
        'base': {
            'hitpoints': 81,
            'attack': 102,
            'specialAttack': 85,
            'defense': 77,
            'specialDefense': 75,
            'speed': 85,
        },
    },
    {
        'id': 35,
        'name': 'Clefairy',
        'catchRate': 150,
        'type': [PokemonType.Fairy],
        'levelType': LevelType.fast,
        'exp': 113,
        'eggCycles': 10,
        'evolutions': [new StoneEvolution('Clefairy', 'Clefable', GameConstants.StoneType.Moon_stone)],
        'base': {
            'hitpoints': 70,
            'attack': 45,
            'specialAttack': 60,
            'defense': 48,
            'specialDefense': 65,
            'speed': 35,
        },
    },
    {
        'id': 36,
        'name': 'Clefable',
        'catchRate': 25,
        'type': [PokemonType.Fairy],
        'levelType': LevelType.fast,
        'exp': 217,
        'eggCycles': 10,
        'base': {
            'hitpoints': 95,
            'attack': 70,
            'specialAttack': 95,
            'defense': 73,
            'specialDefense': 90,
            'speed': 60,
        },
    },
    {
        'id': 37,
        'name': 'Vulpix',
        'catchRate': 190,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Vulpix', 'Ninetales', GameConstants.StoneType.Fire_stone)],
        'base': {
            'hitpoints': 38,
            'attack': 41,
            'specialAttack': 50,
            'defense': 40,
            'specialDefense': 65,
            'speed': 65,
        },
    },
    {
        'id': 38,
        'name': 'Ninetales',
        'catchRate': 75,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumfast,
        'exp': 177,
        'eggCycles': 20,
        'base': {
            'hitpoints': 73,
            'attack': 76,
            'specialAttack': 81,
            'defense': 75,
            'specialDefense': 100,
            'speed': 100,
        },
    },
    {
        'id': 39,
        'name': 'Jigglypuff',
        'catchRate': 170,
        'type': [PokemonType.Normal, PokemonType.Fairy],
        'levelType': LevelType.fast,
        'exp': 95,
        'eggCycles': 10,
        'evolutions': [new StoneEvolution('Jigglypuff', 'Wigglytuff', GameConstants.StoneType.Moon_stone)],
        'base': {
            'hitpoints': 115,
            'attack': 45,
            'specialAttack': 45,
            'defense': 20,
            'specialDefense': 25,
            'speed': 20,
        },
    },
    {
        'id': 40,
        'name': 'Wigglytuff',
        'catchRate': 50,
        'type': [PokemonType.Normal, PokemonType.Fairy],
        'levelType': LevelType.fast,
        'exp': 196,
        'eggCycles': 10,
        'base': {
            'hitpoints': 140,
            'attack': 70,
            'specialAttack': 85,
            'defense': 45,
            'specialDefense': 50,
            'speed': 45,
        },
    },
    {
        'id': 41,
        'name': 'Zubat',
        'catchRate': 255,
        'type': [PokemonType.Poison, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 49,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Zubat', 'Golbat', 22)],
        'base': {
            'hitpoints': 40,
            'attack': 45,
            'specialAttack': 30,
            'defense': 35,
            'specialDefense': 40,
            'speed': 55,
        },
    },
    {
        'id': 42,
        'name': 'Golbat',
        'catchRate': 90,
        'type': [PokemonType.Poison, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'eggCycles': 15,
        'evolutions': [new StoneEvolution('Golbat', 'Crobat', GameConstants.StoneType.Soothe_bell)],
        'base': {
            'hitpoints': 75,
            'attack': 80,
            'specialAttack': 65,
            'defense': 70,
            'specialDefense': 75,
            'speed': 90,
        },
    },
    {
        'id': 43,
        'name': 'Oddish',
        'catchRate': 255,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Oddish', 'Gloom', 21)],
        'base': {
            'hitpoints': 45,
            'attack': 50,
            'specialAttack': 75,
            'defense': 55,
            'specialDefense': 65,
            'speed': 30,
        },
    },
    {
        'id': 44,
        'name': 'Gloom',
        'catchRate': 120,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 138,
        'eggCycles': 20,
        'evolutions': [
            new StoneEvolution('Gloom', 'Vileplume', GameConstants.StoneType.Leaf_stone),
            new StoneEvolution('Gloom', 'Bellossom', GameConstants.StoneType.Sun_stone),
        ],
        'base': {
            'hitpoints': 60,
            'attack': 65,
            'specialAttack': 85,
            'defense': 70,
            'specialDefense': 75,
            'speed': 40,
        },
    },
    {
        'id': 45,
        'name': 'Vileplume',
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 221,
        'eggCycles': 20,
        'base': {
            'hitpoints': 75,
            'attack': 80,
            'specialAttack': 110,
            'defense': 85,
            'specialDefense': 90,
            'speed': 50,
        },
    },
    {
        'id': 46,
        'name': 'Paras',
        'catchRate': 190,
        'type': [PokemonType.Bug, PokemonType.Grass],
        'levelType': LevelType.mediumfast,
        'exp': 57,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Paras', 'Parasect', 24)],
        'base': {
            'hitpoints': 35,
            'attack': 70,
            'specialAttack': 45,
            'defense': 55,
            'specialDefense': 55,
            'speed': 25,
        },
    },
    {
        'id': 47,
        'name': 'Parasect',
        'catchRate': 75,
        'type': [PokemonType.Bug, PokemonType.Grass],
        'levelType': LevelType.mediumfast,
        'exp': 142,
        'eggCycles': 20,
        'base': {
            'hitpoints': 60,
            'attack': 95,
            'specialAttack': 60,
            'defense': 80,
            'specialDefense': 80,
            'speed': 30,
        },
    },
    {
        'id': 48,
        'name': 'Venonat',
        'catchRate': 190,
        'type': [PokemonType.Bug, PokemonType.Poison],
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Venonat', 'Venomoth', 31)],
        'base': {
            'hitpoints': 60,
            'attack': 55,
            'specialAttack': 40,
            'defense': 50,
            'specialDefense': 55,
            'speed': 45,
        },
    },
    {
        'id': 49,
        'name': 'Venomoth',
        'catchRate': 75,
        'type': [PokemonType.Bug, PokemonType.Poison],
        'levelType': LevelType.mediumfast,
        'exp': 158,
        'eggCycles': 20,
        'base': {
            'hitpoints': 70,
            'attack': 65,
            'specialAttack': 90,
            'defense': 60,
            'specialDefense': 75,
            'speed': 90,
        },
    },
    {
        'id': 50,
        'name': 'Diglett',
        'catchRate': 255,
        'type': [PokemonType.Ground],
        'levelType': LevelType.mediumfast,
        'exp': 53,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Diglett', 'Dugtrio', 26)],
        'base': {
            'hitpoints': 10,
            'attack': 55,
            'specialAttack': 35,
            'defense': 25,
            'specialDefense': 45,
            'speed': 95,
        },
    },
    {
        'id': 51,
        'name': 'Dugtrio',
        'catchRate': 50,
        'type': [PokemonType.Ground],
        'levelType': LevelType.mediumfast,
        'exp': 149,
        'eggCycles': 20,
        'base': {
            'hitpoints': 35,
            'attack': 100,
            'specialAttack': 50,
            'defense': 50,
            'specialDefense': 70,
            'speed': 120,
        },
    },
    {
        'id': 52,
        'name': 'Meowth',
        'catchRate': 255,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 58,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Meowth', 'Persian', 28)],
        'base': {
            'hitpoints': 40,
            'attack': 45,
            'specialAttack': 40,
            'defense': 35,
            'specialDefense': 40,
            'speed': 90,
        },
    },
    {
        'id': 53,
        'name': 'Persian',
        'catchRate': 90,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 154,
        'eggCycles': 20,
        'base': {
            'hitpoints': 65,
            'attack': 70,
            'specialAttack': 65,
            'defense': 60,
            'specialDefense': 65,
            'speed': 115,
        },
    },
    {
        'id': 54,
        'name': 'Psyduck',
        'catchRate': 190,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Psyduck', 'Golduck', 33)],
        'base': {
            'hitpoints': 50,
            'attack': 52,
            'specialAttack': 65,
            'defense': 48,
            'specialDefense': 50,
            'speed': 55,
        },
    },
    {
        'id': 55,
        'name': 'Golduck',
        'catchRate': 75,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'eggCycles': 20,
        'base': {
            'hitpoints': 80,
            'attack': 82,
            'specialAttack': 95,
            'defense': 78,
            'specialDefense': 80,
            'speed': 85,
        },
    },
    {
        'id': 56,
        'name': 'Mankey',
        'catchRate': 190,
        'type': [PokemonType.Fighting],
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Mankey', 'Primeape', 28)],
        'base': {
            'hitpoints': 40,
            'attack': 80,
            'specialAttack': 35,
            'defense': 35,
            'specialDefense': 45,
            'speed': 70,
        },
    },
    {
        'id': 57,
        'name': 'Primeape',
        'catchRate': 75,
        'type': [PokemonType.Fighting],
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'eggCycles': 20,
        'base': {
            'hitpoints': 65,
            'attack': 105,
            'specialAttack': 60,
            'defense': 60,
            'specialDefense': 70,
            'speed': 95,
        },
    },
    {
        'id': 58,
        'name': 'Growlithe',
        'catchRate': 190,
        'type': [PokemonType.Fire],
        'levelType': LevelType.slow,
        'exp': 70,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Growlithe', 'Arcanine', GameConstants.StoneType.Fire_stone)],
        'base': {
            'hitpoints': 55,
            'attack': 70,
            'specialAttack': 70,
            'defense': 45,
            'specialDefense': 50,
            'speed': 60,
        },
    },
    {
        'id': 59,
        'name': 'Arcanine',
        'catchRate': 75,
        'type': [PokemonType.Fire],
        'levelType': LevelType.slow,
        'exp': 194,
        'eggCycles': 20,
        'base': {
            'hitpoints': 90,
            'attack': 110,
            'specialAttack': 100,
            'defense': 80,
            'specialDefense': 80,
            'speed': 95,
        },
    },
    {
        'id': 60,
        'name': 'Poliwag',
        'catchRate': 255,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumslow,
        'exp': 60,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Poliwag', 'Poliwhirl', 25)],
        'base': {
            'hitpoints': 40,
            'attack': 50,
            'specialAttack': 40,
            'defense': 40,
            'specialDefense': 40,
            'speed': 90,
        },
    },
    {
        'id': 61,
        'name': 'Poliwhirl',
        'catchRate': 120,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumslow,
        'exp': 135,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Poliwhirl', 'Poliwrath', GameConstants.StoneType.Water_stone), new StoneEvolution('Poliwhirl', 'Politoed', GameConstants.StoneType.Kings_rock)],
        'base': {
            'hitpoints': 65,
            'attack': 65,
            'specialAttack': 50,
            'defense': 65,
            'specialDefense': 50,
            'speed': 90,
        },
    },
    {
        'id': 62,
        'name': 'Poliwrath',
        'catchRate': 45,
        'type': [PokemonType.Water, PokemonType.Fighting],
        'levelType': LevelType.mediumslow,
        'exp': 230,
        'eggCycles': 20,
        'base': {
            'hitpoints': 90,
            'attack': 95,
            'specialAttack': 70,
            'defense': 95,
            'specialDefense': 90,
            'speed': 70,
        },
    },
    {
        'id': 63,
        'name': 'Abra',
        'catchRate': 200,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Abra', 'Kadabra', 16)],
        'base': {
            'hitpoints': 25,
            'attack': 20,
            'specialAttack': 105,
            'defense': 15,
            'specialDefense': 55,
            'speed': 90,
        },
    },
    {
        'id': 64,
        'name': 'Kadabra',
        'catchRate': 100,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumslow,
        'exp': 140,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Kadabra', 'Alakazam', GameConstants.StoneType.Trade_stone)],
        'base': {
            'hitpoints': 40,
            'attack': 35,
            'specialAttack': 120,
            'defense': 30,
            'specialDefense': 70,
            'speed': 105,
        },
    },
    {
        'id': 65,
        'name': 'Alakazam',
        'catchRate': 50,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumslow,
        'exp': 225,
        'eggCycles': 20,
        'base': {
            'hitpoints': 55,
            'attack': 50,
            'specialAttack': 135,
            'defense': 45,
            'specialDefense': 95,
            'speed': 120,
        },
    },
    {
        'id': 66,
        'name': 'Machop',
        'catchRate': 180,
        'type': [PokemonType.Fighting],
        'levelType': LevelType.mediumslow,
        'exp': 61,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Machop', 'Machoke', 28)],
        'base': {
            'hitpoints': 70,
            'attack': 80,
            'specialAttack': 35,
            'defense': 50,
            'specialDefense': 35,
            'speed': 35,
        },
    },
    {
        'id': 67,
        'name': 'Machoke',
        'catchRate': 90,
        'type': [PokemonType.Fighting],
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Machoke', 'Machamp', GameConstants.StoneType.Trade_stone)],
        'base': {
            'hitpoints': 80,
            'attack': 100,
            'specialAttack': 50,
            'defense': 70,
            'specialDefense': 60,
            'speed': 45,
        },
    },
    {
        'id': 68,
        'name': 'Machamp',
        'catchRate': 45,
        'type': [PokemonType.Fighting],
        'levelType': LevelType.mediumslow,
        'exp': 227,
        'eggCycles': 20,
        'base': {
            'hitpoints': 90,
            'attack': 130,
            'specialAttack': 65,
            'defense': 80,
            'specialDefense': 85,
            'speed': 55,
        },
    },
    {
        'id': 69,
        'name': 'Bellsprout',
        'catchRate': 255,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 60,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Bellsprout', 'Weepinbell', 21)],
        'base': {
            'hitpoints': 50,
            'attack': 75,
            'specialAttack': 70,
            'defense': 35,
            'specialDefense': 30,
            'speed': 40,
        },
    },
    {
        'id': 70,
        'name': 'Weepinbell',
        'catchRate': 120,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 137,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Weepinbell', 'Victreebel', GameConstants.StoneType.Leaf_stone)],
        'base': {
            'hitpoints': 65,
            'attack': 90,
            'specialAttack': 85,
            'defense': 50,
            'specialDefense': 45,
            'speed': 55,
        },
    },
    {
        'id': 71,
        'name': 'Victreebel',
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 221,
        'eggCycles': 20,
        'base': {
            'hitpoints': 80,
            'attack': 105,
            'specialAttack': 100,
            'defense': 65,
            'specialDefense': 70,
            'speed': 70,
        },
    },
    {
        'id': 72,
        'name': 'Tentacool',
        'catchRate': 190,
        'type': [PokemonType.Water, PokemonType.Poison],
        'levelType': LevelType.slow,
        'exp': 67,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Tentacool', 'Tentacruel', 30)],
        'base': {
            'hitpoints': 40,
            'attack': 40,
            'specialAttack': 50,
            'defense': 35,
            'specialDefense': 100,
            'speed': 70,
        },
    },
    {
        'id': 73,
        'name': 'Tentacruel',
        'catchRate': 60,
        'type': [PokemonType.Water, PokemonType.Poison],
        'levelType': LevelType.slow,
        'exp': 180,
        'eggCycles': 20,
        'base': {
            'hitpoints': 80,
            'attack': 70,
            'specialAttack': 80,
            'defense': 65,
            'specialDefense': 120,
            'speed': 100,
        },
    },
    {
        'id': 74,
        'name': 'Geodude',
        'catchRate': 255,
        'type': [PokemonType.Rock, PokemonType.Ground],
        'levelType': LevelType.mediumslow,
        'exp': 60,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Geodude', 'Graveler', 25)],
        'base': {
            'hitpoints': 40,
            'attack': 80,
            'specialAttack': 30,
            'defense': 100,
            'specialDefense': 30,
            'speed': 20,
        },
    },
    {
        'id': 75,
        'name': 'Graveler',
        'catchRate': 120,
        'type': [PokemonType.Rock, PokemonType.Ground],
        'levelType': LevelType.mediumslow,
        'exp': 137,
        'eggCycles': 15,
        'evolutions': [new StoneEvolution('Graveler', 'Golem', GameConstants.StoneType.Trade_stone)],
        'base': {
            'hitpoints': 55,
            'attack': 95,
            'specialAttack': 45,
            'defense': 115,
            'specialDefense': 45,
            'speed': 35,
        },
    },
    {
        'id': 76,
        'name': 'Golem',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Ground],
        'levelType': LevelType.mediumslow,
        'exp': 223,
        'eggCycles': 15,
        'base': {
            'hitpoints': 80,
            'attack': 120,
            'specialAttack': 55,
            'defense': 130,
            'specialDefense': 65,
            'speed': 45,
        },
    },
    {
        'id': 77,
        'name': 'Ponyta',
        'catchRate': 190,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumfast,
        'exp': 82,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Ponyta', 'Rapidash', 40)],
        'base': {
            'hitpoints': 50,
            'attack': 85,
            'specialAttack': 65,
            'defense': 55,
            'specialDefense': 65,
            'speed': 90,
        },
    },
    {
        'id': 78,
        'name': 'Rapidash',
        'catchRate': 60,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'eggCycles': 20,
        'base': {
            'hitpoints': 65,
            'attack': 100,
            'specialAttack': 80,
            'defense': 70,
            'specialDefense': 80,
            'speed': 105,
        },
    },
    {
        'id': 79,
        'name': 'Slowpoke',
        'catchRate': 190,
        'type': [PokemonType.Water, PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 63,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Slowpoke', 'Slowbro', 37), new StoneEvolution('Slowpoke', 'Slowking', GameConstants.StoneType.Kings_rock)],
        'base': {
            'hitpoints': 90,
            'attack': 65,
            'specialAttack': 40,
            'defense': 65,
            'specialDefense': 40,
            'speed': 15,
        },
    },
    {
        'id': 80,
        'name': 'Slowbro',
        'catchRate': 75,
        'type': [PokemonType.Water, PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'eggCycles': 20,
        'base': {
            'hitpoints': 95,
            'attack': 75,
            'specialAttack': 100,
            'defense': 110,
            'specialDefense': 80,
            'speed': 30,
        },
        'heldItem': 'Kings_rock',
    },
    {
        'id': 81,
        'name': 'Magnemite',
        'catchRate': 190,
        'type': [PokemonType.Electric, PokemonType.Steel],
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Magnemite', 'Magneton', 30)],
        'base': {
            'hitpoints': 25,
            'attack': 35,
            'specialAttack': 95,
            'defense': 70,
            'specialDefense': 55,
            'speed': 45,
        },
    },
    {
        'id': 82,
        'name': 'Magneton',
        'catchRate': 60,
        'type': [PokemonType.Electric, PokemonType.Steel],
        'levelType': LevelType.mediumfast,
        'exp': 163,
        'eggCycles': 20,
        'evolutions': [
            new DungeonRestrictedLevelEvolution('Mt. Coronet North', 'Magneton', 'Magnezone', 20),
            new DungeonRestrictedLevelEvolution('Mt. Coronet South', 'Magneton', 'Magnezone', 20),
        ],
        'base': {
            'hitpoints': 50,
            'attack': 60,
            'specialAttack': 120,
            'defense': 95,
            'specialDefense': 70,
            'speed': 70,
        },
    },
    {
        'id': 83,
        'name': "Farfetch'd",
        'catchRate': 45,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 132,
        'eggCycles': 20,
        'base': {
            'hitpoints': 52,
            'attack': 90,
            'specialAttack': 58,
            'defense': 55,
            'specialDefense': 62,
            'speed': 60,
        },
    },
    {
        'id': 84,
        'name': 'Doduo',
        'catchRate': 190,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 62,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Doduo', 'Dodrio', 31)],
        'base': {
            'hitpoints': 35,
            'attack': 85,
            'specialAttack': 35,
            'defense': 45,
            'specialDefense': 35,
            'speed': 75,
        },
    },
    {
        'id': 85,
        'name': 'Dodrio',
        'catchRate': 45,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 165,
        'eggCycles': 20,
        'base': {
            'hitpoints': 60,
            'attack': 110,
            'specialAttack': 60,
            'defense': 70,
            'specialDefense': 60,
            'speed': 110,
        },
    },
    {
        'id': 86,
        'name': 'Seel',
        'catchRate': 190,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Seel', 'Dewgong', 34)],
        'base': {
            'hitpoints': 65,
            'attack': 45,
            'specialAttack': 45,
            'defense': 55,
            'specialDefense': 70,
            'speed': 45,
        },
    },
    {
        'id': 87,
        'name': 'Dewgong',
        'catchRate': 75,
        'type': [PokemonType.Water, PokemonType.Ice],
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'eggCycles': 20,
        'base': {
            'hitpoints': 90,
            'attack': 70,
            'specialAttack': 70,
            'defense': 80,
            'specialDefense': 95,
            'speed': 70,
        },
    },
    {
        'id': 88,
        'name': 'Grimer',
        'catchRate': 190,
        'type': [PokemonType.Poison],
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Grimer', 'Muk', 38)],
        'base': {
            'hitpoints': 80,
            'attack': 80,
            'specialAttack': 40,
            'defense': 50,
            'specialDefense': 50,
            'speed': 25,
        },
    },
    {
        'id': 89,
        'name': 'Muk',
        'catchRate': 75,
        'type': [PokemonType.Poison],
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'eggCycles': 20,
        'base': {
            'hitpoints': 105,
            'attack': 105,
            'specialAttack': 65,
            'defense': 75,
            'specialDefense': 100,
            'speed': 50,
        },
    },
    {
        'id': 90,
        'name': 'Shellder',
        'catchRate': 190,
        'type': [PokemonType.Water],
        'levelType': LevelType.slow,
        'exp': 61,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Shellder', 'Cloyster', GameConstants.StoneType.Water_stone)],
        'base': {
            'hitpoints': 30,
            'attack': 65,
            'specialAttack': 45,
            'defense': 100,
            'specialDefense': 25,
            'speed': 40,
        },
    },
    {
        'id': 91,
        'name': 'Cloyster',
        'catchRate': 60,
        'type': [PokemonType.Water, PokemonType.Ice],
        'levelType': LevelType.slow,
        'exp': 184,
        'eggCycles': 20,
        'base': {
            'hitpoints': 50,
            'attack': 95,
            'specialAttack': 85,
            'defense': 180,
            'specialDefense': 45,
            'speed': 70,
        },
    },
    {
        'id': 92,
        'name': 'Gastly',
        'catchRate': 190,
        'type': [PokemonType.Ghost, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Gastly', 'Haunter', 25)],
        'base': {
            'hitpoints': 30,
            'attack': 35,
            'specialAttack': 100,
            'defense': 30,
            'specialDefense': 35,
            'speed': 80,
        },
    },
    {
        'id': 93,
        'name': 'Haunter',
        'catchRate': 90,
        'type': [PokemonType.Ghost, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Haunter', 'Gengar', GameConstants.StoneType.Trade_stone)],
        'base': {
            'hitpoints': 45,
            'attack': 50,
            'specialAttack': 115,
            'defense': 45,
            'specialDefense': 55,
            'speed': 95,
        },
    },
    {
        'id': 94,
        'name': 'Gengar',
        'catchRate': 45,
        'type': [PokemonType.Ghost, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 225,
        'eggCycles': 20,
        'base': {
            'hitpoints': 60,
            'attack': 65,
            'specialAttack': 130,
            'defense': 60,
            'specialDefense': 75,
            'speed': 110,
        },
    },
    {
        'id': 95,
        'name': 'Onix',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Ground],
        'levelType': LevelType.mediumfast,
        'exp': 77,
        'eggCycles': 25,
        'evolutions': [new StoneEvolution('Onix', 'Steelix', GameConstants.StoneType.Metal_coat)],
        'base': {
            'hitpoints': 35,
            'attack': 45,
            'specialAttack': 30,
            'defense': 160,
            'specialDefense': 45,
            'speed': 70,
        },
    },
    {
        'id': 96,
        'name': 'Drowzee',
        'catchRate': 190,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Drowzee', 'Hypno', 26)],
        'base': {
            'hitpoints': 60,
            'attack': 48,
            'specialAttack': 43,
            'defense': 45,
            'specialDefense': 90,
            'speed': 42,
        },
    },
    {
        'id': 97,
        'name': 'Hypno',
        'catchRate': 75,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 169,
        'eggCycles': 20,
        'base': {
            'hitpoints': 85,
            'attack': 73,
            'specialAttack': 73,
            'defense': 70,
            'specialDefense': 115,
            'speed': 67,
        },
    },
    {
        'id': 98,
        'name': 'Krabby',
        'catchRate': 225,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Krabby', 'Kingler', 28)],
        'base': {
            'hitpoints': 30,
            'attack': 105,
            'specialAttack': 25,
            'defense': 90,
            'specialDefense': 25,
            'speed': 50,
        },
    },
    {
        'id': 99,
        'name': 'Kingler',
        'catchRate': 60,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'eggCycles': 20,
        'base': {
            'hitpoints': 55,
            'attack': 130,
            'specialAttack': 50,
            'defense': 115,
            'specialDefense': 50,
            'speed': 75,
        },
    },
    {
        'id': 100,
        'name': 'Voltorb',
        'catchRate': 190,
        'type': [PokemonType.Electric],
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Voltorb', 'Electrode', 30)],
        'base': {
            'hitpoints': 40,
            'attack': 30,
            'specialAttack': 55,
            'defense': 50,
            'specialDefense': 55,
            'speed': 100,
        },
    },
    {
        'id': 101,
        'name': 'Electrode',
        'catchRate': 60,
        'type': [PokemonType.Electric],
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'eggCycles': 20,
        'base': {
            'hitpoints': 60,
            'attack': 50,
            'specialAttack': 80,
            'defense': 70,
            'specialDefense': 80,
            'speed': 150,
        },
    },
    {
        'id': 102,
        'name': 'Exeggcute',
        'catchRate': 90,
        'type': [PokemonType.Grass, PokemonType.Psychic],
        'levelType': LevelType.slow,
        'exp': 65,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Exeggcute', 'Exeggutor', GameConstants.StoneType.Leaf_stone)],
        'base': {
            'hitpoints': 60,
            'attack': 40,
            'specialAttack': 60,
            'defense': 80,
            'specialDefense': 45,
            'speed': 40,
        },
    },
    {
        'id': 103,
        'name': 'Exeggutor',
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Psychic],
        'levelType': LevelType.slow,
        'exp': 186,
        'eggCycles': 20,
        'base': {
            'hitpoints': 95,
            'attack': 95,
            'specialAttack': 125,
            'defense': 85,
            'specialDefense': 75,
            'speed': 55,
        },
    },
    {
        'id': 104,
        'name': 'Cubone',
        'catchRate': 190,
        'type': [PokemonType.Ground],
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Cubone', 'Marowak', 28)],
        'base': {
            'hitpoints': 50,
            'attack': 50,
            'specialAttack': 40,
            'defense': 95,
            'specialDefense': 50,
            'speed': 35,
        },
    },
    {
        'id': 105,
        'name': 'Marowak',
        'catchRate': 75,
        'type': [PokemonType.Ground],
        'levelType': LevelType.mediumfast,
        'exp': 149,
        'eggCycles': 20,
        'base': {
            'hitpoints': 60,
            'attack': 80,
            'specialAttack': 50,
            'defense': 110,
            'specialDefense': 80,
            'speed': 45,
        },
    },
    {
        'id': 106,
        'name': 'Hitmonlee',
        'catchRate': 45,
        'type': [PokemonType.Fighting],
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'eggCycles': 25,
        'base': {
            'hitpoints': 50,
            'attack': 120,
            'specialAttack': 35,
            'defense': 53,
            'specialDefense': 110,
            'speed': 87,
        },
    },
    {
        'id': 107,
        'name': 'Hitmonchan',
        'catchRate': 45,
        'type': [PokemonType.Fighting],
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'eggCycles': 25,
        'base': {
            'hitpoints': 50,
            'attack': 105,
            'specialAttack': 35,
            'defense': 79,
            'specialDefense': 110,
            'speed': 76,
        },
    },
    {
        'id': 108,
        'name': 'Lickitung',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 77,
        'evolutions': [new LevelEvolution('Lickitung', 'Lickilicky', 33)],
        'eggCycles': 20,
        'base': {
            'hitpoints': 90,
            'attack': 55,
            'specialAttack': 60,
            'defense': 75,
            'specialDefense': 75,
            'speed': 30,
        },
    },
    {
        'id': 109,
        'name': 'Koffing',
        'catchRate': 190,
        'type': [PokemonType.Poison],
        'levelType': LevelType.mediumfast,
        'exp': 68,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Koffing', 'Weezing', 35)],
        'base': {
            'hitpoints': 40,
            'attack': 65,
            'specialAttack': 60,
            'defense': 95,
            'specialDefense': 45,
            'speed': 35,
        },
    },
    {
        'id': 110,
        'name': 'Weezing',
        'catchRate': 60,
        'type': [PokemonType.Poison],
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'eggCycles': 20,
        'base': {
            'hitpoints': 65,
            'attack': 90,
            'specialAttack': 85,
            'defense': 120,
            'specialDefense': 70,
            'speed': 60,
        },
    },
    {
        'id': 111,
        'name': 'Rhyhorn',
        'catchRate': 120,
        'type': [PokemonType.Ground, PokemonType.Rock],
        'levelType': LevelType.slow,
        'exp': 69,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Rhyhorn', 'Rhydon', 42)],
        'base': {
            'hitpoints': 80,
            'attack': 85,
            'specialAttack': 30,
            'defense': 95,
            'specialDefense': 30,
            'speed': 25,
        },
    },
    {
        'id': 112,
        'name': 'Rhydon',
        'catchRate': 60,
        'type': [PokemonType.Ground, PokemonType.Rock],
        'levelType': LevelType.slow,
        'exp': 170,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Rhydon', 'Rhyperior', GameConstants.StoneType.Protector)],
        'base': {
            'hitpoints': 105,
            'attack': 130,
            'specialAttack': 45,
            'defense': 120,
            'specialDefense': 45,
            'speed': 40,
        },
    },
    {
        'id': 113,
        'name': 'Chansey',
        'catchRate': 30,
        'type': [PokemonType.Normal],
        'levelType': LevelType.fast,
        'exp': 395,
        'eggCycles': 40,
        'evolutions': [new StoneEvolution('Chansey', 'Blissey', GameConstants.StoneType.Soothe_bell)],
        'base': {
            'hitpoints': 250,
            'attack': 5,
            'specialAttack': 35,
            'defense': 5,
            'specialDefense': 105,
            'speed': 50,
        },
    },
    {
        'id': 114,
        'name': 'Tangela',
        'catchRate': 45,
        'type': [PokemonType.Grass],
        'levelType': LevelType.mediumfast,
        'exp': 87,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Tangela', 'Tangrowth', 33)],
        'base': {
            'hitpoints': 65,
            'attack': 55,
            'specialAttack': 100,
            'defense': 115,
            'specialDefense': 40,
            'speed': 60,
        },
    },
    {
        'id': 115,
        'name': 'Kangaskhan',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'eggCycles': 20,
        'base': {
            'hitpoints': 105,
            'attack': 95,
            'specialAttack': 40,
            'defense': 80,
            'specialDefense': 80,
            'speed': 90,
        },
    },
    {
        'id': 116,
        'name': 'Horsea',
        'catchRate': 225,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 59,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Horsea', 'Seadra', 32)],
        'base': {
            'hitpoints': 30,
            'attack': 40,
            'specialAttack': 70,
            'defense': 70,
            'specialDefense': 25,
            'speed': 60,
        },
    },
    {
        'id': 117,
        'name': 'Seadra',
        'catchRate': 75,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 154,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Seadra', 'Kingdra', GameConstants.StoneType.Dragon_scale)],
        'base': {
            'hitpoints': 55,
            'attack': 65,
            'specialAttack': 95,
            'defense': 95,
            'specialDefense': 45,
            'speed': 85,
        },
    },
    {
        'id': 118,
        'name': 'Goldeen',
        'catchRate': 225,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Goldeen', 'Seaking', 33)],
        'base': {
            'hitpoints': 45,
            'attack': 67,
            'specialAttack': 35,
            'defense': 60,
            'specialDefense': 50,
            'speed': 63,
        },
    },
    {
        'id': 119,
        'name': 'Seaking',
        'catchRate': 60,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 158,
        'eggCycles': 20,
        'base': {
            'hitpoints': 80,
            'attack': 92,
            'specialAttack': 65,
            'defense': 65,
            'specialDefense': 80,
            'speed': 68,
        },
    },
    {
        'id': 120,
        'name': 'Staryu',
        'catchRate': 225,
        'type': [PokemonType.Water],
        'levelType': LevelType.slow,
        'exp': 68,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Staryu', 'Starmie', GameConstants.StoneType.Water_stone)],
        'base': {
            'hitpoints': 30,
            'attack': 45,
            'specialAttack': 70,
            'defense': 55,
            'specialDefense': 55,
            'speed': 85,
        },
    },
    {
        'id': 121,
        'name': 'Starmie',
        'catchRate': 60,
        'type': [PokemonType.Water, PokemonType.Psychic],
        'levelType': LevelType.slow,
        'exp': 182,
        'eggCycles': 20,
        'base': {
            'hitpoints': 60,
            'attack': 75,
            'specialAttack': 100,
            'defense': 85,
            'specialDefense': 85,
            'speed': 115,
        },
    },
    {
        'id': 122,
        'name': 'Mr. Mime',
        'catchRate': 45,
        'type': [PokemonType.Psychic, PokemonType.Fairy],
        'levelType': LevelType.mediumfast,
        'exp': 161,
        'eggCycles': 25,
        'base': {
            'hitpoints': 40,
            'attack': 45,
            'specialAttack': 100,
            'defense': 65,
            'specialDefense': 120,
            'speed': 90,
        },
    },
    {
        'id': 123,
        'name': 'Scyther',
        'catchRate': 45,
        'type': [PokemonType.Bug, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 100,
        'eggCycles': 25,
        'evolutions': [new StoneEvolution('Scyther', 'Scizor', GameConstants.StoneType.Metal_coat)],
        'base': {
            'hitpoints': 70,
            'attack': 110,
            'specialAttack': 55,
            'defense': 80,
            'specialDefense': 80,
            'speed': 105,
        },
    },
    {
        'id': 124,
        'name': 'Jynx',
        'catchRate': 45,
        'type': [PokemonType.Ice, PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'eggCycles': 25,
        'base': {
            'hitpoints': 65,
            'attack': 50,
            'specialAttack': 115,
            'defense': 35,
            'specialDefense': 95,
            'speed': 95,
        },
    },
    {
        'id': 125,
        'name': 'Electabuzz',
        'catchRate': 45,
        'type': [PokemonType.Electric],
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'eggCycles': 25,
        'evolutions': [new StoneEvolution('Electabuzz', 'Electivire', GameConstants.StoneType.Electirizer)],
        'base': {
            'hitpoints': 65,
            'attack': 83,
            'specialAttack': 95,
            'defense': 57,
            'specialDefense': 85,
            'speed': 105,
        },
    },
    {
        'id': 126,
        'name': 'Magmar',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'eggCycles': 25,
        'evolutions': [new StoneEvolution('Magmar', 'Magmortar', GameConstants.StoneType.Magmarizer)],
        'base': {
            'hitpoints': 65,
            'attack': 95,
            'specialAttack': 100,
            'defense': 57,
            'specialDefense': 85,
            'speed': 93,
        },
    },
    {
        'id': 127,
        'name': 'Pinsir',
        'catchRate': 45,
        'type': [PokemonType.Bug],
        'levelType': LevelType.slow,
        'exp': 175,
        'eggCycles': 25,
        'base': {
            'hitpoints': 65,
            'attack': 125,
            'specialAttack': 55,
            'defense': 100,
            'specialDefense': 70,
            'speed': 85,
        },
    },
    {
        'id': 128,
        'name': 'Tauros',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'levelType': LevelType.slow,
        'exp': 172,
        'eggCycles': 20,
        'base': {
            'hitpoints': 75,
            'attack': 100,
            'specialAttack': 40,
            'defense': 95,
            'specialDefense': 70,
            'speed': 110,
        },
    },
    {
        'id': 129,
        'name': 'Magikarp',
        'catchRate': 255,
        'type': [PokemonType.Water],
        'levelType': LevelType.slow,
        'exp': 40,
        'eggCycles': 5,
        'evolutions': [new LevelEvolution('Magikarp', 'Gyarados', 20)],
        'base': {
            'hitpoints': 20,
            'attack': 10,
            'specialAttack': 15,
            'defense': 55,
            'specialDefense': 20,
            'speed': 80,
        },
    },
    {
        'id': 130,
        'name': 'Gyarados',
        'catchRate': 45,
        'type': [PokemonType.Water, PokemonType.Flying],
        'levelType': LevelType.slow,
        'exp': 189,
        'eggCycles': 5,
        'base': {
            'hitpoints': 95,
            'attack': 125,
            'specialAttack': 60,
            'defense': 79,
            'specialDefense': 100,
            'speed': 81,
        },
    },
    {
        'id': 131,
        'name': 'Lapras',
        'catchRate': 45,
        'type': [PokemonType.Water, PokemonType.Ice],
        'levelType': LevelType.slow,
        'exp': 187,
        'eggCycles': 40,
        'base': {
            'hitpoints': 130,
            'attack': 85,
            'specialAttack': 85,
            'defense': 80,
            'specialDefense': 95,
            'speed': 60,
        },
    },
    {
        'id': 132,
        'name': 'Ditto',
        'catchRate': 35,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 101,
        'eggCycles': 20,
        'base': {
            'hitpoints': 48,
            'attack': 48,
            'specialAttack': 48,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 133,
        'name': 'Eevee',
        'catchRate': 255,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'eggCycles': 35,
        'evolutions': [
            new StoneEvolution('Eevee', 'Vaporeon', GameConstants.StoneType.Water_stone),
            new StoneEvolution('Eevee', 'Jolteon', GameConstants.StoneType.Thunder_stone),
            new StoneEvolution('Eevee', 'Flareon', GameConstants.StoneType.Fire_stone),
            new DayTimedStoneEvolution('Eevee', 'Espeon', GameConstants.StoneType.Soothe_bell),
            new NightTimedStoneEvolution('Eevee', 'Umbreon', GameConstants.StoneType.Soothe_bell),
            new DungeonRestrictedLevelEvolution('Lake Acuity', 'Eevee', 'Glaceon', 20),
            new DungeonRestrictedLevelEvolution('Eterna Forest', 'Eevee', 'Leafeon', 20),
        ],
        'base': {
            'hitpoints': 55,
            'attack': 55,
            'specialAttack': 45,
            'defense': 50,
            'specialDefense': 65,
            'speed': 55,
        },
    },
    {
        'id': 134,
        'name': 'Vaporeon',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'eggCycles': 35,
        'base': {
            'hitpoints': 130,
            'attack': 65,
            'specialAttack': 110,
            'defense': 60,
            'specialDefense': 95,
            'speed': 65,
        },
    },
    {
        'id': 135,
        'name': 'Jolteon',
        'catchRate': 45,
        'type': [PokemonType.Electric],
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'eggCycles': 35,
        'base': {
            'hitpoints': 65,
            'attack': 65,
            'specialAttack': 110,
            'defense': 60,
            'specialDefense': 95,
            'speed': 130,
        },
    },
    {
        'id': 136,
        'name': 'Flareon',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'eggCycles': 35,
        'base': {
            'hitpoints': 65,
            'attack': 130,
            'specialAttack': 95,
            'defense': 60,
            'specialDefense': 110,
            'speed': 65,
        },
    },
    {
        'id': 137,
        'name': 'Porygon',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 79,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Porygon', 'Porygon2', GameConstants.StoneType.Upgrade)],
        'base': {
            'hitpoints': 65,
            'attack': 60,
            'specialAttack': 85,
            'defense': 70,
            'specialDefense': 75,
            'speed': 40,
        },
    },
    {
        'id': 138,
        'name': 'Omanyte',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 71,
        'eggCycles': 30,
        'evolutions': [new LevelEvolution('Omanyte', 'Omastar', 40)],
        'base': {
            'hitpoints': 35,
            'attack': 40,
            'specialAttack': 90,
            'defense': 100,
            'specialDefense': 55,
            'speed': 35,
        },
    },
    {
        'id': 139,
        'name': 'Omastar',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'eggCycles': 30,
        'base': {
            'hitpoints': 70,
            'attack': 60,
            'specialAttack': 115,
            'defense': 125,
            'specialDefense': 70,
            'speed': 55,
        },
    },
    {
        'id': 140,
        'name': 'Kabuto',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 71,
        'eggCycles': 30,
        'evolutions': [new LevelEvolution('Kabuto', 'Kabutops', 40)],
        'base': {
            'hitpoints': 30,
            'attack': 80,
            'specialAttack': 55,
            'defense': 90,
            'specialDefense': 45,
            'speed': 55,
        },
    },
    {
        'id': 141,
        'name': 'Kabutops',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'eggCycles': 30,
        'base': {
            'hitpoints': 60,
            'attack': 115,
            'specialAttack': 65,
            'defense': 105,
            'specialDefense': 70,
            'speed': 80,
        },
    },
    {
        'id': 142,
        'name': 'Aerodactyl',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Flying],
        'levelType': LevelType.slow,
        'exp': 180,
        'eggCycles': 35,
        'base': {
            'hitpoints': 80,
            'attack': 105,
            'specialAttack': 60,
            'defense': 65,
            'specialDefense': 75,
            'speed': 130,
        },
    },
    {
        'id': 143,
        'name': 'Snorlax',
        'catchRate': 25,
        'type': [PokemonType.Normal],
        'levelType': LevelType.slow,
        'exp': 189,
        'eggCycles': 40,
        'base': {
            'hitpoints': 160,
            'attack': 110,
            'specialAttack': 65,
            'defense': 65,
            'specialDefense': 110,
            'speed': 30,
        },
    },
    {
        'id': 144,
        'name': 'Articuno',
        'catchRate': 3,
        'type': [PokemonType.Ice, PokemonType.Flying],
        'levelType': LevelType.slow,
        'exp': 261,
        'eggCycles': 80,
        'base': {
            'hitpoints': 90,
            'attack': 85,
            'specialAttack': 95,
            'defense': 100,
            'specialDefense': 125,
            'speed': 85,
        },
    },
    {
        'id': 145,
        'name': 'Zapdos',
        'catchRate': 3,
        'type': [PokemonType.Electric, PokemonType.Flying],
        'levelType': LevelType.slow,
        'exp': 261,
        'eggCycles': 80,
        'base': {
            'hitpoints': 90,
            'attack': 90,
            'specialAttack': 125,
            'defense': 85,
            'specialDefense': 90,
            'speed': 100,
        },
    },
    {
        'id': 146,
        'name': 'Moltres',
        'catchRate': 3,
        'type': [PokemonType.Fire, PokemonType.Flying],
        'levelType': LevelType.slow,
        'exp': 261,
        'eggCycles': 80,
        'base': {
            'hitpoints': 90,
            'attack': 100,
            'specialAttack': 125,
            'defense': 90,
            'specialDefense': 85,
            'speed': 90,
        },
    },
    {
        'id': 147,
        'name': 'Dratini',
        'catchRate': 45,
        'type': [PokemonType.Dragon],
        'levelType': LevelType.slow,
        'exp': 60,
        'eggCycles': 40,
        'evolutions': [new LevelEvolution('Dratini', 'Dragonair', 30)],
        'base': {
            'hitpoints': 41,
            'attack': 64,
            'specialAttack': 50,
            'defense': 45,
            'specialDefense': 50,
            'speed': 50,
        },
        'heldItem': 'Dragon_scale',
    },
    {
        'id': 148,
        'name': 'Dragonair',
        'catchRate': 45,
        'type': [PokemonType.Dragon],
        'levelType': LevelType.slow,
        'exp': 147,
        'eggCycles': 40,
        'evolutions': [new LevelEvolution('Dragonair', 'Dragonite', 55)],
        'base': {
            'hitpoints': 61,
            'attack': 84,
            'specialAttack': 70,
            'defense': 65,
            'specialDefense': 70,
            'speed': 70,
        },
    },
    {
        'id': 149,
        'name': 'Dragonite',
        'catchRate': 45,
        'type': [PokemonType.Dragon, PokemonType.Flying],
        'levelType': LevelType.slow,
        'exp': 270,
        'eggCycles': 40,
        'base': {
            'hitpoints': 91,
            'attack': 134,
            'specialAttack': 100,
            'defense': 95,
            'specialDefense': 100,
            'speed': 80,
        },
    },
    {
        'id': 150,
        'name': 'Mewtwo',
        'catchRate': 3,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.slow,
        'exp': 306,
        'eggCycles': 120,
        'base': {
            'hitpoints': 106,
            'attack': 110,
            'specialAttack': 154,
            'defense': 90,
            'specialDefense': 90,
            'speed': 130,
        },
    },
    {
        'id': 151,
        'name': 'Mew',
        'catchRate': 45,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumslow,
        'exp': 270,
        'eggCycles': 120,
        'base': {
            'hitpoints': 100,
            'attack': 100,
            'specialAttack': 100,
            'defense': 100,
            'specialDefense': 100,
            'speed': 100,
        },
    },
    {
        'id': 152,
        'name': 'Chikorita',
        'catchRate': 45,
        'type': [PokemonType.Grass],
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Chikorita', 'Bayleef', 16)],
        'base': {
            'hitpoints': 45,
            'attack': 49,
            'specialAttack': 49,
            'defense': 65,
            'specialDefense': 65,
            'speed': 45,
        },
    },
    {
        'id': 153,
        'name': 'Bayleef',
        'catchRate': 45,
        'type': [PokemonType.Grass],
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Bayleef', 'Meganium', 32)],
        'base': {
            'hitpoints': 60,
            'attack': 62,
            'specialAttack': 63,
            'defense': 80,
            'specialDefense': 80,
            'speed': 60,
        },
    },
    {
        'id': 154,
        'name': 'Meganium',
        'catchRate': 45,
        'type': [PokemonType.Grass],
        'levelType': LevelType.mediumslow,
        'exp': 236,
        'eggCycles': 20,
        'base': {
            'hitpoints': 80,
            'attack': 82,
            'specialAttack': 83,
            'defense': 100,
            'specialDefense': 100,
            'speed': 80,
        },
    },
    {
        'id': 155,
        'name': 'Cyndaquil',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Cyndaquil', 'Quilava', 14)],
        'base': {
            'hitpoints': 39,
            'attack': 52,
            'specialAttack': 60,
            'defense': 43,
            'specialDefense': 50,
            'speed': 65,
        },
    },
    {
        'id': 156,
        'name': 'Quilava',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Quilava', 'Typhlosion', 36)],
        'base': {
            'hitpoints': 58,
            'attack': 64,
            'specialAttack': 80,
            'defense': 58,
            'specialDefense': 65,
            'speed': 80,
        },
    },
    {
        'id': 157,
        'name': 'Typhlosion',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumslow,
        'exp': 240,
        'eggCycles': 20,
        'base': {
            'hitpoints': 78,
            'attack': 84,
            'specialAttack': 109,
            'defense': 78,
            'specialDefense': 85,
            'speed': 100,
        },
    },
    {
        'id': 158,
        'name': 'Totodile',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumslow,
        'exp': 63,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Totodile', 'Croconaw', 18)],
        'base': {
            'hitpoints': 50,
            'attack': 65,
            'specialAttack': 44,
            'defense': 64,
            'specialDefense': 48,
            'speed': 43,
        },
    },
    {
        'id': 159,
        'name': 'Croconaw',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Croconaw', 'Feraligatr', 30)],
        'base': {
            'hitpoints': 65,
            'attack': 80,
            'specialAttack': 59,
            'defense': 80,
            'specialDefense': 63,
            'speed': 58,
        },
    },
    {
        'id': 160,
        'name': 'Feraligatr',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'eggCycles': 20,
        'base': {
            'hitpoints': 85,
            'attack': 105,
            'specialAttack': 79,
            'defense': 100,
            'specialDefense': 83,
            'speed': 78,
        },
    },
    {
        'id': 161,
        'name': 'Sentret',
        'catchRate': 255,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 43,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Sentret', 'Furret', 15)],
        'base': {
            'hitpoints': 35,
            'attack': 46,
            'specialAttack': 35,
            'defense': 34,
            'specialDefense': 45,
            'speed': 20,
        },
    },
    {
        'id': 162,
        'name': 'Furret',
        'catchRate': 90,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 145,
        'eggCycles': 15,
        'base': {
            'hitpoints': 85,
            'attack': 76,
            'specialAttack': 45,
            'defense': 64,
            'specialDefense': 55,
            'speed': 90,
        },
    },
    {
        'id': 163,
        'name': 'Hoothoot',
        'catchRate': 255,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 52,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Hoothoot', 'Noctowl', 20)],
        'base': {
            'hitpoints': 60,
            'attack': 30,
            'specialAttack': 36,
            'defense': 30,
            'specialDefense': 56,
            'speed': 50,
        },
    },
    {
        'id': 164,
        'name': 'Noctowl',
        'catchRate': 90,
        'type': [PokemonType.Normal, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 158,
        'eggCycles': 15,
        'base': {
            'hitpoints': 100,
            'attack': 50,
            'specialAttack': 86,
            'defense': 50,
            'specialDefense': 96,
            'speed': 70,
        },
    },
    {
        'id': 165,
        'name': 'Ledyba',
        'catchRate': 255,
        'type': [PokemonType.Bug, PokemonType.Flying],
        'levelType': LevelType.fast,
        'exp': 53,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Ledyba', 'Ledian', 18)],
        'base': {
            'hitpoints': 40,
            'attack': 20,
            'specialAttack': 40,
            'defense': 30,
            'specialDefense': 80,
            'speed': 55,
        },
    },
    {
        'id': 166,
        'name': 'Ledian',
        'catchRate': 90,
        'type': [PokemonType.Bug, PokemonType.Flying],
        'levelType': LevelType.fast,
        'exp': 137,
        'eggCycles': 15,
        'base': {
            'hitpoints': 55,
            'attack': 35,
            'specialAttack': 55,
            'defense': 50,
            'specialDefense': 110,
            'speed': 85,
        },
    },
    {
        'id': 167,
        'name': 'Spinarak',
        'catchRate': 255,
        'type': [PokemonType.Bug, PokemonType.Poison],
        'levelType': LevelType.fast,
        'exp': 50,
        'eggCycles': 15,
        'evolutions': [new LevelEvolution('Spinarak', 'Ariados', 22)],
        'base': {
            'hitpoints': 40,
            'attack': 60,
            'specialAttack': 40,
            'defense': 40,
            'specialDefense': 40,
            'speed': 30,
        },
    },
    {
        'id': 168,
        'name': 'Ariados',
        'catchRate': 90,
        'type': [PokemonType.Bug, PokemonType.Poison],
        'levelType': LevelType.fast,
        'exp': 140,
        'eggCycles': 15,
        'base': {
            'hitpoints': 70,
            'attack': 90,
            'specialAttack': 60,
            'defense': 70,
            'specialDefense': 70,
            'speed': 40,
        },
    },
    {
        'id': 169,
        'name': 'Crobat',
        'catchRate': 90,
        'type': [PokemonType.Poison, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 241,
        'eggCycles': 15,
        'base': {
            'hitpoints': 85,
            'attack': 90,
            'specialAttack': 70,
            'defense': 80,
            'specialDefense': 80,
            'speed': 130,
        },
    },
    {
        'id': 170,
        'name': 'Chinchou',
        'catchRate': 190,
        'type': [PokemonType.Water, PokemonType.Electric],
        'levelType': LevelType.slow,
        'exp': 66,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Chinchou', 'Lanturn', 27)],
        'base': {
            'hitpoints': 75,
            'attack': 38,
            'specialAttack': 56,
            'defense': 38,
            'specialDefense': 56,
            'speed': 67,
        },
    },
    {
        'id': 171,
        'name': 'Lanturn',
        'catchRate': 75,
        'type': [PokemonType.Water, PokemonType.Electric],
        'levelType': LevelType.slow,
        'exp': 161,
        'eggCycles': 20,
        'base': {
            'hitpoints': 125,
            'attack': 58,
            'specialAttack': 76,
            'defense': 58,
            'specialDefense': 76,
            'speed': 67,
        },
    },
    {
        'id': 172,
        'name': 'Pichu',
        'catchRate': 190,
        'type': [PokemonType.Electric],
        'levelType': LevelType.mediumfast,
        'exp': 41,
        'eggCycles': 10,
        'evolutions': [new StoneEvolution('Pichu', 'Pikachu', GameConstants.StoneType.Soothe_bell)],
        'baby': true,
        'base': {
            'hitpoints': 20,
            'attack': 40,
            'specialAttack': 35,
            'defense': 15,
            'specialDefense': 35,
            'speed': 60,
        },
    },
    {
        'id': 173,
        'name': 'Cleffa',
        'catchRate': 150,
        'type': [PokemonType.Fairy],
        'levelType': LevelType.fast,
        'exp': 44,
        'eggCycles': 10,
        'evolutions': [new StoneEvolution('Cleffa', 'Clefairy', GameConstants.StoneType.Soothe_bell)],
        'baby': true,
        'base': {
            'hitpoints': 50,
            'attack': 25,
            'specialAttack': 45,
            'defense': 28,
            'specialDefense': 55,
            'speed': 15,
        },
    },
    {
        'id': 174,
        'name': 'Igglybuff',
        'catchRate': 170,
        'type': [PokemonType.Normal, PokemonType.Fairy],
        'levelType': LevelType.fast,
        'exp': 42,
        'eggCycles': 10,
        'evolutions': [new StoneEvolution('Igglybuff', 'Jigglypuff', GameConstants.StoneType.Soothe_bell)],
        'baby': true,
        'base': {
            'hitpoints': 90,
            'attack': 30,
            'specialAttack': 40,
            'defense': 15,
            'specialDefense': 20,
            'speed': 15,
        },
    },
    {
        'id': 175,
        'name': 'Togepi',
        'catchRate': 190,
        'type': [PokemonType.Fairy],
        'levelType': LevelType.fast,
        'exp': 49,
        'eggCycles': 10,
        'evolutions': [new StoneEvolution('Togepi', 'Togetic', GameConstants.StoneType.Soothe_bell)],
        'base': {
            'hitpoints': 35,
            'attack': 20,
            'specialAttack': 40,
            'defense': 65,
            'specialDefense': 65,
            'speed': 20,
        },
    },
    {
        'id': 176,
        'name': 'Togetic',
        'catchRate': 75,
        'type': [PokemonType.Fairy, PokemonType.Flying],
        'levelType': LevelType.fast,
        'exp': 142,
        'eggCycles': 10,
        'evolutions': [new StoneEvolution('Togetic', 'Togekiss', GameConstants.StoneType.Shiny_stone)],
        'base': {
            'hitpoints': 55,
            'attack': 40,
            'specialAttack': 80,
            'defense': 85,
            'specialDefense': 105,
            'speed': 40,
        },
    },
    {
        'id': 177,
        'name': 'Natu',
        'catchRate': 190,
        'type': [PokemonType.Psychic, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Natu', 'Xatu', 25)],
        'base': {
            'hitpoints': 40,
            'attack': 50,
            'specialAttack': 70,
            'defense': 45,
            'specialDefense': 45,
            'speed': 70,
        },
    },
    {
        'id': 178,
        'name': 'Xatu',
        'catchRate': 75,
        'type': [PokemonType.Psychic, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 165,
        'eggCycles': 20,
        'base': {
            'hitpoints': 65,
            'attack': 75,
            'specialAttack': 95,
            'defense': 70,
            'specialDefense': 70,
            'speed': 95,
        },
    },
    {
        'id': 179,
        'name': 'Mareep',
        'catchRate': 235,
        'type': [PokemonType.Electric],
        'levelType': LevelType.mediumslow,
        'exp': 56,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Mareep', 'Flaaffy', 15)],
        'base': {
            'hitpoints': 55,
            'attack': 40,
            'specialAttack': 65,
            'defense': 40,
            'specialDefense': 45,
            'speed': 35,
        },
    },
    {
        'id': 180,
        'name': 'Flaaffy',
        'catchRate': 120,
        'type': [PokemonType.Electric],
        'levelType': LevelType.mediumslow,
        'exp': 128,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Flaaffy', 'Ampharos', 30)],
        'base': {
            'hitpoints': 70,
            'attack': 55,
            'specialAttack': 80,
            'defense': 55,
            'specialDefense': 60,
            'speed': 45,
        },
    },
    {
        'id': 181,
        'name': 'Ampharos',
        'catchRate': 45,
        'type': [PokemonType.Electric],
        'levelType': LevelType.mediumslow,
        'exp': 230,
        'eggCycles': 20,
        'base': {
            'hitpoints': 90,
            'attack': 75,
            'specialAttack': 115,
            'defense': 85,
            'specialDefense': 90,
            'speed': 55,
        },
    },
    {
        'id': 182,
        'name': 'Bellossom',
        'catchRate': 45,
        'type': [PokemonType.Grass],
        'levelType': LevelType.mediumslow,
        'exp': 221,
        'eggCycles': 20,
        'base': {
            'hitpoints': 75,
            'attack': 80,
            'specialAttack': 90,
            'defense': 95,
            'specialDefense': 100,
            'speed': 50,
        },
    },
    {
        'id': 183,
        'name': 'Marill',
        'catchRate': 190,
        'type': [PokemonType.Water, PokemonType.Fairy],
        'levelType': LevelType.fast,
        'exp': 88,
        'eggCycles': 10,
        'evolutions': [new LevelEvolution('Marill', 'Azumarill', 18)],
        'base': {
            'hitpoints': 70,
            'attack': 20,
            'specialAttack': 20,
            'defense': 50,
            'specialDefense': 50,
            'speed': 40,
        },
    },
    {
        'id': 184,
        'name': 'Azumarill',
        'catchRate': 75,
        'type': [PokemonType.Water, PokemonType.Fairy],
        'levelType': LevelType.fast,
        'exp': 189,
        'eggCycles': 10,
        'base': {
            'hitpoints': 100,
            'attack': 50,
            'specialAttack': 60,
            'defense': 80,
            'specialDefense': 80,
            'speed': 50,
        },
    },
    {
        'id': 185,
        'name': 'Sudowoodo',
        'catchRate': 65,
        'type': [PokemonType.Rock],
        'levelType': LevelType.mediumfast,
        'exp': 144,
        'eggCycles': 20,
        'base': {
            'hitpoints': 70,
            'attack': 100,
            'specialAttack': 30,
            'defense': 115,
            'specialDefense': 65,
            'speed': 30,
        },
    },
    {
        'id': 186,
        'name': 'Politoed',
        'catchRate': 45,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumslow,
        'exp': 225,
        'eggCycles': 20,
        'base': {
            'hitpoints': 90,
            'attack': 75,
            'specialAttack': 90,
            'defense': 75,
            'specialDefense': 100,
            'speed': 70,
        },
    },
    {
        'id': 187,
        'name': 'Hoppip',
        'catchRate': 255,
        'type': [PokemonType.Grass, PokemonType.Flying],
        'levelType': LevelType.mediumslow,
        'exp': 50,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Hoppip', 'Skiploom', 18)],
        'base': {
            'hitpoints': 35,
            'attack': 35,
            'specialAttack': 35,
            'defense': 40,
            'specialDefense': 55,
            'speed': 50,
        },
    },
    {
        'id': 188,
        'name': 'Skiploom',
        'catchRate': 120,
        'type': [PokemonType.Grass, PokemonType.Flying],
        'levelType': LevelType.mediumslow,
        'exp': 119,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Skiploom', 'Jumpluff', 27)],
        'base': {
            'hitpoints': 55,
            'attack': 45,
            'specialAttack': 45,
            'defense': 50,
            'specialDefense': 65,
            'speed': 80,
        },
    },
    {
        'id': 189,
        'name': 'Jumpluff',
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Flying],
        'levelType': LevelType.mediumslow,
        'exp': 207,
        'eggCycles': 20,
        'base': {
            'hitpoints': 75,
            'attack': 55,
            'specialAttack': 55,
            'defense': 70,
            'specialDefense': 95,
            'speed': 110,
        },
    },
    {
        'id': 190,
        'name': 'Aipom',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'levelType': LevelType.fast,
        'evolutions': [new LevelEvolution('Aipom', 'Ambipom', 32)],
        'exp': 72,
        'eggCycles': 20,
        'base': {
            'hitpoints': 55,
            'attack': 70,
            'specialAttack': 40,
            'defense': 55,
            'specialDefense': 55,
            'speed': 85,
        },
    },
    {
        'id': 191,
        'name': 'Sunkern',
        'catchRate': 235,
        'type': [PokemonType.Grass],
        'levelType': LevelType.mediumslow,
        'exp': 36,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Sunkern', 'Sunflora', GameConstants.StoneType.Sun_stone)],
        'base': {
            'hitpoints': 30,
            'attack': 30,
            'specialAttack': 30,
            'defense': 30,
            'specialDefense': 30,
            'speed': 30,
        },
    },
    {
        'id': 192,
        'name': 'Sunflora',
        'catchRate': 120,
        'type': [PokemonType.Grass],
        'levelType': LevelType.mediumslow,
        'exp': 149,
        'eggCycles': 20,
        'base': {
            'hitpoints': 75,
            'attack': 75,
            'specialAttack': 105,
            'defense': 55,
            'specialDefense': 85,
            'speed': 30,
        },
    },
    {
        'id': 193,
        'name': 'Yanma',
        'catchRate': 75,
        'type': [PokemonType.Bug, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 78,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Yanma', 'Yanmega', 33)],
        'base': {
            'hitpoints': 65,
            'attack': 65,
            'specialAttack': 75,
            'defense': 45,
            'specialDefense': 45,
            'speed': 95,
        },
    },
    {
        'id': 194,
        'name': 'Wooper',
        'catchRate': 255,
        'type': [PokemonType.Water, PokemonType.Ground],
        'levelType': LevelType.mediumfast,
        'exp': 42,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Wooper', 'Quagsire', 20)],
        'base': {
            'hitpoints': 55,
            'attack': 45,
            'specialAttack': 25,
            'defense': 45,
            'specialDefense': 25,
            'speed': 15,
        },
    },
    {
        'id': 195,
        'name': 'Quagsire',
        'catchRate': 90,
        'type': [PokemonType.Water, PokemonType.Ground],
        'levelType': LevelType.mediumfast,
        'exp': 151,
        'eggCycles': 20,
        'base': {
            'hitpoints': 95,
            'attack': 85,
            'specialAttack': 65,
            'defense': 85,
            'specialDefense': 65,
            'speed': 35,
        },
    },
    {
        'id': 196,
        'name': 'Espeon',
        'catchRate': 45,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'eggCycles': 35,
        'base': {
            'hitpoints': 65,
            'attack': 65,
            'specialAttack': 130,
            'defense': 60,
            'specialDefense': 95,
            'speed': 110,
        },
    },
    {
        'id': 197,
        'name': 'Umbreon',
        'catchRate': 45,
        'type': [PokemonType.Dark],
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'eggCycles': 35,
        'base': {
            'hitpoints': 95,
            'attack': 65,
            'specialAttack': 60,
            'defense': 110,
            'specialDefense': 130,
            'speed': 65,
        },
    },
    {
        'id': 198,
        'name': 'Murkrow',
        'catchRate': 30,
        'type': [PokemonType.Dark, PokemonType.Flying],
        'levelType': LevelType.mediumslow,
        'exp': 81,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Murkrow', 'Honchkrow', GameConstants.StoneType.Dusk_stone)],
        'base': {
            'hitpoints': 60,
            'attack': 85,
            'specialAttack': 85,
            'defense': 42,
            'specialDefense': 42,
            'speed': 91,
        },
    },
    {
        'id': 199,
        'name': 'Slowking',
        'catchRate': 70,
        'type': [PokemonType.Water, PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'eggCycles': 20,
        'base': {
            'hitpoints': 95,
            'attack': 75,
            'specialAttack': 100,
            'defense': 80,
            'specialDefense': 110,
            'speed': 30,
        },
    },
    {
        'id': 200,
        'name': 'Misdreavus',
        'catchRate': 45,
        'type': [PokemonType.Ghost],
        'levelType': LevelType.fast,
        'exp': 87,
        'eggCycles': 25,
        'evolutions': [new StoneEvolution('Misdreavus', 'Mismagius', GameConstants.StoneType.Dusk_stone)],
        'base': {
            'hitpoints': 60,
            'attack': 60,
            'specialAttack': 85,
            'defense': 60,
            'specialDefense': 85,
            'speed': 85,
        },
    },
    {
        'id': 201,
        'name': 'Unown (A)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.01,
        'name': 'Unown (B)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.02,
        'name': 'Unown (C)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.03,
        'name': 'Unown (D)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.04,
        'name': 'Unown (E)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.05,
        'name': 'Unown (F)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.06,
        'name': 'Unown (G)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.07,
        'name': 'Unown (H)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.08,
        'name': 'Unown (I)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.09,
        'name': 'Unown (J)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.10,
        'name': 'Unown (K)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.11,
        'name': 'Unown (L)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.12,
        'name': 'Unown (M)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.13,
        'name': 'Unown (N)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.14,
        'name': 'Unown (O)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.15,
        'name': 'Unown (P)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.16,
        'name': 'Unown (Q)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.17,
        'name': 'Unown (R)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.18,
        'name': 'Unown (S)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.19,
        'name': 'Unown (T)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.20,
        'name': 'Unown (U)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.21,
        'name': 'Unown (V)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.22,
        'name': 'Unown (W)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.23,
        'name': 'Unown (X)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.24,
        'name': 'Unown (Y)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.25,
        'name': 'Unown (Z)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.26,
        'name': 'Unown (!)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 201.27,
        'name': 'Unown (?)',
        'catchRate': 225,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 118,
        'eggCycles': 40,
        'base': {
            'hitpoints': 48,
            'attack': 72,
            'specialAttack': 72,
            'defense': 48,
            'specialDefense': 48,
            'speed': 48,
        },
    },
    {
        'id': 202,
        'name': 'Wobbuffet',
        'catchRate': 45,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 142,
        'eggCycles': 20,
        'base': {
            'hitpoints': 190,
            'attack': 33,
            'specialAttack': 33,
            'defense': 58,
            'specialDefense': 58,
            'speed': 33,
        },
    },
    {
        'id': 203,
        'name': 'Girafarig',
        'catchRate': 60,
        'type': [PokemonType.Normal, PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'eggCycles': 20,
        'base': {
            'hitpoints': 70,
            'attack': 80,
            'specialAttack': 90,
            'defense': 65,
            'specialDefense': 65,
            'speed': 85,
        },
    },
    {
        'id': 204,
        'name': 'Pineco',
        'catchRate': 190,
        'type': [PokemonType.Bug],
        'levelType': LevelType.mediumfast,
        'exp': 58,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Pineco', 'Forretress', 31)],
        'base': {
            'hitpoints': 50,
            'attack': 65,
            'specialAttack': 35,
            'defense': 90,
            'specialDefense': 35,
            'speed': 15,
        },
    },
    {
        'id': 205,
        'name': 'Forretress',
        'catchRate': 75,
        'type': [PokemonType.Bug, PokemonType.Steel],
        'levelType': LevelType.mediumfast,
        'exp': 163,
        'eggCycles': 20,
        'base': {
            'hitpoints': 75,
            'attack': 90,
            'specialAttack': 60,
            'defense': 140,
            'specialDefense': 60,
            'speed': 40,
        },
    },
    {
        'id': 206,
        'name': 'Dunsparce',
        'catchRate': 190,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 145,
        'eggCycles': 20,
        'base': {
            'hitpoints': 100,
            'attack': 70,
            'specialAttack': 65,
            'defense': 70,
            'specialDefense': 65,
            'speed': 45,
        },
    },
    {
        'id': 207,
        'name': 'Gligar',
        'catchRate': 60,
        'type': [PokemonType.Ground, PokemonType.Flying],
        'levelType': LevelType.mediumslow,
        'exp': 86,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Gligar', 'Gliscor', GameConstants.StoneType.Razor_fang)],
        'base': {
            'hitpoints': 65,
            'attack': 75,
            'specialAttack': 35,
            'defense': 105,
            'specialDefense': 65,
            'speed': 85,
        },
    },
    {
        'id': 208,
        'name': 'Steelix',
        'catchRate': 25,
        'type': [PokemonType.Steel, PokemonType.Ground],
        'levelType': LevelType.mediumfast,
        'exp': 179,
        'eggCycles': 25,
        'base': {
            'hitpoints': 75,
            'attack': 85,
            'specialAttack': 55,
            'defense': 200,
            'specialDefense': 65,
            'speed': 30,
        },
    },
    {
        'id': 209,
        'name': 'Snubbull',
        'catchRate': 190,
        'type': [PokemonType.Fairy],
        'levelType': LevelType.fast,
        'exp': 60,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Snubbull', 'Granbull', 23)],
        'base': {
            'hitpoints': 60,
            'attack': 80,
            'specialAttack': 40,
            'defense': 50,
            'specialDefense': 40,
            'speed': 30,
        },
    },
    {
        'id': 210,
        'name': 'Granbull',
        'catchRate': 75,
        'type': [PokemonType.Fairy],
        'levelType': LevelType.fast,
        'exp': 158,
        'eggCycles': 20,
        'base': {
            'hitpoints': 90,
            'attack': 120,
            'specialAttack': 60,
            'defense': 75,
            'specialDefense': 60,
            'speed': 45,
        },
    },
    {
        'id': 211,
        'name': 'Qwilfish',
        'catchRate': 45,
        'type': [PokemonType.Water, PokemonType.Poison],
        'levelType': LevelType.mediumfast,
        'exp': 88,
        'eggCycles': 20,
        'base': {
            'hitpoints': 65,
            'attack': 95,
            'specialAttack': 55,
            'defense': 85,
            'specialDefense': 55,
            'speed': 85,
        },
    },
    {
        'id': 212,
        'name': 'Scizor',
        'catchRate': 25,
        'type': [PokemonType.Bug, PokemonType.Steel],
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'eggCycles': 25,
        'base': {
            'hitpoints': 70,
            'attack': 130,
            'specialAttack': 55,
            'defense': 100,
            'specialDefense': 80,
            'speed': 65,
        },
    },
    {
        'id': 213,
        'name': 'Shuckle',
        'catchRate': 190,
        'type': [PokemonType.Bug, PokemonType.Rock],
        'levelType': LevelType.mediumslow,
        'exp': 177,
        'eggCycles': 20,
        'base': {
            'hitpoints': 20,
            'attack': 10,
            'specialAttack': 10,
            'defense': 230,
            'specialDefense': 230,
            'speed': 5,
        },
    },
    {
        'id': 214,
        'name': 'Heracross',
        'catchRate': 45,
        'type': [PokemonType.Bug, PokemonType.Fighting],
        'levelType': LevelType.slow,
        'exp': 175,
        'eggCycles': 25,
        'base': {
            'hitpoints': 80,
            'attack': 125,
            'specialAttack': 40,
            'defense': 75,
            'specialDefense': 95,
            'speed': 85,
        },
    },
    {
        'id': 215,
        'name': 'Sneasel',
        'catchRate': 60,
        'type': [PokemonType.Dark, PokemonType.Ice],
        'levelType': LevelType.mediumslow,
        'exp': 86,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Sneasel', 'Weavile', GameConstants.StoneType.Razor_claw)],
        'base': {
            'hitpoints': 55,
            'attack': 95,
            'specialAttack': 35,
            'defense': 55,
            'specialDefense': 75,
            'speed': 115,
        },
    },
    {
        'id': 216,
        'name': 'Teddiursa',
        'catchRate': 120,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Teddiursa', 'Ursaring', 30)],
        'base': {
            'hitpoints': 60,
            'attack': 80,
            'specialAttack': 50,
            'defense': 50,
            'specialDefense': 50,
            'speed': 40,
        },
    },
    {
        'id': 217,
        'name': 'Ursaring',
        'catchRate': 60,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'eggCycles': 20,
        'base': {
            'hitpoints': 90,
            'attack': 130,
            'specialAttack': 75,
            'defense': 75,
            'specialDefense': 75,
            'speed': 55,
        },
    },
    {
        'id': 218,
        'name': 'Slugma',
        'catchRate': 190,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumfast,
        'exp': 50,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Slugma', 'Magcargo', 38)],
        'base': {
            'hitpoints': 40,
            'attack': 40,
            'specialAttack': 70,
            'defense': 40,
            'specialDefense': 40,
            'speed': 20,
        },
    },
    {
        'id': 219,
        'name': 'Magcargo',
        'catchRate': 75,
        'type': [PokemonType.Fire, PokemonType.Rock],
        'levelType': LevelType.mediumfast,
        'exp': 151,
        'eggCycles': 20,
        'base': {
            'hitpoints': 60,
            'attack': 50,
            'specialAttack': 90,
            'defense': 120,
            'specialDefense': 80,
            'speed': 30,
        },
    },
    {
        'id': 220,
        'name': 'Swinub',
        'catchRate': 225,
        'type': [PokemonType.Ice, PokemonType.Ground],
        'levelType': LevelType.slow,
        'exp': 50,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Swinub', 'Piloswine', 33)],
        'base': {
            'hitpoints': 50,
            'attack': 50,
            'specialAttack': 30,
            'defense': 40,
            'specialDefense': 30,
            'speed': 50,
        },
    },
    {
        'id': 221,
        'name': 'Piloswine',
        'catchRate': 75,
        'type': [PokemonType.Ice, PokemonType.Ground],
        'levelType': LevelType.slow,
        'exp': 158,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Piloswine', 'Mamoswine', 53)],
        'base': {
            'hitpoints': 100,
            'attack': 100,
            'specialAttack': 60,
            'defense': 80,
            'specialDefense': 60,
            'speed': 50,
        },
    },
    {
        'id': 222,
        'name': 'Corsola',
        'catchRate': 60,
        'type': [PokemonType.Water, PokemonType.Rock],
        'levelType': LevelType.fast,
        'exp': 144,
        'eggCycles': 20,
        'base': {
            'hitpoints': 65,
            'attack': 55,
            'specialAttack': 65,
            'defense': 95,
            'specialDefense': 95,
            'speed': 35,
        },
    },
    {
        'id': 223,
        'name': 'Remoraid',
        'catchRate': 190,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Remoraid', 'Octillery', 25)],
        'base': {
            'hitpoints': 35,
            'attack': 65,
            'specialAttack': 65,
            'defense': 35,
            'specialDefense': 35,
            'speed': 65,
        },
    },
    {
        'id': 224,
        'name': 'Octillery',
        'catchRate': 75,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'eggCycles': 20,
        'base': {
            'hitpoints': 75,
            'attack': 105,
            'specialAttack': 105,
            'defense': 75,
            'specialDefense': 75,
            'speed': 45,
        },
    },
    {
        'id': 225,
        'name': 'Delibird',
        'catchRate': 45,
        'type': [PokemonType.Ice, PokemonType.Flying],
        'levelType': LevelType.fast,
        'exp': 116,
        'eggCycles': 20,
        'base': {
            'hitpoints': 45,
            'attack': 55,
            'specialAttack': 65,
            'defense': 45,
            'specialDefense': 45,
            'speed': 75,
        },
    },
    {
        'id': 226,
        'name': 'Mantine',
        'catchRate': 25,
        'type': [PokemonType.Water, PokemonType.Flying],
        'levelType': LevelType.slow,
        'exp': 170,
        'eggCycles': 25,
        'base': {
            'hitpoints': 85,
            'attack': 40,
            'specialAttack': 80,
            'defense': 70,
            'specialDefense': 140,
            'speed': 70,
        },
    },
    {
        'id': 227,
        'name': 'Skarmory',
        'catchRate': 25,
        'type': [PokemonType.Steel, PokemonType.Flying],
        'levelType': LevelType.slow,
        'exp': 163,
        'eggCycles': 25,
        'base': {
            'hitpoints': 65,
            'attack': 80,
            'specialAttack': 40,
            'defense': 140,
            'specialDefense': 70,
            'speed': 70,
        },
        'heldItem': 'Metal_coat',
    },
    {
        'id': 228,
        'name': 'Houndour',
        'catchRate': 120,
        'type': [PokemonType.Dark, PokemonType.Fire],
        'levelType': LevelType.slow,
        'exp': 66,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Houndour', 'Houndoom', 24)],
        'base': {
            'hitpoints': 45,
            'attack': 60,
            'specialAttack': 80,
            'defense': 30,
            'specialDefense': 50,
            'speed': 65,
        },
    },
    {
        'id': 229,
        'name': 'Houndoom',
        'catchRate': 45,
        'type': [PokemonType.Dark, PokemonType.Fire],
        'levelType': LevelType.slow,
        'exp': 175,
        'eggCycles': 20,
        'base': {
            'hitpoints': 75,
            'attack': 90,
            'specialAttack': 110,
            'defense': 50,
            'specialDefense': 80,
            'speed': 95,
        },
    },
    {
        'id': 230,
        'name': 'Kingdra',
        'catchRate': 45,
        'type': [PokemonType.Water, PokemonType.Dragon],
        'levelType': LevelType.mediumfast,
        'exp': 243,
        'eggCycles': 20,
        'base': {
            'hitpoints': 75,
            'attack': 95,
            'specialAttack': 95,
            'defense': 95,
            'specialDefense': 95,
            'speed': 85,
        },
    },
    {
        'id': 231,
        'name': 'Phanpy',
        'catchRate': 120,
        'type': [PokemonType.Ground],
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Phanpy', 'Donphan', 25)],
        'base': {
            'hitpoints': 90,
            'attack': 60,
            'specialAttack': 40,
            'defense': 60,
            'specialDefense': 40,
            'speed': 40,
        },
    },
    {
        'id': 232,
        'name': 'Donphan',
        'catchRate': 60,
        'type': [PokemonType.Ground],
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'eggCycles': 20,
        'base': {
            'hitpoints': 90,
            'attack': 120,
            'specialAttack': 60,
            'defense': 120,
            'specialDefense': 60,
            'speed': 50,
        },
    },
    {
        'id': 233,
        'name': 'Porygon2',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 180,
        'eggCycles': 20,
        'evolutions': [new StoneEvolution('Porygon2', 'Porygon-Z', GameConstants.StoneType.Dubious_disc)],
        'base': {
            'hitpoints': 85,
            'attack': 80,
            'specialAttack': 105,
            'defense': 90,
            'specialDefense': 95,
            'speed': 60,
        },
    },
    {
        'id': 234,
        'name': 'Stantler',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'levelType': LevelType.slow,
        'exp': 163,
        'eggCycles': 20,
        'base': {
            'hitpoints': 73,
            'attack': 95,
            'specialAttack': 85,
            'defense': 62,
            'specialDefense': 65,
            'speed': 85,
        },
    },
    {
        'id': 235,
        'name': 'Smeargle',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'levelType': LevelType.fast,
        'exp': 88,
        'eggCycles': 20,
        'base': {
            'hitpoints': 55,
            'attack': 20,
            'specialAttack': 20,
            'defense': 35,
            'specialDefense': 45,
            'speed': 75,
        },
    },
    {
        'id': 236,
        'name': 'Tyrogue',
        'catchRate': 75,
        'type': [PokemonType.Fighting],
        'levelType': LevelType.mediumfast,
        'exp': 42,
        'eggCycles': 25,
        'evolutions': [
            new LevelEvolution('Tyrogue', 'Hitmonlee', 20),
            new LevelEvolution('Tyrogue', 'Hitmonchan', 20),
            new LevelEvolution('Tyrogue', 'Hitmontop', 20),
        ],
        'baby': true,
        'base': {
            'hitpoints': 35,
            'attack': 35,
            'specialAttack': 35,
            'defense': 35,
            'specialDefense': 35,
            'speed': 35,
        },
    },
    {
        'id': 237,
        'name': 'Hitmontop',
        'catchRate': 45,
        'type': [PokemonType.Fighting],
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'eggCycles': 25,
        'base': {
            'hitpoints': 50,
            'attack': 95,
            'specialAttack': 35,
            'defense': 95,
            'specialDefense': 110,
            'speed': 70,
        },
    },
    {
        'id': 238,
        'name': 'Smoochum',
        'catchRate': 45,
        'type': [PokemonType.Ice, PokemonType.Psychic],
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'eggCycles': 25,
        'evolutions': [new LevelEvolution('Smoochum', 'Jynx', 30)],
        'baby': true,
        'base': {
            'hitpoints': 45,
            'attack': 30,
            'specialAttack': 85,
            'defense': 15,
            'specialDefense': 65,
            'speed': 65,
        },
    },
    {
        'id': 239,
        'name': 'Elekid',
        'catchRate': 45,
        'type': [PokemonType.Electric],
        'levelType': LevelType.mediumfast,
        'exp': 72,
        'eggCycles': 25,
        'evolutions': [new LevelEvolution('Elekid', 'Electabuzz', 30)],
        'baby': true,
        'base': {
            'hitpoints': 45,
            'attack': 63,
            'specialAttack': 65,
            'defense': 37,
            'specialDefense': 55,
            'speed': 95,
        },
    },
    {
        'id': 240,
        'name': 'Magby',
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumfast,
        'exp': 73,
        'eggCycles': 25,
        'evolutions': [new LevelEvolution('Magby', 'Magmar', 30)],
        'baby': true,
        'base': {
            'hitpoints': 45,
            'attack': 75,
            'specialAttack': 70,
            'defense': 37,
            'specialDefense': 55,
            'speed': 83,
        },
    },
    {
        'id': 241,
        'name': 'Miltank',
        'catchRate': 45,
        'type': [PokemonType.Normal],
        'levelType': LevelType.slow,
        'exp': 172,
        'eggCycles': 20,
        'base': {
            'hitpoints': 95,
            'attack': 80,
            'specialAttack': 40,
            'defense': 105,
            'specialDefense': 70,
            'speed': 100,
        },
    },
    {
        'id': 242,
        'name': 'Blissey',
        'catchRate': 30,
        'type': [PokemonType.Normal],
        'levelType': LevelType.fast,
        'exp': 608,
        'eggCycles': 40,
        'base': {
            'hitpoints': 255,
            'attack': 10,
            'specialAttack': 75,
            'defense': 10,
            'specialDefense': 135,
            'speed': 55,
        },
    },
    {
        'id': 243,
        'name': 'Raikou',
        'catchRate': 3,
        'type': [PokemonType.Electric],
        'levelType': LevelType.slow,
        'exp': 261,
        'eggCycles': 80,
        'base': {
            'hitpoints': 90,
            'attack': 85,
            'specialAttack': 115,
            'defense': 75,
            'specialDefense': 100,
            'speed': 115,
        },
    },
    {
        'id': 244,
        'name': 'Entei',
        'catchRate': 3,
        'type': [PokemonType.Fire],
        'levelType': LevelType.slow,
        'exp': 261,
        'eggCycles': 80,
        'base': {
            'hitpoints': 115,
            'attack': 115,
            'specialAttack': 90,
            'defense': 85,
            'specialDefense': 75,
            'speed': 100,
        },
    },
    {
        'id': 245,
        'name': 'Suicune',
        'catchRate': 3,
        'type': [PokemonType.Water],
        'levelType': LevelType.slow,
        'exp': 261,
        'eggCycles': 80,
        'base': {
            'hitpoints': 100,
            'attack': 75,
            'specialAttack': 90,
            'defense': 115,
            'specialDefense': 115,
            'speed': 85,
        },
    },
    {
        'id': 246,
        'name': 'Larvitar',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Ground],
        'levelType': LevelType.slow,
        'exp': 60,
        'eggCycles': 40,
        'evolutions': [new LevelEvolution('Larvitar', 'Pupitar', 30)],
        'base': {
            'hitpoints': 50,
            'attack': 64,
            'specialAttack': 45,
            'defense': 50,
            'specialDefense': 50,
            'speed': 41,
        },
    },
    {
        'id': 247,
        'name': 'Pupitar',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Ground],
        'levelType': LevelType.slow,
        'exp': 144,
        'eggCycles': 40,
        'evolutions': [new LevelEvolution('Pupitar', 'Tyranitar', 55)],
        'base': {
            'hitpoints': 70,
            'attack': 84,
            'specialAttack': 65,
            'defense': 70,
            'specialDefense': 70,
            'speed': 51,
        },
    },
    {
        'id': 248,
        'name': 'Tyranitar',
        'catchRate': 45,
        'type': [PokemonType.Rock, PokemonType.Dark],
        'levelType': LevelType.slow,
        'exp': 270,
        'eggCycles': 40,
        'base': {
            'hitpoints': 100,
            'attack': 134,
            'specialAttack': 95,
            'defense': 110,
            'specialDefense': 100,
            'speed': 61,
        },
    },
    {
        'id': 249,
        'name': 'Lugia',
        'catchRate': 3,
        'type': [PokemonType.Psychic, PokemonType.Flying],
        'levelType': LevelType.slow,
        'exp': 306,
        'eggCycles': 120,
        'base': {
            'hitpoints': 106,
            'attack': 90,
            'specialAttack': 90,
            'defense': 130,
            'specialDefense': 154,
            'speed': 110,
        },
    },
    {
        'id': 250,
        'name': 'Ho-Oh',
        'catchRate': 3,
        'type': [PokemonType.Fire, PokemonType.Flying],
        'levelType': LevelType.slow,
        'exp': 306,
        'eggCycles': 120,
        'base': {
            'hitpoints': 106,
            'attack': 130,
            'specialAttack': 110,
            'defense': 90,
            'specialDefense': 154,
            'speed': 90,
        },
    },
    {
        'id': 251,
        'name': 'Celebi',
        'catchRate': 45,
        'type': [PokemonType.Psychic, PokemonType.Grass],
        'levelType': LevelType.mediumslow,
        'exp': 270,
        'eggCycles': 120,
        'base': {
            'hitpoints': 100,
            'attack': 100,
            'specialAttack': 100,
            'defense': 100,
            'specialDefense': 100,
            'speed': 100,
        },
    },
    {
        'id': 252,
        'name': 'Treecko',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Treecko', 'Grovyle', 16)],
        'base': {
            'hitpoints': 40,
            'attack': 45,
            'specialAttack': 65,
            'defense': 35,
            'specialDefense': 55,
            'speed': 70,
        },
    },
    {
        'id': 253,
        'name': 'Grovyle',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Grovyle', 'Sceptile', 36)],
        'base': {
            'hitpoints': 50,
            'attack': 65,
            'specialAttack': 85,
            'defense': 45,
            'specialDefense': 65,
            'speed': 95,
        },
    },
    {
        'id': 254,
        'name': 'Sceptile',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
        'base': {
            'hitpoints': 70,
            'attack': 85,
            'specialAttack': 105,
            'defense': 65,
            'specialDefense': 85,
            'speed': 120,
        },
    },
    {
        'id': 255,
        'name': 'Torchic',
        'type': [PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Torchic', 'Combusken', 16)],
        'base': {
            'hitpoints': 45,
            'attack': 60,
            'specialAttack': 70,
            'defense': 40,
            'specialDefense': 50,
            'speed': 45,
        },
    },
    {
        'id': 256,
        'name': 'Combusken',
        'type': [PokemonType.Fire, PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Combusken', 'Blaziken', 36)],
        'base': {
            'hitpoints': 60,
            'attack': 85,
            'specialAttack': 85,
            'defense': 60,
            'specialDefense': 60,
            'speed': 55,
        },
    },
    {
        'id': 257,
        'name': 'Blaziken',
        'type': [PokemonType.Fire, PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
        'base': {
            'hitpoints': 80,
            'attack': 120,
            'specialAttack': 110,
            'defense': 70,
            'specialDefense': 70,
            'speed': 80,
        },
    },
    {
        'id': 258,
        'name': 'Mudkip',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Mudkip', 'Marshtomp', 16)],
        'base': {
            'hitpoints': 50,
            'attack': 70,
            'specialAttack': 50,
            'defense': 50,
            'specialDefense': 50,
            'speed': 40,
        },
    },
    {
        'id': 259,
        'name': 'Marshtomp',
        'type': [PokemonType.Water, PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Marshtomp', 'Swampert', 36)],
        'base': {
            'hitpoints': 70,
            'attack': 85,
            'specialAttack': 60,
            'defense': 70,
            'specialDefense': 70,
            'speed': 50,
        },
    },
    {
        'id': 260,
        'name': 'Swampert',
        'type': [PokemonType.Water, PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 241,
        'catchRate': 45,
        'base': {
            'hitpoints': 100,
            'attack': 110,
            'specialAttack': 85,
            'defense': 90,
            'specialDefense': 90,
            'speed': 60,
        },
    },
    {
        'id': 261,
        'name': 'Poochyena',
        'type': [PokemonType.Dark],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Poochyena', 'Mightyena', 18)],
        'base': {
            'hitpoints': 35,
            'attack': 55,
            'specialAttack': 30,
            'defense': 35,
            'specialDefense': 30,
            'speed': 35,
        },
    },
    {
        'id': 262,
        'name': 'Mightyena',
        'type': [PokemonType.Dark],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 147,
        'catchRate': 127,
        'base': {
            'hitpoints': 70,
            'attack': 90,
            'specialAttack': 60,
            'defense': 70,
            'specialDefense': 60,
            'speed': 70,
        },
    },
    {
        'id': 263,
        'name': 'Zigzagoon',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Zigzagoon', 'Linoone', 20)],
        'base': {
            'hitpoints': 38,
            'attack': 30,
            'specialAttack': 30,
            'defense': 41,
            'specialDefense': 41,
            'speed': 60,
        },
    },
    {
        'id': 264,
        'name': 'Linoone',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 147,
        'catchRate': 90,
        'base': {
            'hitpoints': 78,
            'attack': 70,
            'specialAttack': 50,
            'defense': 61,
            'specialDefense': 61,
            'speed': 100,
        },
    },
    {
        'id': 265,
        'name': 'Wurmple',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [
            new LevelEvolution('Wurmple', 'Silcoon', 7),
            new LevelEvolution('Wurmple', 'Cascoon', 7),
        ],
        'base': {
            'hitpoints': 45,
            'attack': 45,
            'specialAttack': 20,
            'defense': 35,
            'specialDefense': 30,
            'speed': 20,
        },
    },
    {
        'id': 266,
        'name': 'Silcoon',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 72,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Silcoon', 'Beautifly', 10)],
        'base': {
            'hitpoints': 50,
            'attack': 35,
            'specialAttack': 25,
            'defense': 55,
            'specialDefense': 25,
            'speed': 15,
        },
    },
    {
        'id': 267,
        'name': 'Beautifly',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 178,
        'catchRate': 45,
        'base': {
            'hitpoints': 60,
            'attack': 70,
            'specialAttack': 100,
            'defense': 50,
            'specialDefense': 50,
            'speed': 65,
        },
    },
    {
        'id': 268,
        'name': 'Cascoon',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 72,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Cascoon', 'Dustox', 10)],
        'base': {
            'hitpoints': 50,
            'attack': 35,
            'specialAttack': 25,
            'defense': 55,
            'specialDefense': 25,
            'speed': 15,
        },
    },
    {
        'id': 269,
        'name': 'Dustox',
        'type': [PokemonType.Bug, PokemonType.Poison],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 45,
        'base': {
            'hitpoints': 60,
            'attack': 50,
            'specialAttack': 50,
            'defense': 70,
            'specialDefense': 90,
            'speed': 65,
        },
    },
    {
        'id': 270,
        'name': 'Lotad',
        'type': [PokemonType.Water, PokemonType.Grass],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 44,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Lotad', 'Lombre', 14)],
        'base': {
            'hitpoints': 40,
            'attack': 30,
            'specialAttack': 40,
            'defense': 30,
            'specialDefense': 50,
            'speed': 30,
        },
    },
    {
        'id': 271,
        'name': 'Lombre',
        'type': [PokemonType.Water, PokemonType.Grass],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 119,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Lombre', 'Ludicolo', GameConstants.StoneType.Water_stone)],
        'base': {
            'hitpoints': 60,
            'attack': 50,
            'specialAttack': 60,
            'defense': 50,
            'specialDefense': 70,
            'speed': 50,
        },
    },
    {
        'id': 272,
        'name': 'Ludicolo',
        'type': [PokemonType.Water, PokemonType.Grass],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 216,
        'catchRate': 45,
        'base': {
            'hitpoints': 80,
            'attack': 70,
            'specialAttack': 90,
            'defense': 70,
            'specialDefense': 100,
            'speed': 70,
        },
    },
    {
        'id': 273,
        'name': 'Seedot',
        'type': [PokemonType.Grass],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 44,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Seedot', 'Nuzleaf', 14)],
        'base': {
            'hitpoints': 40,
            'attack': 40,
            'specialAttack': 30,
            'defense': 50,
            'specialDefense': 30,
            'speed': 30,
        },
    },
    {
        'id': 274,
        'name': 'Nuzleaf',
        'type': [PokemonType.Grass, PokemonType.Dark],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 119,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Nuzleaf', 'Shiftry', GameConstants.StoneType.Leaf_stone)],
        'base': {
            'hitpoints': 70,
            'attack': 70,
            'specialAttack': 60,
            'defense': 40,
            'specialDefense': 40,
            'speed': 60,
        },
    },
    {
        'id': 275,
        'name': 'Shiftry',
        'type': [PokemonType.Grass, PokemonType.Dark],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 216,
        'catchRate': 45,
        'base': {
            'hitpoints': 90,
            'attack': 100,
            'specialAttack': 90,
            'defense': 60,
            'specialDefense': 60,
            'speed': 80,
        },
    },
    {
        'id': 276,
        'name': 'Taillow',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 54,
        'catchRate': 200,
        'evolutions': [new LevelEvolution('Taillow', 'Swellow', 22)],
        'base': {
            'hitpoints': 40,
            'attack': 55,
            'specialAttack': 30,
            'defense': 30,
            'specialDefense': 30,
            'speed': 85,
        },
    },
    {
        'id': 277,
        'name': 'Swellow',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 159,
        'catchRate': 45,
        'base': {
            'hitpoints': 60,
            'attack': 85,
            'specialAttack': 75,
            'defense': 60,
            'specialDefense': 50,
            'speed': 125,
        },
    },
    {
        'id': 278,
        'name': 'Wingull',
        'type': [PokemonType.Water, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 54,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Wingull', 'Pelipper', 25)],
        'base': {
            'hitpoints': 40,
            'attack': 30,
            'specialAttack': 55,
            'defense': 30,
            'specialDefense': 30,
            'speed': 85,
        },
    },
    {
        'id': 279,
        'name': 'Pelipper',
        'type': [PokemonType.Water, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 154,
        'catchRate': 45,
        'base': {
            'hitpoints': 60,
            'attack': 50,
            'specialAttack': 95,
            'defense': 100,
            'specialDefense': 70,
            'speed': 65,
        },
    },
    {
        'id': 280,
        'name': 'Ralts',
        'type': [PokemonType.Psychic, PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 40,
        'catchRate': 235,
        'evolutions': [new LevelEvolution('Ralts', 'Kirlia', 20)],
        'base': {
            'hitpoints': 28,
            'attack': 25,
            'specialAttack': 45,
            'defense': 25,
            'specialDefense': 35,
            'speed': 40,
        },
    },
    {
        'id': 281,
        'name': 'Kirlia',
        'type': [PokemonType.Psychic, PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 97,
        'catchRate': 120,
        'evolutions': [
            new LevelEvolution('Kirlia', 'Gardevoir', 30),
            new StoneEvolution('Kirlia', 'Gallade', GameConstants.StoneType.Dawn_stone),
        ],
        'base': {
            'hitpoints': 38,
            'attack': 35,
            'specialAttack': 65,
            'defense': 35,
            'specialDefense': 55,
            'speed': 50,
        },
    },
    {
        'id': 282,
        'name': 'Gardevoir',
        'type': [PokemonType.Psychic, PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 233,
        'catchRate': 45,
        'base': {
            'hitpoints': 68,
            'attack': 65,
            'specialAttack': 125,
            'defense': 65,
            'specialDefense': 115,
            'speed': 80,
        },
    },
    {
        'id': 283,
        'name': 'Surskit',
        'type': [PokemonType.Bug, PokemonType.Water],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 54,
        'catchRate': 200,
        'evolutions': [new LevelEvolution('Surskit', 'Masquerain', 22)],
        'base': {
            'hitpoints': 40,
            'attack': 30,
            'specialAttack': 50,
            'defense': 32,
            'specialDefense': 52,
            'speed': 65,
        },
    },
    {
        'id': 284,
        'name': 'Masquerain',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'catchRate': 75,
        'base': {
            'hitpoints': 70,
            'attack': 60,
            'specialAttack': 100,
            'defense': 62,
            'specialDefense': 82,
            'speed': 80,
        },
    },
    {
        'id': 285,
        'name': 'Shroomish',
        'type': [PokemonType.Grass],
        'eggCycles': 15,
        'levelType': LevelType.fluctuating,
        'exp': 59,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Shroomish', 'Breloom', 23)],
        'base': {
            'hitpoints': 60,
            'attack': 40,
            'specialAttack': 40,
            'defense': 60,
            'specialDefense': 60,
            'speed': 35,
        },
    },
    {
        'id': 286,
        'name': 'Breloom',
        'type': [PokemonType.Grass, PokemonType.Fighting],
        'eggCycles': 15,
        'levelType': LevelType.fluctuating,
        'exp': 161,
        'catchRate': 90,
        'base': {
            'hitpoints': 60,
            'attack': 130,
            'specialAttack': 60,
            'defense': 80,
            'specialDefense': 60,
            'speed': 70,
        },
    },
    {
        'id': 287,
        'name': 'Slakoth',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Slakoth', 'Vigoroth', 18)],
        'base': {
            'hitpoints': 60,
            'attack': 60,
            'specialAttack': 35,
            'defense': 60,
            'specialDefense': 35,
            'speed': 30,
        },
    },
    {
        'id': 288,
        'name': 'Vigoroth',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': 154,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Vigoroth', 'Slaking', 36)],
        'base': {
            'hitpoints': 80,
            'attack': 80,
            'specialAttack': 55,
            'defense': 80,
            'specialDefense': 55,
            'speed': 90,
        },
    },
    {
        'id': 289,
        'name': 'Slaking',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': 252,
        'catchRate': 45,
        'base': {
            'hitpoints': 150,
            'attack': 160,
            'specialAttack': 95,
            'defense': 100,
            'specialDefense': 65,
            'speed': 100,
        },
    },
    {
        'id': 290,
        'name': 'Nincada',
        'type': [PokemonType.Bug, PokemonType.Ground],
        'eggCycles': 15,
        'levelType': LevelType.erratic,
        'exp': 53,
        'catchRate': 255,
        'evolutions': [
            new LevelEvolution('Nincada', 'Ninjask', 20),
            new LevelEvolution('Nincada', 'Shedinja', 20),
        ],
        'base': {
            'hitpoints': 31,
            'attack': 45,
            'specialAttack': 30,
            'defense': 90,
            'specialDefense': 30,
            'speed': 40,
        },
    },
    {
        'id': 291,
        'name': 'Ninjask',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.erratic,
        'exp': 160,
        'catchRate': 120,
        'base': {
            'hitpoints': 61,
            'attack': 90,
            'specialAttack': 50,
            'defense': 45,
            'specialDefense': 50,
            'speed': 160,
        },
    },
    {
        'id': 292,
        'name': 'Shedinja',
        'type': [PokemonType.Bug, PokemonType.Ghost],
        'eggCycles': 15,
        'levelType': LevelType.erratic,
        'exp': 83,
        'catchRate': 45,
        'base': {
            'hitpoints': 1,
            'attack': 90,
            'specialAttack': 30,
            'defense': 45,
            'specialDefense': 30,
            'speed': 40,
        },
    },
    {
        'id': 293,
        'name': 'Whismur',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 48,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Whismur', 'Loudred', 20)],
        'base': {
            'hitpoints': 64,
            'attack': 51,
            'specialAttack': 51,
            'defense': 23,
            'specialDefense': 23,
            'speed': 28,
        },
    },
    {
        'id': 294,
        'name': 'Loudred',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 126,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Loudred', 'Exploud', 40)],
        'base': {
            'hitpoints': 84,
            'attack': 71,
            'specialAttack': 71,
            'defense': 43,
            'specialDefense': 43,
            'speed': 48,
        },
    },
    {
        'id': 295,
        'name': 'Exploud',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 221,
        'catchRate': 45,
        'base': {
            'hitpoints': 104,
            'attack': 91,
            'specialAttack': 91,
            'defense': 63,
            'specialDefense': 73,
            'speed': 68,
        },
    },
    {
        'id': 296,
        'name': 'Makuhita',
        'type': [PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.fluctuating,
        'exp': 47,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Makuhita', 'Hariyama', 24)],
        'base': {
            'hitpoints': 72,
            'attack': 60,
            'specialAttack': 20,
            'defense': 30,
            'specialDefense': 30,
            'speed': 25,
        },
    },
    {
        'id': 297,
        'name': 'Hariyama',
        'type': [PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.fluctuating,
        'exp': 166,
        'catchRate': 200,
        'base': {
            'hitpoints': 144,
            'attack': 120,
            'specialAttack': 40,
            'defense': 60,
            'specialDefense': 60,
            'speed': 50,
        },
    },
    {
        'id': 298,
        'name': 'Azurill',
        'type': [PokemonType.Normal, PokemonType.Fairy],
        'eggCycles': 10,
        'levelType': LevelType.fast,
        'exp': 38,
        'catchRate': 150,
        'evolutions': [new StoneEvolution('Azurill', 'Marill', GameConstants.StoneType.Soothe_bell)],
        'baby': true,
        'base': {
            'hitpoints': 50,
            'attack': 20,
            'specialAttack': 20,
            'defense': 40,
            'specialDefense': 40,
            'speed': 20,
        },
    },
    {
        'id': 299,
        'name': 'Nosepass',
        'type': [PokemonType.Rock],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 75,
        'catchRate': 255,
        'evolutions': [
            new DungeonRestrictedLevelEvolution('Mt. Coronet North', 'Nosepass', 'Probopass', 20),
            new DungeonRestrictedLevelEvolution('Mt. Coronet South', 'Nosepass', 'Probopass', 20),
        ],
        'base': {
            'hitpoints': 30,
            'attack': 45,
            'specialAttack': 45,
            'defense': 135,
            'specialDefense': 90,
            'speed': 30,
        },
    },
    {
        'id': 300,
        'name': 'Skitty',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.fast,
        'exp': 52,
        'catchRate': 255,
        'evolutions': [new StoneEvolution('Skitty', 'Delcatty', GameConstants.StoneType.Moon_stone)],
        'base': {
            'hitpoints': 50,
            'attack': 45,
            'specialAttack': 35,
            'defense': 45,
            'specialDefense': 35,
            'speed': 50,
        },
    },
    {
        'id': 301,
        'name': 'Delcatty',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.fast,
        'exp': 140,
        'catchRate': 60,
        'base': {
            'hitpoints': 70,
            'attack': 65,
            'specialAttack': 55,
            'defense': 65,
            'specialDefense': 55,
            'speed': 90,
        },
    },
    {
        'id': 302,
        'name': 'Sableye',
        'type': [PokemonType.Dark, PokemonType.Ghost],
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 133,
        'catchRate': 45,
        'base': {
            'hitpoints': 50,
            'attack': 75,
            'specialAttack': 65,
            'defense': 75,
            'specialDefense': 65,
            'speed': 50,
        },
    },
    {
        'id': 303,
        'name': 'Mawile',
        'type': [PokemonType.Steel, PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.fast,
        'exp': 133,
        'catchRate': 45,
        'base': {
            'hitpoints': 50,
            'attack': 85,
            'specialAttack': 55,
            'defense': 85,
            'specialDefense': 55,
            'speed': 50,
        },
    },
    {
        'id': 304,
        'name': 'Aron',
        'type': [PokemonType.Steel, PokemonType.Rock],
        'eggCycles': 35,
        'levelType': LevelType.slow,
        'exp': 66,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Aron', 'Lairon', 32)],
        'base': {
            'hitpoints': 50,
            'attack': 70,
            'specialAttack': 40,
            'defense': 100,
            'specialDefense': 40,
            'speed': 30,
        },
    },
    {
        'id': 305,
        'name': 'Lairon',
        'type': [PokemonType.Steel, PokemonType.Rock],
        'eggCycles': 35,
        'levelType': LevelType.slow,
        'exp': 151,
        'catchRate': 90,
        'evolutions': [new LevelEvolution('Lairon', 'Aggron', 42)],
        'base': {
            'hitpoints': 60,
            'attack': 90,
            'specialAttack': 50,
            'defense': 140,
            'specialDefense': 50,
            'speed': 40,
        },
    },
    {
        'id': 306,
        'name': 'Aggron',
        'type': [PokemonType.Steel, PokemonType.Rock],
        'eggCycles': 35,
        'levelType': LevelType.slow,
        'exp': 239,
        'catchRate': 45,
        'base': {
            'hitpoints': 70,
            'attack': 110,
            'specialAttack': 60,
            'defense': 180,
            'specialDefense': 60,
            'speed': 50,
        },
    },
    {
        'id': 307,
        'name': 'Meditite',
        'type': [PokemonType.Fighting, PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Meditite', 'Medicham', 37)],
        'base': {
            'hitpoints': 30,
            'attack': 40,
            'specialAttack': 40,
            'defense': 55,
            'specialDefense': 55,
            'speed': 60,
        },
    },
    {
        'id': 308,
        'name': 'Medicham',
        'type': [PokemonType.Fighting, PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 144,
        'catchRate': 90,
        'base': {
            'hitpoints': 60,
            'attack': 60,
            'specialAttack': 60,
            'defense': 75,
            'specialDefense': 75,
            'speed': 80,
        },
    },
    {
        'id': 309,
        'name': 'Electrike',
        'type': [PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 59,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Electrike', 'Manectric', 26)],
        'base': {
            'hitpoints': 40,
            'attack': 45,
            'specialAttack': 65,
            'defense': 40,
            'specialDefense': 40,
            'speed': 65,
        },
    },
    {
        'id': 310,
        'name': 'Manectric',
        'type': [PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 166,
        'catchRate': 45,
        'base': {
            'hitpoints': 70,
            'attack': 75,
            'specialAttack': 105,
            'defense': 60,
            'specialDefense': 60,
            'speed': 105,
        },
    },
    {
        'id': 311,
        'name': 'Plusle',
        'type': [PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 142,
        'catchRate': 200,
        'base': {
            'hitpoints': 60,
            'attack': 50,
            'specialAttack': 85,
            'defense': 40,
            'specialDefense': 75,
            'speed': 95,
        },
    },
    {
        'id': 312,
        'name': 'Minun',
        'type': [PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 142,
        'catchRate': 200,
        'base': {
            'hitpoints': 60,
            'attack': 40,
            'specialAttack': 75,
            'defense': 50,
            'specialDefense': 85,
            'speed': 95,
        },
    },
    {
        'id': 313,
        'name': 'Volbeat',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.erratic,
        'exp': 151,
        'catchRate': 150,
        'base': {
            'hitpoints': 65,
            'attack': 73,
            'specialAttack': 47,
            'defense': 75,
            'specialDefense': 85,
            'speed': 85,
        },
    },
    {
        'id': 314,
        'name': 'Illumise',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.fluctuating,
        'exp': 151,
        'catchRate': 150,
        'base': {
            'hitpoints': 65,
            'attack': 47,
            'specialAttack': 73,
            'defense': 75,
            'specialDefense': 85,
            'speed': 85,
        },
    },
    {
        'id': 315,
        'name': 'Roselia',
        'type': [PokemonType.Grass, PokemonType.Poison],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 140,
        'catchRate': 150,
        'evolutions': [new StoneEvolution('Roselia', 'Roserade', GameConstants.StoneType.Shiny_stone)],
        'base': {
            'hitpoints': 50,
            'attack': 60,
            'specialAttack': 100,
            'defense': 45,
            'specialDefense': 80,
            'speed': 65,
        },
    },
    {
        'id': 316,
        'name': 'Gulpin',
        'type': [PokemonType.Poison],
        'eggCycles': 20,
        'levelType': LevelType.fluctuating,
        'exp': 60,
        'catchRate': 225,
        'evolutions': [new LevelEvolution('Gulpin', 'Swalot', 26)],
        'base': {
            'hitpoints': 70,
            'attack': 43,
            'specialAttack': 43,
            'defense': 53,
            'specialDefense': 53,
            'speed': 40,
        },
    },
    {
        'id': 317,
        'name': 'Swalot',
        'type': [PokemonType.Poison],
        'eggCycles': 20,
        'levelType': LevelType.fluctuating,
        'exp': 163,
        'catchRate': 75,
        'base': {
            'hitpoints': 100,
            'attack': 73,
            'specialAttack': 73,
            'defense': 83,
            'specialDefense': 83,
            'speed': 55,
        },
    },
    {
        'id': 318,
        'name': 'Carvanha',
        'type': [PokemonType.Water, PokemonType.Dark],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 61,
        'catchRate': 225,
        'evolutions': [new LevelEvolution('Carvanha', 'Sharpedo', 30)],
        'base': {
            'hitpoints': 45,
            'attack': 90,
            'specialAttack': 65,
            'defense': 20,
            'specialDefense': 20,
            'speed': 65,
        },
    },
    {
        'id': 319,
        'name': 'Sharpedo',
        'type': [PokemonType.Water, PokemonType.Dark],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 161,
        'catchRate': 60,
        'base': {
            'hitpoints': 70,
            'attack': 120,
            'specialAttack': 95,
            'defense': 40,
            'specialDefense': 40,
            'speed': 95,
        },
    },
    {
        'id': 320,
        'name': 'Wailmer',
        'type': [PokemonType.Water],
        'eggCycles': 40,
        'levelType': LevelType.fluctuating,
        'exp': 80,
        'catchRate': 125,
        'evolutions': [new LevelEvolution('Wailmer', 'Wailord', 40)],
        'base': {
            'hitpoints': 130,
            'attack': 70,
            'specialAttack': 70,
            'defense': 35,
            'specialDefense': 35,
            'speed': 60,
        },
    },
    {
        'id': 321,
        'name': 'Wailord',
        'type': [PokemonType.Water],
        'eggCycles': 40,
        'levelType': LevelType.fluctuating,
        'exp': 175,
        'catchRate': 60,
        'base': {
            'hitpoints': 170,
            'attack': 90,
            'specialAttack': 90,
            'defense': 45,
            'specialDefense': 45,
            'speed': 60,
        },
    },
    {
        'id': 322,
        'name': 'Numel',
        'type': [PokemonType.Fire, PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Numel', 'Camerupt', 33)],
        'base': {
            'hitpoints': 60,
            'attack': 60,
            'specialAttack': 65,
            'defense': 40,
            'specialDefense': 45,
            'speed': 35,
        },
    },
    {
        'id': 323,
        'name': 'Camerupt',
        'type': [PokemonType.Fire, PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 161,
        'catchRate': 150,
        'base': {
            'hitpoints': 70,
            'attack': 100,
            'specialAttack': 105,
            'defense': 70,
            'specialDefense': 75,
            'speed': 40,
        },
    },
    {
        'id': 324,
        'name': 'Torkoal',
        'type': [PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 165,
        'catchRate': 90,
        'base': {
            'hitpoints': 70,
            'attack': 85,
            'specialAttack': 85,
            'defense': 140,
            'specialDefense': 70,
            'speed': 20,
        },
    },
    {
        'id': 325,
        'name': 'Spoink',
        'type': [PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.fast,
        'exp': 66,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Spoink', 'Grumpig', 32)],
        'base': {
            'hitpoints': 60,
            'attack': 25,
            'specialAttack': 70,
            'defense': 35,
            'specialDefense': 80,
            'speed': 60,
        },
    },
    {
        'id': 326,
        'name': 'Grumpig',
        'type': [PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.fast,
        'exp': 165,
        'catchRate': 60,
        'base': {
            'hitpoints': 80,
            'attack': 45,
            'specialAttack': 90,
            'defense': 65,
            'specialDefense': 110,
            'speed': 80,
        },
    },
    {
        'id': 327,
        'name': 'Spinda',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.fast,
        'exp': 126,
        'catchRate': 255,
        'base': {
            'hitpoints': 60,
            'attack': 60,
            'specialAttack': 60,
            'defense': 60,
            'specialDefense': 60,
            'speed': 60,
        },
    },
    {
        'id': 328,
        'name': 'Trapinch',
        'type': [PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 58,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Trapinch', 'Vibrava', 35)],
        'base': {
            'hitpoints': 45,
            'attack': 100,
            'specialAttack': 45,
            'defense': 45,
            'specialDefense': 45,
            'speed': 10,
        },
    },
    {
        'id': 329,
        'name': 'Vibrava',
        'type': [PokemonType.Ground, PokemonType.Dragon],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 119,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Vibrava', 'Flygon', 45)],
        'base': {
            'hitpoints': 50,
            'attack': 70,
            'specialAttack': 50,
            'defense': 50,
            'specialDefense': 50,
            'speed': 70,
        },
    },
    {
        'id': 330,
        'name': 'Flygon',
        'type': [PokemonType.Ground, PokemonType.Dragon],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 234,
        'catchRate': 45,
        'base': {
            'hitpoints': 80,
            'attack': 100,
            'specialAttack': 80,
            'defense': 80,
            'specialDefense': 80,
            'speed': 100,
        },
    },
    {
        'id': 331,
        'name': 'Cacnea',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 67,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Cacnea', 'Cacturne', 32)],
        'base': {
            'hitpoints': 50,
            'attack': 85,
            'specialAttack': 85,
            'defense': 40,
            'specialDefense': 40,
            'speed': 35,
        },
    },
    {
        'id': 332,
        'name': 'Cacturne',
        'type': [PokemonType.Grass, PokemonType.Dark],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 166,
        'catchRate': 60,
        'base': {
            'hitpoints': 70,
            'attack': 115,
            'specialAttack': 115,
            'defense': 60,
            'specialDefense': 60,
            'speed': 55,
        },
    },
    {
        'id': 333,
        'name': 'Swablu',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 62,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Swablu', 'Altaria', 35)],
        'base': {
            'hitpoints': 45,
            'attack': 40,
            'specialAttack': 40,
            'defense': 60,
            'specialDefense': 75,
            'speed': 50,
        },
    },
    {
        'id': 334,
        'name': 'Altaria',
        'type': [PokemonType.Dragon, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 172,
        'catchRate': 45,
        'base': {
            'hitpoints': 75,
            'attack': 70,
            'specialAttack': 70,
            'defense': 90,
            'specialDefense': 105,
            'speed': 80,
        },
    },
    {
        'id': 335,
        'name': 'Zangoose',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 160,
        'catchRate': 90,
        'base': {
            'hitpoints': 73,
            'attack': 115,
            'specialAttack': 60,
            'defense': 60,
            'specialDefense': 60,
            'speed': 90,
        },
    },
    {
        'id': 336,
        'name': 'Seviper',
        'type': [PokemonType.Poison],
        'eggCycles': 20,
        'levelType': LevelType.fluctuating,
        'exp': 160,
        'catchRate': 90,
        'base': {
            'hitpoints': 73,
            'attack': 100,
            'specialAttack': 100,
            'defense': 60,
            'specialDefense': 60,
            'speed': 65,
        },
    },
    {
        'id': 337,
        'name': 'Lunatone',
        'type': [PokemonType.Rock, PokemonType.Psychic],
        'eggCycles': 25,
        'levelType': LevelType.fast,
        'exp': 161,
        'catchRate': 45,
        'base': {
            'hitpoints': 90,
            'attack': 55,
            'specialAttack': 95,
            'defense': 65,
            'specialDefense': 85,
            'speed': 70,
        },
    },
    {
        'id': 338,
        'name': 'Solrock',
        'type': [PokemonType.Rock, PokemonType.Psychic],
        'eggCycles': 25,
        'levelType': LevelType.fast,
        'exp': 161,
        'catchRate': 45,
        'base': {
            'hitpoints': 90,
            'attack': 95,
            'specialAttack': 55,
            'defense': 85,
            'specialDefense': 65,
            'speed': 70,
        },
    },
    {
        'id': 339,
        'name': 'Barboach',
        'type': [PokemonType.Water, PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 58,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Barboach', 'Whiscash', 30)],
        'base': {
            'hitpoints': 50,
            'attack': 48,
            'specialAttack': 46,
            'defense': 43,
            'specialDefense': 41,
            'speed': 60,
        },
    },
    {
        'id': 340,
        'name': 'Whiscash',
        'type': [PokemonType.Water, PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 164,
        'catchRate': 75,
        'base': {
            'hitpoints': 110,
            'attack': 78,
            'specialAttack': 76,
            'defense': 73,
            'specialDefense': 71,
            'speed': 60,
        },
    },
    {
        'id': 341,
        'name': 'Corphish',
        'type': [PokemonType.Water],
        'eggCycles': 15,
        'levelType': LevelType.fluctuating,
        'exp': 62,
        'catchRate': 205,
        'evolutions': [new LevelEvolution('Corphish', 'Crawdaunt', 30)],
        'base': {
            'hitpoints': 43,
            'attack': 80,
            'specialAttack': 50,
            'defense': 65,
            'specialDefense': 35,
            'speed': 35,
        },
    },
    {
        'id': 342,
        'name': 'Crawdaunt',
        'type': [PokemonType.Water, PokemonType.Dark],
        'eggCycles': 15,
        'levelType': LevelType.fluctuating,
        'exp': 164,
        'catchRate': 155,
        'base': {
            'hitpoints': 63,
            'attack': 120,
            'specialAttack': 90,
            'defense': 85,
            'specialDefense': 55,
            'speed': 55,
        },
    },
    {
        'id': 343,
        'name': 'Baltoy',
        'type': [PokemonType.Ground, PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Baltoy', 'Claydol', 36)],
        'base': {
            'hitpoints': 40,
            'attack': 40,
            'specialAttack': 40,
            'defense': 55,
            'specialDefense': 70,
            'speed': 55,
        },
    },
    {
        'id': 344,
        'name': 'Claydol',
        'type': [PokemonType.Ground, PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'catchRate': 90,
        'base': {
            'hitpoints': 60,
            'attack': 70,
            'specialAttack': 70,
            'defense': 105,
            'specialDefense': 120,
            'speed': 75,
        },
    },
    {
        'id': 345,
        'name': 'Lileep',
        'type': [PokemonType.Rock, PokemonType.Grass],
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 71,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Lileep', 'Cradily', 40)],
        'base': {
            'hitpoints': 66,
            'attack': 41,
            'specialAttack': 61,
            'defense': 77,
            'specialDefense': 87,
            'speed': 23,
        },
    },
    {
        'id': 346,
        'name': 'Cradily',
        'type': [PokemonType.Rock, PokemonType.Grass],
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 173,
        'catchRate': 45,
        'base': {
            'hitpoints': 86,
            'attack': 81,
            'specialAttack': 81,
            'defense': 97,
            'specialDefense': 107,
            'speed': 43,
        },
    },
    {
        'id': 347,
        'name': 'Anorith',
        'type': [PokemonType.Rock, PokemonType.Bug],
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 71,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Anorith', 'Armaldo', 40)],
        'base': {
            'hitpoints': 45,
            'attack': 95,
            'specialAttack': 40,
            'defense': 50,
            'specialDefense': 50,
            'speed': 75,
        },
    },
    {
        'id': 348,
        'name': 'Armaldo',
        'type': [PokemonType.Rock, PokemonType.Bug],
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 173,
        'catchRate': 45,
        'base': {
            'hitpoints': 75,
            'attack': 125,
            'specialAttack': 70,
            'defense': 100,
            'specialDefense': 80,
            'speed': 45,
        },
    },
    {
        'id': 349,
        'name': 'Feebas',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 40,
        'catchRate': 255,
        'evolutions': [new StoneEvolution('Feebas', 'Milotic', GameConstants.StoneType.Prism_scale)],
        'base': {
            'hitpoints': 20,
            'attack': 15,
            'specialAttack': 10,
            'defense': 20,
            'specialDefense': 55,
            'speed': 80,
        },
    },
    {
        'id': 350,
        'name': 'Milotic',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 189,
        'catchRate': 60,
        'base': {
            'hitpoints': 95,
            'attack': 60,
            'specialAttack': 100,
            'defense': 79,
            'specialDefense': 125,
            'speed': 81,
        },
    },
    {
        'id': 351,
        'name': 'Castform',
        'type': [PokemonType.Normal],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 147,
        'catchRate': 45,
        'base': {
            'hitpoints': 70,
            'attack': 70,
            'specialAttack': 70,
            'defense': 70,
            'specialDefense': 70,
            'speed': 70,
        },
    },
    {
        'id': 351.1,
        'name': 'Castform (sunny)',
        'type': [PokemonType.Fire],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 147,
        'catchRate': 45,
        'base': {
            'hitpoints': 70,
            'attack': 70,
            'specialAttack': 70,
            'defense': 70,
            'specialDefense': 70,
            'speed': 70,
        },
    },
    {
        'id': 351.2,
        'name': 'Castform (rainy)',
        'type': [PokemonType.Water],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 147,
        'catchRate': 45,
        'base': {
            'hitpoints': 70,
            'attack': 70,
            'specialAttack': 70,
            'defense': 70,
            'specialDefense': 70,
            'speed': 70,
        },
    },
    {
        'id': 351.3,
        'name': 'Castform (snowy)',
        'type': [PokemonType.Ice],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 147,
        'catchRate': 45,
        'base': {
            'hitpoints': 70,
            'attack': 70,
            'specialAttack': 70,
            'defense': 70,
            'specialDefense': 70,
            'speed': 70,
        },
    },
    {
        'id': 352,
        'name': 'Kecleon',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 154,
        'catchRate': 200,
        'base': {
            'hitpoints': 60,
            'attack': 90,
            'specialAttack': 60,
            'defense': 70,
            'specialDefense': 120,
            'speed': 40,
        },
    },
    {
        'id': 353,
        'name': 'Shuppet',
        'type': [PokemonType.Ghost],
        'eggCycles': 25,
        'levelType': LevelType.fast,
        'exp': 59,
        'catchRate': 225,
        'evolutions': [new LevelEvolution('Shuppet', 'Banette', 37)],
        'base': {
            'hitpoints': 44,
            'attack': 75,
            'specialAttack': 63,
            'defense': 35,
            'specialDefense': 33,
            'speed': 45,
        },
    },
    {
        'id': 354,
        'name': 'Banette',
        'type': [PokemonType.Ghost],
        'eggCycles': 25,
        'levelType': LevelType.fast,
        'exp': 159,
        'catchRate': 45,
        'base': {
            'hitpoints': 64,
            'attack': 115,
            'specialAttack': 83,
            'defense': 65,
            'specialDefense': 63,
            'speed': 65,
        },
    },
    {
        'id': 355,
        'name': 'Duskull',
        'type': [PokemonType.Ghost],
        'eggCycles': 25,
        'levelType': LevelType.fast,
        'exp': 59,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Duskull', 'Dusclops', 37)],
        'base': {
            'hitpoints': 20,
            'attack': 40,
            'specialAttack': 30,
            'defense': 90,
            'specialDefense': 90,
            'speed': 25,
        },
    },
    {
        'id': 356,
        'name': 'Dusclops',
        'type': [PokemonType.Ghost],
        'eggCycles': 25,
        'levelType': LevelType.fast,
        'exp': 159,
        'catchRate': 90,
        'evolutions': [new StoneEvolution('Dusclops', 'Dusknoir', GameConstants.StoneType.Reaper_cloth)],
        'base': {
            'hitpoints': 40,
            'attack': 70,
            'specialAttack': 60,
            'defense': 130,
            'specialDefense': 130,
            'speed': 25,
        },
    },
    {
        'id': 357,
        'name': 'Tropius',
        'type': [PokemonType.Grass, PokemonType.Flying],
        'eggCycles': 25,
        'levelType': LevelType.slow,
        'exp': 161,
        'catchRate': 200,
        'base': {
            'hitpoints': 99,
            'attack': 68,
            'specialAttack': 72,
            'defense': 83,
            'specialDefense': 87,
            'speed': 51,
        },
    },
    {
        'id': 358,
        'name': 'Chimecho',
        'type': [PokemonType.Psychic],
        'eggCycles': 25,
        'levelType': LevelType.fast,
        'exp': 159,
        'catchRate': 45,
        'base': {
            'hitpoints': 75,
            'attack': 50,
            'specialAttack': 95,
            'defense': 80,
            'specialDefense': 90,
            'speed': 65,
        },
    },
    {
        'id': 359,
        'name': 'Absol',
        'type': [PokemonType.Dark],
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 163,
        'catchRate': 30,
        'base': {
            'hitpoints': 65,
            'attack': 130,
            'specialAttack': 75,
            'defense': 60,
            'specialDefense': 60,
            'speed': 75,
        },
    },
    {
        'id': 360,
        'name': 'Wynaut',
        'type': [PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 52,
        'catchRate': 125,
        'evolutions': [new LevelEvolution('Wynaut', 'Wobbuffet', 15)],
        'baby': true,
        'base': {
            'hitpoints': 95,
            'attack': 23,
            'specialAttack': 23,
            'defense': 48,
            'specialDefense': 48,
            'speed': 23,
        },
    },
    {
        'id': 361,
        'name': 'Snorunt',
        'type': [PokemonType.Ice],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'catchRate': 190,
        'evolutions': [
            new LevelEvolution('Snorunt', 'Glalie', 42),
            new StoneEvolution('Snorunt', 'Froslass', GameConstants.StoneType.Dawn_stone),
        ],
        'base': {
            'hitpoints': 50,
            'attack': 50,
            'specialAttack': 50,
            'defense': 50,
            'specialDefense': 50,
            'speed': 50,
        },
    },
    {
        'id': 362,
        'name': 'Glalie',
        'type': [PokemonType.Ice],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 75,
        'base': {
            'hitpoints': 80,
            'attack': 80,
            'specialAttack': 80,
            'defense': 80,
            'specialDefense': 80,
            'speed': 80,
        },
    },
    {
        'id': 363,
        'name': 'Spheal',
        'type': [PokemonType.Ice, PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 58,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Spheal', 'Sealeo', 32)],
        'base': {
            'hitpoints': 70,
            'attack': 40,
            'specialAttack': 55,
            'defense': 50,
            'specialDefense': 50,
            'speed': 25,
        },
    },
    {
        'id': 364,
        'name': 'Sealeo',
        'type': [PokemonType.Ice, PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 144,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Sealeo', 'Walrein', 44)],
        'base': {
            'hitpoints': 90,
            'attack': 60,
            'specialAttack': 75,
            'defense': 70,
            'specialDefense': 70,
            'speed': 45,
        },
    },
    {
        'id': 365,
        'name': 'Walrein',
        'type': [PokemonType.Ice, PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
        'base': {
            'hitpoints': 110,
            'attack': 80,
            'specialAttack': 95,
            'defense': 90,
            'specialDefense': 90,
            'speed': 65,
        },
    },
    {
        'id': 366,
        'name': 'Clamperl',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 69,
        'catchRate': 255,
        'evolutions': [
            new StoneEvolution('Clamperl', 'Huntail', GameConstants.StoneType.Deepsea_tooth),
            new StoneEvolution('Clamperl', 'Gorebyss', GameConstants.StoneType.Deepsea_scale),
        ],
        'base': {
            'hitpoints': 35,
            'attack': 64,
            'specialAttack': 74,
            'defense': 85,
            'specialDefense': 55,
            'speed': 32,
        },
    },
    {
        'id': 367,
        'name': 'Huntail',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 170,
        'catchRate': 60,
        'base': {
            'hitpoints': 55,
            'attack': 104,
            'specialAttack': 94,
            'defense': 105,
            'specialDefense': 75,
            'speed': 52,
        },
    },
    {
        'id': 368,
        'name': 'Gorebyss',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 170,
        'catchRate': 60,
        'base': {
            'hitpoints': 55,
            'attack': 84,
            'specialAttack': 114,
            'defense': 105,
            'specialDefense': 75,
            'speed': 52,
        },
    },
    {
        'id': 369,
        'name': 'Relicanth',
        'type': [PokemonType.Water, PokemonType.Rock],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 170,
        'catchRate': 25,
        'base': {
            'hitpoints': 100,
            'attack': 90,
            'specialAttack': 45,
            'defense': 130,
            'specialDefense': 65,
            'speed': 55,
        },
    },
    {
        'id': 370,
        'name': 'Luvdisc',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.fast,
        'exp': 116,
        'catchRate': 225,
        'base': {
            'hitpoints': 43,
            'attack': 30,
            'specialAttack': 40,
            'defense': 55,
            'specialDefense': 65,
            'speed': 97,
        },
    },
    {
        'id': 371,
        'name': 'Bagon',
        'type': [PokemonType.Dragon],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 60,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Bagon', 'Shelgon', 30)],
        'base': {
            'hitpoints': 45,
            'attack': 75,
            'specialAttack': 40,
            'defense': 60,
            'specialDefense': 30,
            'speed': 50,
        },
    },
    {
        'id': 372,
        'name': 'Shelgon',
        'type': [PokemonType.Dragon],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Shelgon', 'Salamence', 50)],
        'base': {
            'hitpoints': 65,
            'attack': 95,
            'specialAttack': 60,
            'defense': 100,
            'specialDefense': 50,
            'speed': 50,
        },
    },
    {
        'id': 373,
        'name': 'Salamence',
        'type': [PokemonType.Dragon, PokemonType.Flying],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 45,
        'base': {
            'hitpoints': 95,
            'attack': 135,
            'specialAttack': 110,
            'defense': 80,
            'specialDefense': 80,
            'speed': 100,
        },
    },
    {
        'id': 374,
        'name': 'Beldum',
        'type': [PokemonType.Steel, PokemonType.Psychic],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 60,
        'catchRate': 3,
        'evolutions': [new LevelEvolution('Beldum', 'Metang', 20)],
        'base': {
            'hitpoints': 40,
            'attack': 55,
            'specialAttack': 35,
            'defense': 80,
            'specialDefense': 60,
            'speed': 30,
        },
    },
    {
        'id': 375,
        'name': 'Metang',
        'type': [PokemonType.Steel, PokemonType.Psychic],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 147,
        'catchRate': 3,
        'evolutions': [new LevelEvolution('Metang', 'Metagross', 45)],
        'base': {
            'hitpoints': 60,
            'attack': 75,
            'specialAttack': 55,
            'defense': 100,
            'specialDefense': 80,
            'speed': 50,
        },
    },
    {
        'id': 376,
        'name': 'Metagross',
        'type': [PokemonType.Steel, PokemonType.Psychic],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 80,
            'attack': 135,
            'specialAttack': 95,
            'defense': 130,
            'specialDefense': 90,
            'speed': 70,
        },
    },
    {
        'id': 377,
        'name': 'Regirock',
        'type': [PokemonType.Rock],
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 80,
            'attack': 100,
            'specialAttack': 50,
            'defense': 200,
            'specialDefense': 100,
            'speed': 50,
        },
    },
    {
        'id': 378,
        'name': 'Regice',
        'type': [PokemonType.Ice],
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 80,
            'attack': 50,
            'specialAttack': 100,
            'defense': 100,
            'specialDefense': 200,
            'speed': 50,
        },
    },
    {
        'id': 379,
        'name': 'Registeel',
        'type': [PokemonType.Steel],
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 80,
            'attack': 75,
            'specialAttack': 75,
            'defense': 150,
            'specialDefense': 150,
            'speed': 50,
        },
    },
    {
        'id': 380,
        'name': 'Latias',
        'type': [PokemonType.Dragon, PokemonType.Psychic],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 80,
            'attack': 80,
            'specialAttack': 110,
            'defense': 90,
            'specialDefense': 130,
            'speed': 110,
        },
    },
    {
        'id': 381,
        'name': 'Latios',
        'type': [PokemonType.Dragon, PokemonType.Psychic],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 80,
            'attack': 90,
            'specialAttack': 130,
            'defense': 80,
            'specialDefense': 110,
            'speed': 110,
        },
    },
    {
        'id': 382,
        'name': 'Kyogre',
        'type': [PokemonType.Water],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 302,
        'catchRate': 3,
        'base': {
            'hitpoints': 100,
            'attack': 100,
            'specialAttack': 150,
            'defense': 90,
            'specialDefense': 140,
            'speed': 90,
        },
    },
    {
        'id': 383,
        'name': 'Groudon',
        'type': [PokemonType.Ground],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 302,
        'catchRate': 3,
        'base': {
            'hitpoints': 100,
            'attack': 150,
            'specialAttack': 100,
            'defense': 140,
            'specialDefense': 90,
            'speed': 90,
        },
    },
    {
        'id': 384,
        'name': 'Rayquaza',
        'type': [PokemonType.Dragon, PokemonType.Flying],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 45,
        'base': {
            'hitpoints': 105,
            'attack': 150,
            'specialAttack': 150,
            'defense': 90,
            'specialDefense': 90,
            'speed': 95,
        },
    },
    {
        'id': 385,
        'name': 'Jirachi',
        'type': [PokemonType.Steel, PokemonType.Psychic],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 100,
            'attack': 100,
            'specialAttack': 100,
            'defense': 100,
            'specialDefense': 100,
            'speed': 100,
        },
    },
    {
        'id': 386,
        'name': 'Deoxys',
        'type': [PokemonType.Psychic],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 50,
            'attack': 150,
            'specialAttack': 150,
            'defense': 50,
            'specialDefense': 50,
            'speed': 150,
        },
    },
    {
        'id': 386.1,
        'name': 'Deoxys (attack)',
        'type': [PokemonType.Psychic],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 50,
            'attack': 180,
            'specialAttack': 180,
            'defense': 20,
            'specialDefense': 20,
            'speed': 150,
        },
    },
    {
        'id': 386.2,
        'name': 'Deoxys (defense)',
        'type': [PokemonType.Psychic],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 50,
            'attack': 70,
            'specialAttack': 70,
            'defense': 160,
            'specialDefense': 160,
            'speed': 90,
        },
    },
    {
        'id': 386.3,
        'name': 'Deoxys (speed)',
        'type': [PokemonType.Psychic],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 50,
            'attack': 95,
            'specialAttack': 95,
            'defense': 90,
            'specialDefense': 90,
            'speed': 180,
        },
    },
    {
        'id': 387,
        'name': 'Turtwig',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Turtwig', 'Grotle', 18)],
        'base': {
            'hitpoints': 55,
            'attack': 68,
            'specialAttack': 45,
            'defense': 64,
            'specialDefense': 55,
            'speed': 31,
        },
    },
    {
        'id': 388,
        'name': 'Grotle',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Grotle', 'Torterra', 32)],
        'base': {
            'hitpoints': 75,
            'attack': 89,
            'specialAttack': 55,
            'defense': 85,
            'specialDefense': 65,
            'speed': 36,
        },
    },
    {
        'id': 389,
        'name': 'Torterra',
        'type': [PokemonType.Grass, PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 236,
        'catchRate': 45,
        'base': {
            'hitpoints': 95,
            'attack': 109,
            'specialAttack': 75,
            'defense': 105,
            'specialDefense': 85,
            'speed': 56,
        },
    },
    {
        'id': 390,
        'name': 'Chimchar',
        'type': [PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Chimchar', 'Monferno', 14)],
        'base': {
            'hitpoints': 44,
            'attack': 58,
            'specialAttack': 58,
            'defense': 44,
            'specialDefense': 44,
            'speed': 61,
        },
    },
    {
        'id': 391,
        'name': 'Monferno',
        'type': [PokemonType.Fire, PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Monferno', 'Infernape', 36)],
        'base': {
            'hitpoints': 64,
            'attack': 78,
            'specialAttack': 78,
            'defense': 52,
            'specialDefense': 52,
            'speed': 81,
        },
    },
    {
        'id': 392,
        'name': 'Infernape',
        'type': [PokemonType.Fire, PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 240,
        'catchRate': 45,
        'base': {
            'hitpoints': 76,
            'attack': 104,
            'specialAttack': 104,
            'defense': 71,
            'specialDefense': 71,
            'speed': 108,
        },
    },
    {
        'id': 393,
        'name': 'Piplup',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 63,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Piplup', 'Prinplup', 16)],
        'base': {
            'hitpoints': 53,
            'attack': 51,
            'specialAttack': 61,
            'defense': 53,
            'specialDefense': 56,
            'speed': 40,
        },
    },
    {
        'id': 394,
        'name': 'Prinplup',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Prinplup', 'Empoleon', 36)],
        'base': {
            'hitpoints': 64,
            'attack': 66,
            'specialAttack': 81,
            'defense': 68,
            'specialDefense': 76,
            'speed': 50,
        },
    },
    {
        'id': 395,
        'name': 'Empoleon',
        'type': [PokemonType.Water, PokemonType.Steel],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
        'base': {
            'hitpoints': 84,
            'attack': 86,
            'specialAttack': 111,
            'defense': 88,
            'specialDefense': 101,
            'speed': 60,
        },
    },
    {
        'id': 396,
        'name': 'Starly',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 49,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Starly', 'Staravia', 14)],
        'base': {
            'hitpoints': 40,
            'attack': 55,
            'specialAttack': 30,
            'defense': 30,
            'specialDefense': 30,
            'speed': 60,
        },
    },
    {
        'id': 397,
        'name': 'Staravia',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 119,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Staravia', 'Staraptor', 34)],
        'base': {
            'hitpoints': 55,
            'attack': 75,
            'specialAttack': 40,
            'defense': 50,
            'specialDefense': 40,
            'speed': 80,
        },
    },
    {
        'id': 398,
        'name': 'Staraptor',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 218,
        'catchRate': 45,
        'base': {
            'hitpoints': 85,
            'attack': 120,
            'specialAttack': 50,
            'defense': 70,
            'specialDefense': 60,
            'speed': 100,
        },
    },
    {
        'id': 399,
        'name': 'Bidoof',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 50,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Bidoof', 'Bibarel', 15)],
        'base': {
            'hitpoints': 59,
            'attack': 45,
            'specialAttack': 35,
            'defense': 40,
            'specialDefense': 40,
            'speed': 31,
        },
    },
    {
        'id': 400,
        'name': 'Bibarel',
        'type': [PokemonType.Normal, PokemonType.Water],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 144,
        'catchRate': 127,
        'base': {
            'hitpoints': 79,
            'attack': 85,
            'specialAttack': 55,
            'defense': 60,
            'specialDefense': 60,
            'speed': 71,
        },
    },
    {
        'id': 401,
        'name': 'Kricketot',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 39,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Kricketot', 'Kricketune', 10)],
        'base': {
            'hitpoints': 37,
            'attack': 25,
            'specialAttack': 25,
            'defense': 41,
            'specialDefense': 41,
            'speed': 25,
        },
    },
    {
        'id': 402,
        'name': 'Kricketune',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 134,
        'catchRate': 45,
        'base': {
            'hitpoints': 77,
            'attack': 85,
            'specialAttack': 55,
            'defense': 51,
            'specialDefense': 51,
            'speed': 65,
        },
    },
    {
        'id': 403,
        'name': 'Shinx',
        'type': [PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 53,
        'catchRate': 235,
        'evolutions': [new LevelEvolution('Shinx', 'Luxio', 15)],
        'base': {
            'hitpoints': 45,
            'attack': 65,
            'specialAttack': 40,
            'defense': 34,
            'specialDefense': 34,
            'speed': 45,
        },
    },
    {
        'id': 404,
        'name': 'Luxio',
        'type': [PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 127,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Luxio', 'Luxray', 30)],
        'base': {
            'hitpoints': 60,
            'attack': 85,
            'specialAttack': 60,
            'defense': 49,
            'specialDefense': 49,
            'speed': 60,
        },
    },
    {
        'id': 405,
        'name': 'Luxray',
        'type': [PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 235,
        'catchRate': 45,
        'base': {
            'hitpoints': 80,
            'attack': 120,
            'specialAttack': 95,
            'defense': 79,
            'specialDefense': 79,
            'speed': 70,
        },
    },
    {
        'id': 406,
        'name': 'Budew',
        'type': [PokemonType.Grass, PokemonType.Poison],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [new DayTimedStoneEvolution('Budew', 'Roselia', GameConstants.StoneType.Soothe_bell)],
        'baby': true,
        'base': {
            'hitpoints': 40,
            'attack': 30,
            'specialAttack': 50,
            'defense': 35,
            'specialDefense': 70,
            'speed': 55,
        },
    },
    {
        'id': 407,
        'name': 'Roserade',
        'type': [PokemonType.Grass, PokemonType.Poison],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 232,
        'catchRate': 75,
        'base': {
            'hitpoints': 60,
            'attack': 70,
            'specialAttack': 125,
            'defense': 65,
            'specialDefense': 105,
            'speed': 90,
        },
    },
    {
        'id': 408,
        'name': 'Cranidos',
        'type': [PokemonType.Rock],
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 70,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Cranidos', 'Rampardos', 30)],
        'base': {
            'hitpoints': 67,
            'attack': 125,
            'specialAttack': 30,
            'defense': 40,
            'specialDefense': 30,
            'speed': 58,
        },
    },
    {
        'id': 409,
        'name': 'Rampardos',
        'type': [PokemonType.Rock],
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 173,
        'catchRate': 45,
        'base': {
            'hitpoints': 97,
            'attack': 165,
            'specialAttack': 65,
            'defense': 60,
            'specialDefense': 50,
            'speed': 58,
        },
    },
    {
        'id': 410,
        'name': 'Shieldon',
        'type': [PokemonType.Rock, PokemonType.Steel],
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 70,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Shieldon', 'Bastiodon', 30)],
        'base': {
            'hitpoints': 30,
            'attack': 42,
            'specialAttack': 42,
            'defense': 118,
            'specialDefense': 88,
            'speed': 30,
        },
    },
    {
        'id': 411,
        'name': 'Bastiodon',
        'type': [PokemonType.Rock, PokemonType.Steel],
        'eggCycles': 30,
        'levelType': LevelType.erratic,
        'exp': 173,
        'catchRate': 45,
        'base': {
            'hitpoints': 60,
            'attack': 52,
            'specialAttack': 47,
            'defense': 168,
            'specialDefense': 138,
            'speed': 30,
        },
    },
    {
        'id': 412,
        'name': 'Burmy (plant)',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 45,
        'catchRate': 120,
        'evolutions': [
            new LevelEvolution('Burmy (plant)', 'Wormadam (plant)', 20),
            new LevelEvolution('Burmy (plant)', 'Mothim', 20),
        ],
        'base': {
            'hitpoints': 40,
            'attack': 29,
            'specialAttack': 29,
            'defense': 45,
            'specialDefense': 45,
            'speed': 36,
        },
    },
    {
        'id': 412.1,
        'name': 'Burmy (sand)',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 45,
        'catchRate': 120,
        'evolutions': [
            new LevelEvolution('Burmy (sand)', 'Wormadam (sand)', 20),
            new LevelEvolution('Burmy (sand)', 'Mothim', 20),
        ],
        'base': {
            'hitpoints': 40,
            'attack': 29,
            'specialAttack': 29,
            'defense': 45,
            'specialDefense': 45,
            'speed': 36,
        },
    },
    {
        'id': 412.2,
        'name': 'Burmy (trash)',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 45,
        'catchRate': 120,
        'evolutions': [
            new LevelEvolution('Burmy (trash)', 'Wormadam (trash)', 20),
            new LevelEvolution('Burmy (trash)', 'Mothim', 20),
        ],
        'base': {
            'hitpoints': 40,
            'attack': 29,
            'specialAttack': 29,
            'defense': 45,
            'specialDefense': 45,
            'speed': 36,
        },
    },
    {
        'id': 413,
        'name': 'Wormadam (plant)',
        'type': [PokemonType.Bug, PokemonType.Grass],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 148,
        'catchRate': 45,
        'base': {
            'hitpoints': 60,
            'attack': 59,
            'specialAttack': 79,
            'defense': 85,
            'specialDefense': 105,
            'speed': 36,
        },
    },
    {
        'id': 413.1,
        'name': 'Wormadam (sand)',
        'type': [PokemonType.Bug, PokemonType.Ground],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 148,
        'catchRate': 45,
        'base': {
            'hitpoints': 60,
            'attack': 79,
            'specialAttack': 59,
            'defense': 105,
            'specialDefense': 85,
            'speed': 36,
        },
    },
    {
        'id': 413.2,
        'name': 'Wormadam (trash)',
        'type': [PokemonType.Bug, PokemonType.Steel],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 148,
        'catchRate': 45,
        'base': {
            'hitpoints': 60,
            'attack': 69,
            'specialAttack': 69,
            'defense': 95,
            'specialDefense': 95,
            'speed': 36,
        },
    },
    {
        'id': 414,
        'name': 'Mothim',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 148,
        'catchRate': 45,
        'base': {
            'hitpoints': 70,
            'attack': 94,
            'specialAttack': 94,
            'defense': 50,
            'specialDefense': 50,
            'speed': 66,
        },
    },
    {
        'id': 415,
        'name': 'Combee',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 49,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Combee', 'Vespiquen', 21)],
        'base': {
            'hitpoints': 30,
            'attack': 30,
            'specialAttack': 30,
            'defense': 42,
            'specialDefense': 42,
            'speed': 70,
        },
    },
    {
        'id': 416,
        'name': 'Vespiquen',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 166,
        'catchRate': 45,
        'base': {
            'hitpoints': 70,
            'attack': 80,
            'specialAttack': 80,
            'defense': 102,
            'specialDefense': 102,
            'speed': 40,
        },
    },
    {
        'id': 417,
        'name': 'Pachirisu',
        'type': [PokemonType.Electric],
        'eggCycles': 10,
        'levelType': LevelType.mediumfast,
        'exp': 142,
        'catchRate': 200,
        'base': {
            'hitpoints': 60,
            'attack': 45,
            'specialAttack': 45,
            'defense': 70,
            'specialDefense': 90,
            'speed': 95,
        },
    },
    {
        'id': 418,
        'name': 'Buizel',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Buizel', 'Floatzel', 26)],
        'base': {
            'hitpoints': 55,
            'attack': 65,
            'specialAttack': 60,
            'defense': 35,
            'specialDefense': 30,
            'speed': 85,
        },
    },
    {
        'id': 419,
        'name': 'Floatzel',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 75,
        'base': {
            'hitpoints': 85,
            'attack': 105,
            'specialAttack': 85,
            'defense': 55,
            'specialDefense': 50,
            'speed': 115,
        },
    },
    {
        'id': 420,
        'name': 'Cherubi',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 55,
        'catchRate': 190,
        'evolutions': [
            new LevelEvolution('Cherubi', 'Cherrim (overcast)', 25),
            new LevelEvolution('Cherubi', 'Cherrim (sunshine)', 25),
        ],
        'base': {
            'hitpoints': 45,
            'attack': 35,
            'specialAttack': 62,
            'defense': 45,
            'specialDefense': 53,
            'speed': 35,
        },
    },
    {
        'id': 421,
        'name': 'Cherrim (overcast)',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 158,
        'catchRate': 75,
        'base': {
            'hitpoints': 70,
            'attack': 60,
            'specialAttack': 87,
            'defense': 70,
            'specialDefense': 78,
            'speed': 85,
        },
    },
    {
        'id': 421.1,
        'name': 'Cherrim (sunshine)',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 158,
        'catchRate': 75,
        'base': {
            'hitpoints': 70,
            'attack': 60,
            'specialAttack': 87,
            'defense': 70,
            'specialDefense': 78,
            'speed': 85,
        },
    },
    {
        'id': 422,
        'name': 'Shellos (west)',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Shellos (west)', 'Gastrodon (west)', 30)],
        'base': {
            'hitpoints': 76,
            'attack': 48,
            'specialAttack': 57,
            'defense': 48,
            'specialDefense': 62,
            'speed': 34,
        },
    },
    {
        'id': 422.1,
        'name': 'Shellos (east)',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Shellos (east)', 'Gastrodon (east)', 30)],
        'base': {
            'hitpoints': 76,
            'attack': 48,
            'specialAttack': 57,
            'defense': 48,
            'specialDefense': 62,
            'speed': 34,
        },
    },
    {
        'id': 423,
        'name': 'Gastrodon (west)',
        'type': [PokemonType.Water, PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 75,
        'base': {
            'hitpoints': 111,
            'attack': 83,
            'specialAttack': 92,
            'defense': 68,
            'specialDefense': 82,
            'speed': 39,
        },
    },
    {
        'id': 423.1,
        'name': 'Gastrodon (east)',
        'type': [PokemonType.Water, PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 75,
        'base': {
            'hitpoints': 111,
            'attack': 83,
            'specialAttack': 92,
            'defense': 68,
            'specialDefense': 82,
            'speed': 39,
        },
    },
    {
        'id': 424,
        'name': 'Ambipom',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': 4,
        'exp': 169,
        'catchRate': 45,
        'base': {
            'hitpoints': 75,
            'attack': 100,
            'specialAttack': 60,
            'defense': 66,
            'specialDefense': 66,
            'speed': 115,
        },
    },
    {
        'id': 425,
        'name': 'Drifloon',
        'type': [PokemonType.Ghost, PokemonType.Flying],
        'eggCycles': 30,
        'levelType': LevelType.fluctuating,
        'exp': 70,
        'catchRate': 125,
        'evolutions': [new LevelEvolution('Drifloon', 'Drifblim', 28)],
        'base': {
            'hitpoints': 90,
            'attack': 50,
            'specialAttack': 60,
            'defense': 34,
            'specialDefense': 44,
            'speed': 70,
        },
    },
    {
        'id': 426,
        'name': 'Drifblim',
        'type': [PokemonType.Ghost, PokemonType.Flying],
        'eggCycles': 30,
        'levelType': LevelType.fluctuating,
        'exp': 174,
        'catchRate': 60,
        'base': {
            'hitpoints': 150,
            'attack': 80,
            'specialAttack': 90,
            'defense': 44,
            'specialDefense': 54,
            'speed': 80,
        },
    },
    {
        'id': 427,
        'name': 'Buneary',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 70,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Buneary', 'Lopunny', GameConstants.StoneType.Soothe_bell)],
        'base': {
            'hitpoints': 55,
            'attack': 66,
            'specialAttack': 44,
            'defense': 44,
            'specialDefense': 56,
            'speed': 85,
        },
    },
    {
        'id': 428,
        'name': 'Lopunny',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 60,
        'base': {
            'hitpoints': 65,
            'attack': 76,
            'specialAttack': 54,
            'defense': 84,
            'specialDefense': 96,
            'speed': 105,
        },
    },
    {
        'id': 429,
        'name': 'Mismagius',
        'type': [PokemonType.Ghost],
        'eggCycles': 25,
        'levelType': 4,
        'exp': 173,
        'catchRate': 45,
        'base': {
            'hitpoints': 60,
            'attack': 60,
            'specialAttack': 105,
            'defense': 60,
            'specialDefense': 105,
            'speed': 105,
        },
    },
    {
        'id': 430,
        'name': 'Honchkrow',
        'type': [PokemonType.Dark, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 177,
        'catchRate': 30,
        'base': {
            'hitpoints': 100,
            'attack': 125,
            'specialAttack': 105,
            'defense': 52,
            'specialDefense': 52,
            'speed': 71,
        },
    },
    {
        'id': 431,
        'name': 'Glameow',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': 4,
        'exp': 62,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Glameow', 'Purugly', 38)],
        'base': {
            'hitpoints': 49,
            'attack': 55,
            'specialAttack': 42,
            'defense': 42,
            'specialDefense': 37,
            'speed': 85,
        },
    },
    {
        'id': 432,
        'name': 'Purugly',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': 4,
        'exp': 158,
        'catchRate': 75,
        'base': {
            'hitpoints': 71,
            'attack': 82,
            'specialAttack': 64,
            'defense': 64,
            'specialDefense': 59,
            'speed': 112,
        },
    },
    {
        'id': 433,
        'name': 'Chingling',
        'type': [PokemonType.Psychic],
        'eggCycles': 25,
        'levelType': 4,
        'exp': 57,
        'catchRate': 120,
        'evolutions': [new NightTimedStoneEvolution('Chingling', 'Chimecho', GameConstants.StoneType.Soothe_bell)],
        'baby': true,
        'base': {
            'hitpoints': 45,
            'attack': 30,
            'specialAttack': 65,
            'defense': 50,
            'specialDefense': 50,
            'speed': 45,
        },
    },
    {
        'id': 434,
        'name': 'Stunky',
        'type': [PokemonType.Poison, PokemonType.Dark],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'catchRate': 225,
        'evolutions': [new LevelEvolution('Stunky', 'Skuntank', 34)],
        'base': {
            'hitpoints': 63,
            'attack': 63,
            'specialAttack': 41,
            'defense': 47,
            'specialDefense': 41,
            'speed': 74,
        },
    },
    {
        'id': 435,
        'name': 'Skuntank',
        'type': [PokemonType.Poison, PokemonType.Dark],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 60,
        'base': {
            'hitpoints': 103,
            'attack': 93,
            'specialAttack': 71,
            'defense': 67,
            'specialDefense': 61,
            'speed': 84,
        },
    },
    {
        'id': 436,
        'name': 'Bronzor',
        'type': [PokemonType.Steel, PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Bronzor', 'Bronzong', 33)],
        'base': {
            'hitpoints': 57,
            'attack': 24,
            'specialAttack': 24,
            'defense': 86,
            'specialDefense': 86,
            'speed': 23,
        },
    },
    {
        'id': 437,
        'name': 'Bronzong',
        'type': [PokemonType.Steel, PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'catchRate': 90,
        'base': {
            'hitpoints': 67,
            'attack': 89,
            'specialAttack': 79,
            'defense': 116,
            'specialDefense': 116,
            'speed': 33,
        },
    },
    {
        'id': 438,
        'name': 'Bonsly',
        'type': [PokemonType.Rock],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 58,
        'catchRate': 255,
        'evolutions': [new StoneEvolution('Bonsly', 'Sudowoodo', GameConstants.StoneType.None)],
        'baby': true,
        'base': {
            'hitpoints': 50,
            'attack': 80,
            'specialAttack': 10,
            'defense': 95,
            'specialDefense': 45,
            'speed': 10,
        },
    },
    {
        'id': 439,
        'name': 'Mime Jr.',
        'type': [PokemonType.Psychic, PokemonType.Fairy],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 62,
        'catchRate': 145,
        'evolutions': [new StoneEvolution('Mime Jr.', 'Mr. Mime', GameConstants.StoneType.None)],
        'baby': true,
        'base': {
            'hitpoints': 20,
            'attack': 25,
            'specialAttack': 70,
            'defense': 45,
            'specialDefense': 90,
            'speed': 60,
        },
    },
    {
        'id': 440,
        'name': 'Happiny',
        'type': [PokemonType.Normal],
        'eggCycles': 40,
        'levelType': 4,
        'exp': 110,
        'catchRate': 130,
        'evolutions': [new StoneEvolution('Happiny', 'Chansey', GameConstants.StoneType.None)],
        'baby': true,
        'base': {
            'hitpoints': 100,
            'attack': 5,
            'specialAttack': 15,
            'defense': 5,
            'specialDefense': 65,
            'speed': 30,
        },
    },
    {
        'id': 441,
        'name': 'Chatot',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 144,
        'catchRate': 30,
        'base': {
            'hitpoints': 76,
            'attack': 65,
            'specialAttack': 92,
            'defense': 45,
            'specialDefense': 42,
            'speed': 91,
        },
    },
    {
        'id': 442,
        'name': 'Spiritomb',
        'type': [PokemonType.Ghost, PokemonType.Dark],
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 100,
        'base': {
            'hitpoints': 50,
            'attack': 92,
            'specialAttack': 92,
            'defense': 108,
            'specialDefense': 108,
            'speed': 35,
        },
    },
    {
        'id': 443,
        'name': 'Gible',
        'type': [PokemonType.Dragon, PokemonType.Ground],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 60,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Gible', 'Gabite', 24)],
        'base': {
            'hitpoints': 58,
            'attack': 70,
            'specialAttack': 40,
            'defense': 45,
            'specialDefense': 45,
            'speed': 42,
        },
    },
    {
        'id': 444,
        'name': 'Gabite',
        'type': [PokemonType.Dragon, PokemonType.Ground],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 144,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Gabite', 'Garchomp', 48)],
        'base': {
            'hitpoints': 68,
            'attack': 90,
            'specialAttack': 50,
            'defense': 65,
            'specialDefense': 55,
            'speed': 82,
        },
    },
    {
        'id': 445,
        'name': 'Garchomp',
        'type': [PokemonType.Dragon, PokemonType.Ground],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 45,
        'base': {
            'hitpoints': 108,
            'attack': 130,
            'specialAttack': 80,
            'defense': 95,
            'specialDefense': 85,
            'speed': 102,
        },
    },
    {
        'id': 446,
        'name': 'Munchlax',
        'type': [PokemonType.Normal],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 78,
        'catchRate': 50,
        'evolutions': [new StoneEvolution('Munchlax', 'Snorlax', GameConstants.StoneType.Soothe_bell)],
        'baby': true,
        'base': {
            'hitpoints': 135,
            'attack': 85,
            'specialAttack': 40,
            'defense': 40,
            'specialDefense': 85,
            'speed': 5,
        },
    },
    {
        'id': 447,
        'name': 'Riolu',
        'type': [PokemonType.Fighting],
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 57,
        'catchRate': 75,
        'evolutions': [new DayTimedStoneEvolution('Riolu', 'Lucario', GameConstants.StoneType.Soothe_bell)],
        'base': {
            'hitpoints': 40,
            'attack': 70,
            'specialAttack': 35,
            'defense': 40,
            'specialDefense': 40,
            'speed': 60,
        },
    },
    {
        'id': 448,
        'name': 'Lucario',
        'type': [PokemonType.Fighting, PokemonType.Steel],
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 184,
        'catchRate': 45,
        'base': {
            'hitpoints': 70,
            'attack': 110,
            'specialAttack': 115,
            'defense': 70,
            'specialDefense': 70,
            'speed': 90,
        },
    },
    {
        'id': 449,
        'name': 'Hippopotas',
        'type': [PokemonType.Ground],
        'eggCycles': 30,
        'levelType': LevelType.slow,
        'exp': 66,
        'catchRate': 140,
        'evolutions': [new LevelEvolution('Hippopotas', 'Hippowdon', 34)],
        'base': {
            'hitpoints': 68,
            'attack': 72,
            'specialAttack': 38,
            'defense': 78,
            'specialDefense': 42,
            'speed': 32,
        },
    },
    {
        'id': 450,
        'name': 'Hippowdon',
        'type': [PokemonType.Ground],
        'eggCycles': 30,
        'levelType': LevelType.slow,
        'exp': 184,
        'catchRate': 60,
        'base': {
            'hitpoints': 108,
            'attack': 112,
            'specialAttack': 68,
            'defense': 118,
            'specialDefense': 72,
            'speed': 47,
        },
    },
    {
        'id': 451,
        'name': 'Skorupi',
        'type': [PokemonType.Poison, PokemonType.Bug],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 66,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Skorupi', 'Drapion', 40)],
        'base': {
            'hitpoints': 40,
            'attack': 50,
            'specialAttack': 30,
            'defense': 90,
            'specialDefense': 55,
            'speed': 65,
        },
    },
    {
        'id': 452,
        'name': 'Drapion',
        'type': [PokemonType.Poison, PokemonType.Dark],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 175,
        'catchRate': 45,
        'base': {
            'hitpoints': 70,
            'attack': 90,
            'specialAttack': 60,
            'defense': 110,
            'specialDefense': 75,
            'speed': 95,
        },
    },
    {
        'id': 453,
        'name': 'Croagunk',
        'type': [PokemonType.Poison, PokemonType.Fighting],
        'eggCycles': 10,
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'catchRate': 140,
        'evolutions': [new LevelEvolution('Croagunk', 'Toxicroak', 37)],
        'base': {
            'hitpoints': 48,
            'attack': 61,
            'specialAttack': 61,
            'defense': 40,
            'specialDefense': 40,
            'speed': 50,
        },
    },
    {
        'id': 454,
        'name': 'Toxicroak',
        'type': [PokemonType.Poison, PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'catchRate': 75,
        'base': {
            'hitpoints': 83,
            'attack': 106,
            'specialAttack': 86,
            'defense': 65,
            'specialDefense': 65,
            'speed': 85,
        },
    },
    {
        'id': 455,
        'name': 'Carnivine',
        'type': [PokemonType.Grass],
        'eggCycles': 25,
        'levelType': LevelType.slow,
        'exp': 159,
        'catchRate': 200,
        'base': {
            'hitpoints': 74,
            'attack': 100,
            'specialAttack': 90,
            'defense': 72,
            'specialDefense': 72,
            'speed': 46,
        },
    },
    {
        'id': 456,
        'name': 'Finneon',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 66,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Finneon', 'Lumineon', 31)],
        'base': {
            'hitpoints': 49,
            'attack': 49,
            'specialAttack': 49,
            'defense': 56,
            'specialDefense': 61,
            'speed': 66,
        },
    },
    {
        'id': 457,
        'name': 'Lumineon',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 161,
        'catchRate': 75,
        'base': {
            'hitpoints': 69,
            'attack': 69,
            'specialAttack': 69,
            'defense': 76,
            'specialDefense': 86,
            'speed': 91,
        },
    },
    {
        'id': 458,
        'name': 'Mantyke',
        'type': [PokemonType.Water, PokemonType.Flying],
        'eggCycles': 25,
        'levelType': LevelType.slow,
        'exp': 69,
        'catchRate': 25,
        'evolutions': [new StoneEvolution('Mantyke', 'Mantine', GameConstants.StoneType.None)],
        'baby': true,
        'base': {
            'hitpoints': 45,
            'attack': 20,
            'specialAttack': 60,
            'defense': 50,
            'specialDefense': 120,
            'speed': 50,
        },
    },
    {
        'id': 459,
        'name': 'Snover',
        'type': [PokemonType.Grass, PokemonType.Ice],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 67,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Snover', 'Abomasnow', 40)],
        'base': {
            'hitpoints': 60,
            'attack': 62,
            'specialAttack': 62,
            'defense': 50,
            'specialDefense': 60,
            'speed': 40,
        },
    },
    {
        'id': 460,
        'name': 'Abomasnow',
        'type': [PokemonType.Grass, PokemonType.Ice],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 173,
        'catchRate': 60,
        'base': {
            'hitpoints': 90,
            'attack': 92,
            'specialAttack': 92,
            'defense': 75,
            'specialDefense': 85,
            'speed': 60,
        },
    },
    {
        'id': 461,
        'name': 'Weavile',
        'type': [PokemonType.Dark, PokemonType.Ice],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 179,
        'catchRate': 45,
        'base': {
            'hitpoints': 70,
            'attack': 120,
            'specialAttack': 45,
            'defense': 65,
            'specialDefense': 85,
            'speed': 125,
        },
    },
    {
        'id': 462,
        'name': 'Magnezone',
        'type': [PokemonType.Electric, PokemonType.Steel],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 241,
        'catchRate': 30,
        'base': {
            'hitpoints': 70,
            'attack': 70,
            'specialAttack': 130,
            'defense': 115,
            'specialDefense': 90,
            'speed': 60,
        },
    },
    {
        'id': 463,
        'name': 'Lickilicky',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 180,
        'catchRate': 30,
        'base': {
            'hitpoints': 110,
            'attack': 85,
            'specialAttack': 80,
            'defense': 95,
            'specialDefense': 95,
            'speed': 50,
        },
    },
    {
        'id': 464,
        'name': 'Rhyperior',
        'type': [PokemonType.Ground, PokemonType.Rock],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 241,
        'catchRate': 30,
        'base': {
            'hitpoints': 115,
            'attack': 140,
            'specialAttack': 55,
            'defense': 130,
            'specialDefense': 55,
            'speed': 40,
        },
    },
    {
        'id': 465,
        'name': 'Tangrowth',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 187,
        'catchRate': 30,
        'base': {
            'hitpoints': 100,
            'attack': 100,
            'specialAttack': 110,
            'defense': 125,
            'specialDefense': 50,
            'speed': 50,
        },
    },
    {
        'id': 466,
        'name': 'Electivire',
        'type': [PokemonType.Electric],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 243,
        'catchRate': 30,
        'base': {
            'hitpoints': 75,
            'attack': 123,
            'specialAttack': 95,
            'defense': 67,
            'specialDefense': 85,
            'speed': 95,
        },
    },
    {
        'id': 467,
        'name': 'Magmortar',
        'type': [PokemonType.Fire],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 243,
        'catchRate': 30,
        'base': {
            'hitpoints': 75,
            'attack': 95,
            'specialAttack': 125,
            'defense': 67,
            'specialDefense': 95,
            'speed': 83,
        },
    },
    {
        'id': 468,
        'name': 'Togekiss',
        'type': [PokemonType.Fairy, PokemonType.Flying],
        'eggCycles': 10,
        'levelType': 4,
        'exp': 245,
        'catchRate': 30,
        'base': {
            'hitpoints': 85,
            'attack': 50,
            'specialAttack': 120,
            'defense': 95,
            'specialDefense': 115,
            'speed': 80,
        },
    },
    {
        'id': 469,
        'name': 'Yanmega',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 180,
        'catchRate': 30,
        'base': {
            'hitpoints': 86,
            'attack': 76,
            'specialAttack': 116,
            'defense': 86,
            'specialDefense': 56,
            'speed': 95,
        },
    },
    {
        'id': 470,
        'name': 'Leafeon',
        'type': [PokemonType.Grass],
        'eggCycles': 35,
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'catchRate': 45,
        'base': {
            'hitpoints': 65,
            'attack': 110,
            'specialAttack': 60,
            'defense': 130,
            'specialDefense': 65,
            'speed': 95,
        },
    },
    {
        'id': 471,
        'name': 'Glaceon',
        'type': [PokemonType.Ice],
        'eggCycles': 35,
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'catchRate': 45,
        'base': {
            'hitpoints': 65,
            'attack': 60,
            'specialAttack': 130,
            'defense': 110,
            'specialDefense': 95,
            'speed': 65,
        },
    },
    {
        'id': 472,
        'name': 'Gliscor',
        'type': [PokemonType.Ground, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 179,
        'catchRate': 30,
        'base': {
            'hitpoints': 75,
            'attack': 95,
            'specialAttack': 45,
            'defense': 125,
            'specialDefense': 75,
            'speed': 95,
        },
    },
    {
        'id': 473,
        'name': 'Mamoswine',
        'type': [PokemonType.Ice, PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 239,
        'catchRate': 50,
        'base': {
            'hitpoints': 110,
            'attack': 130,
            'specialAttack': 70,
            'defense': 80,
            'specialDefense': 60,
            'speed': 80,
        },
    },
    {
        'id': 474,
        'name': 'Porygon-Z',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 241,
        'catchRate': 30,
        'base': {
            'hitpoints': 85,
            'attack': 80,
            'specialAttack': 135,
            'defense': 70,
            'specialDefense': 75,
            'speed': 90,
        },
    },
    {
        'id': 475,
        'name': 'Gallade',
        'type': [PokemonType.Psychic, PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 233,
        'catchRate': 45,
        'base': {
            'hitpoints': 68,
            'attack': 125,
            'specialAttack': 65,
            'defense': 65,
            'specialDefense': 115,
            'speed': 80,
        },
    },
    {
        'id': 476,
        'name': 'Probopass',
        'type': [PokemonType.Rock, PokemonType.Steel],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'catchRate': 60,
        'base': {
            'hitpoints': 60,
            'attack': 55,
            'specialAttack': 75,
            'defense': 145,
            'specialDefense': 150,
            'speed': 40,
        },
    },
    {
        'id': 477,
        'name': 'Dusknoir',
        'type': [PokemonType.Ghost],
        'eggCycles': 25,
        'levelType': 4,
        'exp': 236,
        'catchRate': 45,
        'base': {
            'hitpoints': 45,
            'attack': 100,
            'specialAttack': 65,
            'defense': 135,
            'specialDefense': 135,
            'speed': 45,
        },
    },
    {
        'id': 478,
        'name': 'Froslass',
        'type': [PokemonType.Ice, PokemonType.Ghost],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 75,
        'base': {
            'hitpoints': 70,
            'attack': 80,
            'specialAttack': 80,
            'defense': 70,
            'specialDefense': 70,
            'speed': 110,
        },
    },
    {
        'id': 479,
        'name': 'Rotom',
        'type': [PokemonType.Electric, PokemonType.Ghost],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 182,
        'catchRate': 45,
        'base': {
            'hitpoints': 50,
            'attack': 50,
            'specialAttack': 95,
            'defense': 77,
            'specialDefense': 77,
            'speed': 91,
        },
    },
    {
        'id': 479.1,
        'name': 'Rotom (heat)',
        'type': [PokemonType.Electric, PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 182,
        'catchRate': 45,
        'base': {
            'hitpoints': 50,
            'attack': 65,
            'specialAttack': 105,
            'defense': 107,
            'specialDefense': 107,
            'speed': 86,
        },
    },
    {
        'id': 479.2,
        'name': 'Rotom (wash)',
        'type': [PokemonType.Electric, PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 182,
        'catchRate': 45,
        'base': {
            'hitpoints': 50,
            'attack': 65,
            'specialAttack': 105,
            'defense': 107,
            'specialDefense': 107,
            'speed': 86,
        },
    },
    {
        'id': 479.3,
        'name': 'Rotom (frost)',
        'type': [PokemonType.Electric, PokemonType.Ice],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 182,
        'catchRate': 45,
        'base': {
            'hitpoints': 50,
            'attack': 65,
            'specialAttack': 105,
            'defense': 107,
            'specialDefense': 107,
            'speed': 86,
        },
    },
    {
        'id': 479.4,
        'name': 'Rotom (fan)',
        'type': [PokemonType.Electric, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 182,
        'catchRate': 45,
        'base': {
            'hitpoints': 50,
            'attack': 65,
            'specialAttack': 105,
            'defense': 107,
            'specialDefense': 107,
            'speed': 86,
        },
    },
    {
        'id': 479.5,
        'name': 'Rotom (mow)',
        'type': [PokemonType.Electric, PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 182,
        'catchRate': 45,
        'base': {
            'hitpoints': 50,
            'attack': 65,
            'specialAttack': 105,
            'defense': 107,
            'specialDefense': 107,
            'speed': 86,
        },
    },
    {
        'id': 480,
        'name': 'Uxie',
        'type': [PokemonType.Psychic],
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 75,
            'attack': 75,
            'specialAttack': 75,
            'defense': 130,
            'specialDefense': 130,
            'speed': 95,
        },
    },
    {
        'id': 481,
        'name': 'Mesprit',
        'type': [PokemonType.Psychic],
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 80,
            'attack': 105,
            'specialAttack': 105,
            'defense': 105,
            'specialDefense': 105,
            'speed': 80,
        },
    },
    {
        'id': 482,
        'name': 'Azelf',
        'type': [PokemonType.Psychic],
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 75,
            'attack': 125,
            'specialAttack': 125,
            'defense': 70,
            'specialDefense': 70,
            'speed': 115,
        },
    },
    {
        'id': 483,
        'name': 'Dialga',
        'type': [PokemonType.Steel, PokemonType.Dragon],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 3,
        'base': {
            'hitpoints': 100,
            'attack': 120,
            'specialAttack': 150,
            'defense': 120,
            'specialDefense': 100,
            'speed': 90,
        },
    },
    {
        'id': 484,
        'name': 'Palkia',
        'type': [PokemonType.Water, PokemonType.Dragon],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 3,
        'base': {
            'hitpoints': 90,
            'attack': 120,
            'specialAttack': 150,
            'defense': 100,
            'specialDefense': 120,
            'speed': 100,
        },
    },
    {
        'id': 485,
        'name': 'Heatran',
        'type': [PokemonType.Fire, PokemonType.Steel],
        'eggCycles': 10,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 91,
            'attack': 90,
            'specialAttack': 130,
            'defense': 106,
            'specialDefense': 106,
            'speed': 77,
        },
    },
    {
        'id': 486,
        'name': 'Regigigas',
        'type': [PokemonType.Normal],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 302,
        'catchRate': 3,
        'base': {
            'hitpoints': 110,
            'attack': 160,
            'specialAttack': 80,
            'defense': 110,
            'specialDefense': 110,
            'speed': 100,
        },
    },
    {
        'id': 487,
        'name': 'Giratina (altered)',
        'type': [PokemonType.Ghost, PokemonType.Dragon],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 3,
        'base': {
            'hitpoints': 150,
            'attack': 100,
            'specialAttack': 100,
            'defense': 120,
            'specialDefense': 120,
            'speed': 90,
        },
    },
    {
        'id': 487.1,
        'name': 'Giratina (origin)',
        'type': [PokemonType.Ghost, PokemonType.Dragon],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 3,
        'base': {
            'hitpoints': 150,
            'attack': 120,
            'specialAttack': 120,
            'defense': 100,
            'specialDefense': 100,
            'speed': 90,
        },
    },
    {
        'id': 488,
        'name': 'Cresselia',
        'type': [PokemonType.Psychic],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 70,
            'specialAttack': 75,
            'defense': 120,
            'specialDefense': 130,
            'speed': 85,
        },
    },
    {
        'id': 489,
        'name': 'Phione',
        'type': [PokemonType.Water],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 216,
        // 69420 to prevent evolution ingame, evolution needed for baby form to be obtainable
        'evolutions': [new LevelEvolution('Phione', 'Manaphy', 69420)],
        'baby': true,
        'catchRate': 30,
        'base': {
            'hitpoints': 80,
            'attack': 80,
            'specialAttack': 80,
            'defense': 80,
            'specialDefense': 80,
            'speed': 80,
        },
    },
    {
        'id': 490,
        'name': 'Manaphy',
        'type': [PokemonType.Water],
        'eggCycles': 10,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 100,
            'attack': 100,
            'specialAttack': 100,
            'defense': 100,
            'specialDefense': 100,
            'speed': 100,
        },
    },
    {
        'id': 491,
        'name': 'Darkrai',
        'type': [PokemonType.Dark],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 70,
            'attack': 90,
            'specialAttack': 135,
            'defense': 90,
            'specialDefense': 90,
            'speed': 125,
        },
    },
    {
        'id': 492,
        'name': 'Shaymin (land)',
        'type': [PokemonType.Grass],
        'eggCycles': 120,
        'levelType': LevelType.mediumslow,
        'exp': 270,
        'catchRate': 45,
        'base': {
            'hitpoints': 100,
            'attack': 100,
            'specialAttack': 100,
            'defense': 100,
            'specialDefense': 100,
            'speed': 100,
        },
    },
    {
        'id': 492.1,
        'name': 'Shaymin (sky)',
        'type': [PokemonType.Grass, PokemonType.Flying],
        'eggCycles': 120,
        'levelType': LevelType.mediumslow,
        'exp': 270,
        'catchRate': 45,
        'base': {
            'hitpoints': 100,
            'attack': 103,
            'specialAttack': 120,
            'defense': 75,
            'specialDefense': 75,
            'speed': 127,
        },
    },
    {
        'id': 493,
        'name': 'Arceus (normal)',
        'type': [PokemonType.Normal],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.01,
        'name': 'Arceus (fire)',
        'type': [PokemonType.Fire],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.02,
        'name': 'Arceus (water)',
        'type': [PokemonType.Water],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.03,
        'name': 'Arceus (electric)',
        'type': [PokemonType.Electric],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.04,
        'name': 'Arceus (grass)',
        'type': [PokemonType.Grass],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.05,
        'name': 'Arceus (ice)',
        'type': [PokemonType.Ice],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.06,
        'name': 'Arceus (fighting)',
        'type': [PokemonType.Fighting],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.07,
        'name': 'Arceus (poison)',
        'type': [PokemonType.Poison],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.08,
        'name': 'Arceus (ground)',
        'type': [PokemonType.Ground],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.09,
        'name': 'Arceus (flying)',
        'type': [PokemonType.Flying],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.10,
        'name': 'Arceus (psychic)',
        'type': [PokemonType.Psychic],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.11,
        'name': 'Arceus (bug)',
        'type': [PokemonType.Bug],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.12,
        'name': 'Arceus (rock)',
        'type': [PokemonType.Rock],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.13,
        'name': 'Arceus (ghost)',
        'type': [PokemonType.Ghost],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.14,
        'name': 'Arceus (dragon)',
        'type': [PokemonType.Dragon],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.15,
        'name': 'Arceus (dark)',
        'type': [PokemonType.Dark],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.16,
        'name': 'Arceus (steel)',
        'type': [PokemonType.Steel],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 493.17,
        'name': 'Arceus (fairy)',
        'type': [PokemonType.Fairy],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 324,
        'catchRate': 3,
        'base': {
            'hitpoints': 120,
            'attack': 120,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 120,
            'speed': 120,
        },
    },
    {
        'id': 494,
        'name': 'Victini',
        'type': [PokemonType.Psychic, PokemonType.Fire],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 100,
            'attack': 100,
            'specialAttack': 100,
            'defense': 100,
            'specialDefense': 100,
            'speed': 100,
        },
    },
    {
        'id': 495,
        'name': 'Snivy',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Snivy', 'Servine', 17)],
        'base': {
            'hitpoints': 45,
            'attack': 45,
            'specialAttack': 45,
            'defense': 55,
            'specialDefense': 55,
            'speed': 63,
        },
    },
    {
        'id': 496,
        'name': 'Servine',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 145,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Servine', 'Serperior', 36)],
        'base': {
            'hitpoints': 60,
            'attack': 60,
            'specialAttack': 60,
            'defense': 75,
            'specialDefense': 75,
            'speed': 83,
        },
    },
    {
        'id': 497,
        'name': 'Serperior',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 238,
        'catchRate': 45,
        'base': {
            'hitpoints': 75,
            'attack': 75,
            'specialAttack': 75,
            'defense': 95,
            'specialDefense': 95,
            'speed': 113,
        },
    },
    {
        'id': 498,
        'name': 'Tepig',
        'type': [PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Tepig', 'Pignite', 17)],
        'base': {
            'hitpoints': 65,
            'attack': 63,
            'specialAttack': 45,
            'defense': 45,
            'specialDefense': 45,
            'speed': 45,
        },
    },
    {
        'id': 499,
        'name': 'Pignite',
        'type': [PokemonType.Fire, PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 146,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Pignite', 'Emboar', 36)],
        'base': {
            'hitpoints': 90,
            'attack': 93,
            'specialAttack': 70,
            'defense': 55,
            'specialDefense': 55,
            'speed': 55,
        },
    },
    {
        'id': 500,
        'name': 'Emboar',
        'type': [PokemonType.Fire, PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 238,
        'catchRate': 45,
        'base': {
            'hitpoints': 110,
            'attack': 123,
            'specialAttack': 100,
            'defense': 65,
            'specialDefense': 65,
            'speed': 65,
        },
    },
    {
        'id': 501,
        'name': 'Oshawott',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Oshawott', 'Dewott', 17)],
        'base': {
            'hitpoints': 55,
            'attack': 55,
            'specialAttack': 63,
            'defense': 45,
            'specialDefense': 45,
            'speed': 45,
        },
    },
    {
        'id': 502,
        'name': 'Dewott',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 145,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Dewott', 'Samurott', 36)],
        'base': {
            'hitpoints': 75,
            'attack': 75,
            'specialAttack': 83,
            'defense': 60,
            'specialDefense': 60,
            'speed': 60,
        },
    },
    {
        'id': 503,
        'name': 'Samurott',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 238,
        'catchRate': 45,
        'base': {
            'hitpoints': 95,
            'attack': 100,
            'specialAttack': 108,
            'defense': 85,
            'specialDefense': 70,
            'speed': 70,
        },
    },
    {
        'id': 504,
        'name': 'Patrat',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 51,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Patrat', 'Watchog', 20)],
        'base': {
            'hitpoints': 45,
            'attack': 55,
            'specialAttack': 35,
            'defense': 39,
            'specialDefense': 39,
            'speed': 42,
        },
    },
    {
        'id': 505,
        'name': 'Watchog',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 147,
        'catchRate': 255,
        'base': {
            'hitpoints': 60,
            'attack': 85,
            'specialAttack': 60,
            'defense': 69,
            'specialDefense': 69,
            'speed': 77,
        },
    },
    {
        'id': 506,
        'name': 'Lillipup',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 55,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Lillipup', 'Herdier', 16)],
        'base': {
            'hitpoints': 45,
            'attack': 60,
            'specialAttack': 25,
            'defense': 45,
            'specialDefense': 45,
            'speed': 55,
        },
    },
    {
        'id': 507,
        'name': 'Herdier',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 130,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Herdier', 'Stoutland', 32)],
        'base': {
            'hitpoints': 65,
            'attack': 80,
            'specialAttack': 35,
            'defense': 65,
            'specialDefense': 65,
            'speed': 60,
        },
    },
    {
        'id': 508,
        'name': 'Stoutland',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 225,
        'catchRate': 45,
        'base': {
            'hitpoints': 85,
            'attack': 110,
            'specialAttack': 45,
            'defense': 90,
            'specialDefense': 90,
            'speed': 80,
        },
    },
    {
        'id': 509,
        'name': 'Purrloin',
        'type': [PokemonType.Dark],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Purrloin', 'Liepard', 20)],
        'base': {
            'hitpoints': 41,
            'attack': 50,
            'specialAttack': 50,
            'defense': 37,
            'specialDefense': 37,
            'speed': 66,
        },
    },
    {
        'id': 510,
        'name': 'Liepard',
        'type': [PokemonType.Dark],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 156,
        'catchRate': 90,
        'base': {
            'hitpoints': 64,
            'attack': 88,
            'specialAttack': 88,
            'defense': 50,
            'specialDefense': 50,
            'speed': 106,
        },
    },
    {
        'id': 511,
        'name': 'Pansage',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 63,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Pansage', 'Simisage', GameConstants.StoneType.Leaf_stone)],
        'base': {
            'hitpoints': 50,
            'attack': 53,
            'specialAttack': 53,
            'defense': 48,
            'specialDefense': 48,
            'speed': 64,
        },
    },
    {
        'id': 512,
        'name': 'Simisage',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 174,
        'catchRate': 75,
        'base': {
            'hitpoints': 75,
            'attack': 98,
            'specialAttack': 98,
            'defense': 63,
            'specialDefense': 63,
            'speed': 101,
        },
    },
    {
        'id': 513,
        'name': 'Pansear',
        'type': [PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 63,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Pansear', 'Simisear', GameConstants.StoneType.Fire_stone)],
        'base': {
            'hitpoints': 50,
            'attack': 53,
            'specialAttack': 53,
            'defense': 48,
            'specialDefense': 48,
            'speed': 64,
        },
    },
    {
        'id': 514,
        'name': 'Simisear',
        'type': [PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 174,
        'catchRate': 75,
        'base': {
            'hitpoints': 75,
            'attack': 98,
            'specialAttack': 98,
            'defense': 63,
            'specialDefense': 63,
            'speed': 101,
        },
    },
    {
        'id': 515,
        'name': 'Panpour',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 63,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Panpour', 'Simipour', GameConstants.StoneType.Water_stone)],
        'base': {
            'hitpoints': 50,
            'attack': 53,
            'specialAttack': 53,
            'defense': 48,
            'specialDefense': 48,
            'speed': 64,
        },
    },
    {
        'id': 516,
        'name': 'Simipour',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 174,
        'catchRate': 75,
        'base': {
            'hitpoints': 75,
            'attack': 98,
            'specialAttack': 98,
            'defense': 63,
            'specialDefense': 63,
            'speed': 101,
        },
    },
    {
        'id': 517,
        'name': 'Munna',
        'type': [PokemonType.Psychic],
        'eggCycles': 10,
        'levelType': 4,
        'exp': 58,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Munna', 'Musharna', GameConstants.StoneType.Moon_stone)],
        'base': {
            'hitpoints': 76,
            'attack': 25,
            'specialAttack': 67,
            'defense': 45,
            'specialDefense': 55,
            'speed': 24,
        },
    },
    {
        'id': 518,
        'name': 'Musharna',
        'type': [PokemonType.Psychic],
        'eggCycles': 10,
        'levelType': 4,
        'exp': 170,
        'catchRate': 75,
        'base': {
            'hitpoints': 116,
            'attack': 55,
            'specialAttack': 107,
            'defense': 85,
            'specialDefense': 95,
            'speed': 29,
        },
    },
    {
        'id': 519,
        'name': 'Pidove',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 53,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Pidove', 'Tranquill', 21)],
        'base': {
            'hitpoints': 50,
            'attack': 55,
            'specialAttack': 36,
            'defense': 50,
            'specialDefense': 30,
            'speed': 43,
        },
    },
    {
        'id': 520,
        'name': 'Tranquill',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 125,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Tranquill', 'Unfezant', 32)],
        'base': {
            'hitpoints': 62,
            'attack': 77,
            'specialAttack': 50,
            'defense': 62,
            'specialDefense': 42,
            'speed': 65,
        },
    },
    {
        'id': 521,
        'name': 'Unfezant',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 220,
        'catchRate': 45,
        'base': {
            'hitpoints': 80,
            'attack': 115,
            'specialAttack': 65,
            'defense': 80,
            'specialDefense': 55,
            'speed': 93,
        },
    },
    {
        'id': 522,
        'name': 'Blitzle',
        'type': [PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 59,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Blitzle', 'Zebstrika', 27)],
        'base': {
            'hitpoints': 45,
            'attack': 60,
            'specialAttack': 50,
            'defense': 32,
            'specialDefense': 32,
            'speed': 76,
        },
    },
    {
        'id': 523,
        'name': 'Zebstrika',
        'type': [PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 174,
        'catchRate': 75,
        'base': {
            'hitpoints': 75,
            'attack': 100,
            'specialAttack': 80,
            'defense': 63,
            'specialDefense': 63,
            'speed': 116,
        },
    },
    {
        'id': 524,
        'name': 'Roggenrola',
        'type': [PokemonType.Rock],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Roggenrola', 'Boldore', 25)],
        'base': {
            'hitpoints': 55,
            'attack': 75,
            'specialAttack': 25,
            'defense': 85,
            'specialDefense': 25,
            'speed': 15,
        },
    },
    {
        'id': 525,
        'name': 'Boldore',
        'type': [PokemonType.Rock],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 137,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Boldore', 'Gigalith', GameConstants.StoneType.Trade_stone)],
        'base': {
            'hitpoints': 70,
            'attack': 105,
            'specialAttack': 50,
            'defense': 105,
            'specialDefense': 40,
            'speed': 20,
        },
    },
    {
        'id': 526,
        'name': 'Gigalith',
        'type': [PokemonType.Rock],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 232,
        'catchRate': 45,
        'base': {
            'hitpoints': 85,
            'attack': 135,
            'specialAttack': 60,
            'defense': 130,
            'specialDefense': 80,
            'speed': 25,
        },
    },
    {
        'id': 527,
        'name': 'Woobat',
        'type': [PokemonType.Psychic, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Woobat', 'Swoobat', GameConstants.StoneType.Soothe_bell)],
        'base': {
            'hitpoints': 65,
            'attack': 45,
            'specialAttack': 55,
            'defense': 43,
            'specialDefense': 43,
            'speed': 72,
        },
    },
    {
        'id': 528,
        'name': 'Swoobat',
        'type': [PokemonType.Psychic, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 149,
        'catchRate': 45,
        'base': {
            'hitpoints': 67,
            'attack': 57,
            'specialAttack': 77,
            'defense': 55,
            'specialDefense': 55,
            'speed': 114,
        },
    },
    {
        'id': 529,
        'name': 'Drilbur',
        'type': [PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Drilbur', 'Excadrill', 31)],
        'base': {
            'hitpoints': 60,
            'attack': 85,
            'specialAttack': 30,
            'defense': 40,
            'specialDefense': 45,
            'speed': 68,
        },
    },
    {
        'id': 530,
        'name': 'Excadrill',
        'type': [PokemonType.Ground, PokemonType.Steel],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 178,
        'catchRate': 60,
        'base': {
            'hitpoints': 110,
            'attack': 135,
            'specialAttack': 50,
            'defense': 60,
            'specialDefense': 65,
            'speed': 88,
        },
    },
    {
        'id': 531,
        'name': 'Audino',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': 4,
        'exp': 390,
        'catchRate': 255,
        'base': {
            'hitpoints': 103,
            'attack': 60,
            'specialAttack': 60,
            'defense': 86,
            'specialDefense': 86,
            'speed': 50,
        },
    },
    {
        'id': 532,
        'name': 'Timburr',
        'type': [PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 61,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Timburr', 'Gurdurr', 25)],
        'base': {
            'hitpoints': 75,
            'attack': 80,
            'specialAttack': 25,
            'defense': 55,
            'specialDefense': 35,
            'speed': 35,
        },
    },
    {
        'id': 533,
        'name': 'Gurdurr',
        'type': [PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 90,
        'evolutions': [new StoneEvolution('Gurdurr', 'Conkeldurr', GameConstants.StoneType.Trade_stone)],
        'base': {
            'hitpoints': 85,
            'attack': 105,
            'specialAttack': 40,
            'defense': 85,
            'specialDefense': 50,
            'speed': 40,
        },
    },
    {
        'id': 534,
        'name': 'Conkeldurr',
        'type': [PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 227,
        'catchRate': 45,
        'base': {
            'hitpoints': 105,
            'attack': 140,
            'specialAttack': 55,
            'defense': 95,
            'specialDefense': 65,
            'speed': 45,
        },
    },
    {
        'id': 535,
        'name': 'Tympole',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 59,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Tympole', 'Palpitoad', 25)],
        'base': {
            'hitpoints': 50,
            'attack': 50,
            'specialAttack': 50,
            'defense': 40,
            'specialDefense': 40,
            'speed': 64,
        },
    },
    {
        'id': 536,
        'name': 'Palpitoad',
        'type': [PokemonType.Water, PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 134,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Palpitoad', 'Seismitoad', 36)],
        'base': {
            'hitpoints': 75,
            'attack': 65,
            'specialAttack': 65,
            'defense': 55,
            'specialDefense': 55,
            'speed': 69,
        },
    },
    {
        'id': 537,
        'name': 'Seismitoad',
        'type': [PokemonType.Water, PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 229,
        'catchRate': 45,
        'base': {
            'hitpoints': 105,
            'attack': 95,
            'specialAttack': 85,
            'defense': 75,
            'specialDefense': 75,
            'speed': 74,
        },
    },
    {
        'id': 538,
        'name': 'Throh',
        'type': [PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 163,
        'catchRate': 45,
        'base': {
            'hitpoints': 120,
            'attack': 100,
            'specialAttack': 30,
            'defense': 85,
            'specialDefense': 85,
            'speed': 45,
        },
    },
    {
        'id': 539,
        'name': 'Sawk',
        'type': [PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 163,
        'catchRate': 45,
        'base': {
            'hitpoints': 75,
            'attack': 125,
            'specialAttack': 30,
            'defense': 75,
            'specialDefense': 75,
            'speed': 85,
        },
    },
    {
        'id': 540,
        'name': 'Sewaddle',
        'type': [PokemonType.Bug, PokemonType.Grass],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Sewaddle', 'Swadloon', 20)],
        'base': {
            'hitpoints': 45,
            'attack': 53,
            'specialAttack': 40,
            'defense': 70,
            'specialDefense': 60,
            'speed': 42,
        },
    },
    {
        'id': 541,
        'name': 'Swadloon',
        'type': [PokemonType.Bug, PokemonType.Grass],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 133,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Swadloon', 'Leavanny', GameConstants.StoneType.Soothe_bell)],
        'base': {
            'hitpoints': 55,
            'attack': 63,
            'specialAttack': 50,
            'defense': 90,
            'specialDefense': 80,
            'speed': 42,
        },
    },
    {
        'id': 542,
        'name': 'Leavanny',
        'type': [PokemonType.Bug, PokemonType.Grass],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 225,
        'catchRate': 45,
        'base': {
            'hitpoints': 75,
            'attack': 103,
            'specialAttack': 70,
            'defense': 80,
            'specialDefense': 80,
            'speed': 92,
        },
    },
    {
        'id': 543,
        'name': 'Venipede',
        'type': [PokemonType.Bug, PokemonType.Poison],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 52,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Venipede', 'Whirlipede', 22)],
        'base': {
            'hitpoints': 30,
            'attack': 45,
            'specialAttack': 30,
            'defense': 59,
            'specialDefense': 39,
            'speed': 57,
        },
    },
    {
        'id': 544,
        'name': 'Whirlipede',
        'type': [PokemonType.Bug, PokemonType.Poison],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 126,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Whirlipede', 'Scolipede', 30)],
        'base': {
            'hitpoints': 40,
            'attack': 55,
            'specialAttack': 40,
            'defense': 99,
            'specialDefense': 79,
            'speed': 47,
        },
    },
    {
        'id': 545,
        'name': 'Scolipede',
        'type': [PokemonType.Bug, PokemonType.Poison],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 218,
        'catchRate': 45,
        'base': {
            'hitpoints': 60,
            'attack': 100,
            'specialAttack': 55,
            'defense': 89,
            'specialDefense': 69,
            'speed': 112,
        },
    },
    {
        'id': 546,
        'name': 'Cottonee',
        'type': [PokemonType.Grass, PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Cottonee', 'Whimsicott', GameConstants.StoneType.Sun_stone)],
        'base': {
            'hitpoints': 40,
            'attack': 27,
            'specialAttack': 37,
            'defense': 60,
            'specialDefense': 50,
            'speed': 66,
        },
    },
    {
        'id': 547,
        'name': 'Whimsicott',
        'type': [PokemonType.Grass, PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 75,
        'base': {
            'hitpoints': 60,
            'attack': 67,
            'specialAttack': 77,
            'defense': 85,
            'specialDefense': 75,
            'speed': 116,
        },
    },
    {
        'id': 548,
        'name': 'Petilil',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Petilil', 'Lilligant', GameConstants.StoneType.Sun_stone)],
        'base': {
            'hitpoints': 45,
            'attack': 35,
            'specialAttack': 70,
            'defense': 50,
            'specialDefense': 50,
            'speed': 30,
        },
    },
    {
        'id': 549,
        'name': 'Lilligant',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 75,
        'base': {
            'hitpoints': 70,
            'attack': 60,
            'specialAttack': 110,
            'defense': 75,
            'specialDefense': 75,
            'speed': 90,
        },
    },
    {
        'id': 550,
        'name': 'Basculin (Red-Striped)',
        'type': [PokemonType.Water],
        'eggCycles': 40,
        'levelType': LevelType.mediumfast,
        'exp': 161,
        'catchRate': 25,
        'base': {
            'hitpoints': 70,
            'attack': 92,
            'specialAttack': 80,
            'defense': 65,
            'specialDefense': 55,
            'speed': 98,
        },
    },
    {
        'id': 550.01,
        'name': 'Basculin (Blue-Striped)',
        'type': [PokemonType.Water],
        'eggCycles': 40,
        'levelType': LevelType.mediumfast,
        'exp': 161,
        'catchRate': 25,
        'base': {
            'hitpoints': 70,
            'attack': 92,
            'specialAttack': 80,
            'defense': 65,
            'specialDefense': 55,
            'speed': 98,
        },
    },
    {
        'id': 551,
        'name': 'Sandile',
        'type': [PokemonType.Ground, PokemonType.Dark],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 58,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Sandile', 'Krokorok', 29)],
        'base': {
            'hitpoints': 50,
            'attack': 72,
            'specialAttack': 35,
            'defense': 35,
            'specialDefense': 35,
            'speed': 65,
        },
    },
    {
        'id': 552,
        'name': 'Krokorok',
        'type': [PokemonType.Ground, PokemonType.Dark],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 123,
        'catchRate': 90,
        'evolutions': [new LevelEvolution('Krokorok', 'Krookodile', 40)],
        'base': {
            'hitpoints': 60,
            'attack': 82,
            'specialAttack': 45,
            'defense': 45,
            'specialDefense': 45,
            'speed': 74,
        },
    },
    {
        'id': 553,
        'name': 'Krookodile',
        'type': [PokemonType.Ground, PokemonType.Dark],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 234,
        'catchRate': 45,
        'base': {
            'hitpoints': 95,
            'attack': 117,
            'specialAttack': 65,
            'defense': 80,
            'specialDefense': 70,
            'speed': 92,
        },
    },
    {
        'id': 554,
        'name': 'Darumaka',
        'type': [PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 63,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Darumaka', 'Darmanitan', 35)],
        'base': {
            'hitpoints': 70,
            'attack': 90,
            'specialAttack': 15,
            'defense': 45,
            'specialDefense': 45,
            'speed': 50,
        },
    },
    {
        'id': 555,
        'name': 'Darmanitan',
        'type': [PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 189,
        'catchRate': 60,
        'base': {
            'hitpoints': 105,
            'attack': 140,
            'specialAttack': 30,
            'defense': 55,
            'specialDefense': 55,
            'speed': 95,
        },
    },
    {
        'id': 556,
        'name': 'Maractus',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 161,
        'catchRate': 255,
        'base': {
            'hitpoints': 75,
            'attack': 86,
            'specialAttack': 106,
            'defense': 67,
            'specialDefense': 67,
            'speed': 60,
        },
    },
    {
        'id': 557,
        'name': 'Dwebble',
        'type': [PokemonType.Bug, PokemonType.Rock],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Dwebble', 'Crustle', 34)],
        'base': {
            'hitpoints': 50,
            'attack': 65,
            'specialAttack': 35,
            'defense': 85,
            'specialDefense': 35,
            'speed': 55,
        },
    },
    {
        'id': 558,
        'name': 'Crustle',
        'type': [PokemonType.Bug, PokemonType.Rock],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 75,
        'base': {
            'hitpoints': 70,
            'attack': 105,
            'specialAttack': 65,
            'defense': 125,
            'specialDefense': 75,
            'speed': 45,
        },
    },
    {
        'id': 559,
        'name': 'Scraggy',
        'type': [PokemonType.Dark, PokemonType.Fighting],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 70,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Scraggy', 'Scrafty', 39)],
        'base': {
            'hitpoints': 50,
            'attack': 75,
            'specialAttack': 35,
            'defense': 70,
            'specialDefense': 70,
            'speed': 48,
        },
    },
    {
        'id': 560,
        'name': 'Scrafty',
        'type': [PokemonType.Dark, PokemonType.Fighting],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 171,
        'catchRate': 90,
        'base': {
            'hitpoints': 65,
            'attack': 90,
            'specialAttack': 45,
            'defense': 115,
            'specialDefense': 115,
            'speed': 58,
        },
    },
    {
        'id': 561,
        'name': 'Sigilyph',
        'type': [PokemonType.Psychic, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'catchRate': 45,
        'base': {
            'hitpoints': 72,
            'attack': 58,
            'specialAttack': 103,
            'defense': 80,
            'specialDefense': 80,
            'speed': 97,
        },
    },
    {
        'id': 562,
        'name': 'Yamask',
        'type': [PokemonType.Ghost],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Yamask', 'Cofagrigus', 34)],
        'base': {
            'hitpoints': 38,
            'attack': 30,
            'specialAttack': 55,
            'defense': 85,
            'specialDefense': 65,
            'speed': 30,
        },
    },
    {
        'id': 563,
        'name': 'Cofagrigus',
        'type': [PokemonType.Ghost],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 169,
        'catchRate': 90,
        'base': {
            'hitpoints': 58,
            'attack': 50,
            'specialAttack': 95,
            'defense': 145,
            'specialDefense': 105,
            'speed': 30,
        },
    },
    {
        'id': 564,
        'name': 'Tirtouga',
        'type': [PokemonType.Water, PokemonType.Rock],
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 71,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Tirtouga', 'Carracosta', 37)],
        'base': {
            'hitpoints': 54,
            'attack': 78,
            'specialAttack': 53,
            'defense': 103,
            'specialDefense': 45,
            'speed': 22,
        },
    },
    {
        'id': 565,
        'name': 'Carracosta',
        'type': [PokemonType.Water, PokemonType.Rock],
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 45,
        'base': {
            'hitpoints': 74,
            'attack': 108,
            'specialAttack': 83,
            'defense': 133,
            'specialDefense': 65,
            'speed': 32,
        },
    },
    {
        'id': 566,
        'name': 'Archen',
        'type': [PokemonType.Rock, PokemonType.Flying],
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 71,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Archen', 'Archeops', 37)],
        'base': {
            'hitpoints': 55,
            'attack': 112,
            'specialAttack': 74,
            'defense': 45,
            'specialDefense': 45,
            'speed': 70,
        },
    },
    {
        'id': 567,
        'name': 'Archeops',
        'type': [PokemonType.Rock, PokemonType.Flying],
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 177,
        'catchRate': 45,
        'base': {
            'hitpoints': 75,
            'attack': 140,
            'specialAttack': 112,
            'defense': 65,
            'specialDefense': 65,
            'speed': 110,
        },
    },
    {
        'id': 568,
        'name': 'Trubbish',
        'type': [PokemonType.Poison],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Trubbish', 'Garbodor', 36)],
        'base': {
            'hitpoints': 50,
            'attack': 50,
            'specialAttack': 40,
            'defense': 62,
            'specialDefense': 62,
            'speed': 65,
        },
    },
    {
        'id': 569,
        'name': 'Garbodor',
        'type': [PokemonType.Poison],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 60,
        'base': {
            'hitpoints': 80,
            'attack': 95,
            'specialAttack': 60,
            'defense': 82,
            'specialDefense': 82,
            'speed': 75,
        },
    },
    {
        'id': 570,
        'name': 'Zorua',
        'type': [PokemonType.Dark],
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 66,
        'catchRate': 75,
        'evolutions': [new LevelEvolution('Zorua', 'Zoroark', 30)],
        'base': {
            'hitpoints': 40,
            'attack': 65,
            'specialAttack': 80,
            'defense': 40,
            'specialDefense': 40,
            'speed': 65,
        },
    },
    {
        'id': 571,
        'name': 'Zoroark',
        'type': [PokemonType.Dark],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 179,
        'catchRate': 45,
        'base': {
            'hitpoints': 60,
            'attack': 105,
            'specialAttack': 120,
            'defense': 60,
            'specialDefense': 60,
            'speed': 105,
        },
    },
    {
        'id': 572,
        'name': 'Minccino',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': 4,
        'exp': 60,
        'catchRate': 255,
        'evolutions': [new StoneEvolution('Minccino', 'Cinccino', GameConstants.StoneType.None)],
        'base': {
            'hitpoints': 55,
            'attack': 50,
            'specialAttack': 40,
            'defense': 40,
            'specialDefense': 40,
            'speed': 75,
        },
    },
    {
        'id': 573,
        'name': 'Cinccino',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': 4,
        'exp': 165,
        'catchRate': 60,
        'base': {
            'hitpoints': 75,
            'attack': 95,
            'specialAttack': 65,
            'defense': 60,
            'specialDefense': 60,
            'speed': 115,
        },
    },
    {
        'id': 574,
        'name': 'Gothita',
        'type': [PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 58,
        'catchRate': 200,
        'evolutions': [new LevelEvolution('Gothita', 'Gothorita', 32)],
        'base': {
            'hitpoints': 45,
            'attack': 30,
            'specialAttack': 55,
            'defense': 50,
            'specialDefense': 65,
            'speed': 45,
        },
    },
    {
        'id': 575,
        'name': 'Gothorita',
        'type': [PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 137,
        'catchRate': 100,
        'evolutions': [new LevelEvolution('Gothorita', 'Gothitelle', 41)],
        'base': {
            'hitpoints': 60,
            'attack': 45,
            'specialAttack': 75,
            'defense': 70,
            'specialDefense': 85,
            'speed': 55,
        },
    },
    {
        'id': 576,
        'name': 'Gothitelle',
        'type': [PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 221,
        'catchRate': 50,
        'base': {
            'hitpoints': 70,
            'attack': 55,
            'specialAttack': 95,
            'defense': 95,
            'specialDefense': 110,
            'speed': 65,
        },
    },
    {
        'id': 577,
        'name': 'Solosis',
        'type': [PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 58,
        'catchRate': 200,
        'evolutions': [new LevelEvolution('Solosis', 'Duosion', 32)],
        'base': {
            'hitpoints': 45,
            'attack': 30,
            'specialAttack': 105,
            'defense': 40,
            'specialDefense': 50,
            'speed': 20,
        },
    },
    {
        'id': 578,
        'name': 'Duosion',
        'type': [PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 130,
        'catchRate': 100,
        'evolutions': [new LevelEvolution('Duosion', 'Reuniclus', 41)],
        'base': {
            'hitpoints': 65,
            'attack': 40,
            'specialAttack': 125,
            'defense': 50,
            'specialDefense': 60,
            'speed': 30,
        },
    },
    {
        'id': 579,
        'name': 'Reuniclus',
        'type': [PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 221,
        'catchRate': 50,
        'base': {
            'hitpoints': 110,
            'attack': 65,
            'specialAttack': 125,
            'defense': 75,
            'specialDefense': 85,
            'speed': 30,
        },
    },
    {
        'id': 580,
        'name': 'Ducklett',
        'type': [PokemonType.Water, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Ducklett', 'Swanna', 35)],
        'base': {
            'hitpoints': 62,
            'attack': 44,
            'specialAttack': 44,
            'defense': 50,
            'specialDefense': 50,
            'speed': 55,
        },
    },
    {
        'id': 581,
        'name': 'Swanna',
        'type': [PokemonType.Water, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 45,
        'base': {
            'hitpoints': 75,
            'attack': 87,
            'specialAttack': 87,
            'defense': 63,
            'specialDefense': 63,
            'speed': 98,
        },
    },
    {
        'id': 582,
        'name': 'Vanillite',
        'type': [PokemonType.Ice],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 61,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Vanillite', 'Vanillish', 35)],
        'base': {
            'hitpoints': 36,
            'attack': 50,
            'specialAttack': 65,
            'defense': 50,
            'specialDefense': 60,
            'speed': 44,
        },
    },
    {
        'id': 583,
        'name': 'Vanillish',
        'type': [PokemonType.Ice],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 138,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Vanillish', 'Vanilluxe', 47)],
        'base': {
            'hitpoints': 51,
            'attack': 65,
            'specialAttack': 80,
            'defense': 65,
            'specialDefense': 75,
            'speed': 59,
        },
    },
    {
        'id': 584,
        'name': 'Vanilluxe',
        'type': [PokemonType.Ice],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 241,
        'catchRate': 45,
        'base': {
            'hitpoints': 71,
            'attack': 95,
            'specialAttack': 110,
            'defense': 85,
            'specialDefense': 95,
            'speed': 79,
        },
    },
    {
        'id': 585,
        'name': 'Deerling (Spring)',
        'type': [PokemonType.Normal, PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 67,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Deerling (Spring)', 'Sawsbuck (Spring)', 34)],
        'base': {
            'hitpoints': 60,
            'attack': 60,
            'specialAttack': 40,
            'defense': 50,
            'specialDefense': 50,
            'speed': 75,
        },
    },
    {
        'id': 585.01,
        'name': 'Deerling (Summer)',
        'type': [PokemonType.Normal, PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 67,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Deerling (Summer)', 'Sawsbuck (Summer)', 34)],
        'base': {
            'hitpoints': 60,
            'attack': 60,
            'specialAttack': 40,
            'defense': 50,
            'specialDefense': 50,
            'speed': 75,
        },
    },
    {
        'id': 585.02,
        'name': 'Deerling (Autumn)',
        'type': [PokemonType.Normal, PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 67,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Deerling (Autumn)', 'Sawsbuck (Autumn)', 34)],
        'base': {
            'hitpoints': 60,
            'attack': 60,
            'specialAttack': 40,
            'defense': 50,
            'specialDefense': 50,
            'speed': 75,
        },
    },
    {
        'id': 585.03,
        'name': 'Deerling (Winter)',
        'type': [PokemonType.Normal, PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 67,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Deerling (Winter)', 'Sawsbuck (Winter)', 34)],
        'base': {
            'hitpoints': 60,
            'attack': 60,
            'specialAttack': 40,
            'defense': 50,
            'specialDefense': 50,
            'speed': 75,
        },
    },
    {
        'id': 586,
        'name': 'Sawsbuck (Spring)',
        'type': [PokemonType.Normal, PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 75,
        'base': {
            'hitpoints': 80,
            'attack': 100,
            'specialAttack': 60,
            'defense': 70,
            'specialDefense': 70,
            'speed': 95,
        },
    },
    {
        'id': 586.01,
        'name': 'Sawsbuck (Summer)',
        'type': [PokemonType.Normal, PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 75,
        'base': {
            'hitpoints': 80,
            'attack': 100,
            'specialAttack': 60,
            'defense': 70,
            'specialDefense': 70,
            'speed': 95,
        },
    },
    {
        'id': 586.02,
        'name': 'Sawsbuck (Autumn)',
        'type': [PokemonType.Normal, PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 75,
        'base': {
            'hitpoints': 80,
            'attack': 100,
            'specialAttack': 60,
            'defense': 70,
            'specialDefense': 70,
            'speed': 95,
        },
    },
    {
        'id': 586.03,
        'name': 'Sawsbuck (Winter)',
        'type': [PokemonType.Normal, PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 75,
        'base': {
            'hitpoints': 80,
            'attack': 100,
            'specialAttack': 60,
            'defense': 70,
            'specialDefense': 70,
            'speed': 95,
        },
    },
    {
        'id': 587,
        'name': 'Emolga',
        'type': [PokemonType.Electric, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 150,
        'catchRate': 200,
        'base': {
            'hitpoints': 55,
            'attack': 75,
            'specialAttack': 75,
            'defense': 60,
            'specialDefense': 60,
            'speed': 103,
        },
    },
    {
        'id': 588,
        'name': 'Karrablast',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 63,
        'catchRate': 200,
        'evolutions': [new StoneEvolution('Karrablast', 'Escavalier', GameConstants.StoneType.Trade_stone)],
        'base': {
            'hitpoints': 50,
            'attack': 75,
            'specialAttack': 40,
            'defense': 45,
            'specialDefense': 45,
            'speed': 60,
        },
    },
    {
        'id': 589,
        'name': 'Escavalier',
        'type': [PokemonType.Bug, PokemonType.Steel],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 75,
        'base': {
            'hitpoints': 70,
            'attack': 135,
            'specialAttack': 60,
            'defense': 105,
            'specialDefense': 105,
            'speed': 20,
        },
    },
    {
        'id': 590,
        'name': 'Foongus',
        'type': [PokemonType.Grass, PokemonType.Poison],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 59,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Foongus', 'Amoonguss', 39)],
        'base': {
            'hitpoints': 69,
            'attack': 55,
            'specialAttack': 55,
            'defense': 45,
            'specialDefense': 55,
            'speed': 15,
        },
    },
    {
        'id': 591,
        'name': 'Amoonguss',
        'type': [PokemonType.Grass, PokemonType.Poison],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 162,
        'catchRate': 75,
        'base': {
            'hitpoints': 114,
            'attack': 85,
            'specialAttack': 85,
            'defense': 70,
            'specialDefense': 80,
            'speed': 30,
        },
    },
    {
        'id': 592,
        'name': 'Frillish',
        'type': [PokemonType.Water, PokemonType.Ghost],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 67,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Frillish', 'Jellicent', 40)],
        'base': {
            'hitpoints': 55,
            'attack': 40,
            'specialAttack': 65,
            'defense': 50,
            'specialDefense': 85,
            'speed': 40,
        },
    },
    {
        'id': 593,
        'name': 'Jellicent',
        'type': [PokemonType.Water, PokemonType.Ghost],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 60,
        'base': {
            'hitpoints': 100,
            'attack': 60,
            'specialAttack': 85,
            'defense': 70,
            'specialDefense': 105,
            'speed': 60,
        },
    },
    {
        'id': 594,
        'name': 'Alomomola',
        'type': [PokemonType.Water],
        'eggCycles': 40,
        'levelType': 4,
        'exp': 165,
        'catchRate': 75,
        'base': {
            'hitpoints': 165,
            'attack': 75,
            'specialAttack': 40,
            'defense': 80,
            'specialDefense': 45,
            'speed': 65,
        },
    },
    {
        'id': 595,
        'name': 'Joltik',
        'type': [PokemonType.Bug, PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Joltik', 'Galvantula', 36)],
        'base': {
            'hitpoints': 50,
            'attack': 47,
            'specialAttack': 57,
            'defense': 50,
            'specialDefense': 50,
            'speed': 65,
        },
    },
    {
        'id': 596,
        'name': 'Galvantula',
        'type': [PokemonType.Bug, PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 165,
        'catchRate': 75,
        'base': {
            'hitpoints': 70,
            'attack': 77,
            'specialAttack': 97,
            'defense': 60,
            'specialDefense': 60,
            'speed': 108,
        },
    },
    {
        'id': 597,
        'name': 'Ferroseed',
        'type': [PokemonType.Grass, PokemonType.Steel],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Ferroseed', 'Ferrothorn', 40)],
        'base': {
            'hitpoints': 44,
            'attack': 50,
            'specialAttack': 24,
            'defense': 91,
            'specialDefense': 86,
            'speed': 10,
        },
    },
    {
        'id': 598,
        'name': 'Ferrothorn',
        'type': [PokemonType.Grass, PokemonType.Steel],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 171,
        'catchRate': 90,
        'base': {
            'hitpoints': 74,
            'attack': 94,
            'specialAttack': 54,
            'defense': 131,
            'specialDefense': 116,
            'speed': 20,
        },
    },
    {
        'id': 599,
        'name': 'Klink',
        'type': [PokemonType.Steel],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 60,
        'catchRate': 130,
        'evolutions': [new LevelEvolution('Klink', 'Klang', 38)],
        'base': {
            'hitpoints': 40,
            'attack': 55,
            'specialAttack': 45,
            'defense': 70,
            'specialDefense': 60,
            'speed': 30,
        },
    },
    {
        'id': 600,
        'name': 'Klang',
        'type': [PokemonType.Steel],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 154,
        'catchRate': 60,
        'evolutions': [new LevelEvolution('Klang', 'Klinklang', 49)],
        'base': {
            'hitpoints': 60,
            'attack': 80,
            'specialAttack': 70,
            'defense': 95,
            'specialDefense': 85,
            'speed': 50,
        },
    },
    {
        'id': 601,
        'name': 'Klinklang',
        'type': [PokemonType.Steel],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 234,
        'catchRate': 30,
        'base': {
            'hitpoints': 60,
            'attack': 100,
            'specialAttack': 70,
            'defense': 115,
            'specialDefense': 85,
            'speed': 90,
        },
    },
    {
        'id': 602,
        'name': 'Tynamo',
        'type': [PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 55,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Tynamo', 'Eelektrik', 39)],
        'base': {
            'hitpoints': 35,
            'attack': 55,
            'specialAttack': 45,
            'defense': 40,
            'specialDefense': 40,
            'speed': 60,
        },
    },
    {
        'id': 603,
        'name': 'Eelektrik',
        'type': [PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 142,
        'catchRate': 60,
        'evolutions': [new StoneEvolution('Eelektrik', 'Eelektross', GameConstants.StoneType.Thunder_stone)],
        'base': {
            'hitpoints': 65,
            'attack': 85,
            'specialAttack': 75,
            'defense': 70,
            'specialDefense': 70,
            'speed': 40,
        },
    },
    {
        'id': 604,
        'name': 'Eelektross',
        'type': [PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 232,
        'catchRate': 30,
        'base': {
            'hitpoints': 85,
            'attack': 115,
            'specialAttack': 105,
            'defense': 80,
            'specialDefense': 80,
            'speed': 50,
        },
    },
    {
        'id': 605,
        'name': 'Elgyem',
        'type': [PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 67,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Elgyem', 'Beheeyem', 42)],
        'base': {
            'hitpoints': 55,
            'attack': 55,
            'specialAttack': 85,
            'defense': 55,
            'specialDefense': 55,
            'speed': 30,
        },
    },
    {
        'id': 606,
        'name': 'Beheeyem',
        'type': [PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 90,
        'base': {
            'hitpoints': 75,
            'attack': 75,
            'specialAttack': 125,
            'defense': 75,
            'specialDefense': 95,
            'speed': 40,
        },
    },
    {
        'id': 607,
        'name': 'Litwick',
        'type': [PokemonType.Ghost, PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 55,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Litwick', 'Lampent', 41)],
        'base': {
            'hitpoints': 50,
            'attack': 30,
            'specialAttack': 65,
            'defense': 55,
            'specialDefense': 55,
            'speed': 20,
        },
    },
    {
        'id': 608,
        'name': 'Lampent',
        'type': [PokemonType.Ghost, PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 130,
        'catchRate': 90,
        'evolutions': [new StoneEvolution('Lampent', 'Chandelure', GameConstants.StoneType.None)],
        'base': {
            'hitpoints': 60,
            'attack': 40,
            'specialAttack': 95,
            'defense': 60,
            'specialDefense': 60,
            'speed': 55,
        },
    },
    {
        'id': 609,
        'name': 'Chandelure',
        'type': [PokemonType.Ghost, PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 234,
        'catchRate': 45,
        'base': {
            'hitpoints': 60,
            'attack': 55,
            'specialAttack': 145,
            'defense': 90,
            'specialDefense': 90,
            'speed': 80,
        },
    },
    {
        'id': 610,
        'name': 'Axew',
        'type': [PokemonType.Dragon],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 64,
        'catchRate': 75,
        'evolutions': [new LevelEvolution('Axew', 'Fraxure', 38)],
        'base': {
            'hitpoints': 46,
            'attack': 87,
            'specialAttack': 30,
            'defense': 60,
            'specialDefense': 40,
            'speed': 57,
        },
    },
    {
        'id': 611,
        'name': 'Fraxure',
        'type': [PokemonType.Dragon],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 144,
        'catchRate': 60,
        'evolutions': [new LevelEvolution('Fraxure', 'Haxorus', 48)],
        'base': {
            'hitpoints': 66,
            'attack': 117,
            'specialAttack': 40,
            'defense': 70,
            'specialDefense': 50,
            'speed': 67,
        },
    },
    {
        'id': 612,
        'name': 'Haxorus',
        'type': [PokemonType.Dragon],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 243,
        'catchRate': 45,
        'base': {
            'hitpoints': 76,
            'attack': 147,
            'specialAttack': 60,
            'defense': 90,
            'specialDefense': 70,
            'speed': 97,
        },
    },
    {
        'id': 613,
        'name': 'Cubchoo',
        'type': [PokemonType.Ice],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Cubchoo', 'Beartic', 37)],
        'base': {
            'hitpoints': 55,
            'attack': 70,
            'specialAttack': 60,
            'defense': 40,
            'specialDefense': 40,
            'speed': 40,
        },
    },
    {
        'id': 614,
        'name': 'Beartic',
        'type': [PokemonType.Ice],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 177,
        'catchRate': 60,
        'base': {
            'hitpoints': 95,
            'attack': 130,
            'specialAttack': 70,
            'defense': 80,
            'specialDefense': 80,
            'speed': 50,
        },
    },
    {
        'id': 615,
        'name': 'Cryogonal',
        'type': [PokemonType.Ice],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 180,
        'catchRate': 25,
        'base': {
            'hitpoints': 80,
            'attack': 50,
            'specialAttack': 95,
            'defense': 50,
            'specialDefense': 135,
            'speed': 105,
        },
    },
    {
        'id': 616,
        'name': 'Shelmet',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 200,
        'evolutions': [new StoneEvolution('Shelmet', 'Accelgor', GameConstants.StoneType.Trade_stone)],
        'base': {
            'hitpoints': 50,
            'attack': 40,
            'specialAttack': 40,
            'defense': 85,
            'specialDefense': 65,
            'speed': 25,
        },
    },
    {
        'id': 617,
        'name': 'Accelgor',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 75,
        'base': {
            'hitpoints': 80,
            'attack': 70,
            'specialAttack': 100,
            'defense': 40,
            'specialDefense': 60,
            'speed': 145,
        },
    },
    {
        'id': 618,
        'name': 'Stunfisk',
        'type': [PokemonType.Ground, PokemonType.Electric],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 165,
        'catchRate': 75,
        'base': {
            'hitpoints': 109,
            'attack': 66,
            'specialAttack': 81,
            'defense': 84,
            'specialDefense': 99,
            'speed': 32,
        },
    },
    {
        'id': 619,
        'name': 'Mienfoo',
        'type': [PokemonType.Fighting],
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 70,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Mienfoo', 'Mienshao', 50)],
        'base': {
            'hitpoints': 45,
            'attack': 85,
            'specialAttack': 55,
            'defense': 50,
            'specialDefense': 50,
            'speed': 65,
        },
    },
    {
        'id': 620,
        'name': 'Mienshao',
        'type': [PokemonType.Fighting],
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 179,
        'catchRate': 45,
        'base': {
            'hitpoints': 65,
            'attack': 125,
            'specialAttack': 95,
            'defense': 60,
            'specialDefense': 60,
            'speed': 105,
        },
    },
    {
        'id': 621,
        'name': 'Druddigon',
        'type': [PokemonType.Dragon],
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 45,
        'base': {
            'hitpoints': 77,
            'attack': 120,
            'specialAttack': 60,
            'defense': 90,
            'specialDefense': 90,
            'speed': 48,
        },
    },
    {
        'id': 622,
        'name': 'Golett',
        'type': [PokemonType.Ground, PokemonType.Ghost],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Golett', 'Golurk', 43)],
        'base': {
            'hitpoints': 59,
            'attack': 74,
            'specialAttack': 35,
            'defense': 50,
            'specialDefense': 50,
            'speed': 35,
        },
    },
    {
        'id': 623,
        'name': 'Golurk',
        'type': [PokemonType.Ground, PokemonType.Ghost],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 169,
        'catchRate': 90,
        'base': {
            'hitpoints': 89,
            'attack': 124,
            'specialAttack': 55,
            'defense': 80,
            'specialDefense': 80,
            'speed': 55,
        },
    },
    {
        'id': 624,
        'name': 'Pawniard',
        'type': [PokemonType.Dark, PokemonType.Steel],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 68,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Pawniard', 'Bisharp', 52)],
        'base': {
            'hitpoints': 45,
            'attack': 85,
            'specialAttack': 40,
            'defense': 70,
            'specialDefense': 40,
            'speed': 60,
        },
    },
    {
        'id': 625,
        'name': 'Bisharp',
        'type': [PokemonType.Dark, PokemonType.Steel],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'catchRate': 45,
        'base': {
            'hitpoints': 65,
            'attack': 125,
            'specialAttack': 60,
            'defense': 100,
            'specialDefense': 70,
            'speed': 70,
        },
    },
    {
        'id': 626,
        'name': 'Bouffalant',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'catchRate': 45,
        'base': {
            'hitpoints': 95,
            'attack': 110,
            'specialAttack': 40,
            'defense': 95,
            'specialDefense': 95,
            'speed': 55,
        },
    },
    {
        'id': 627,
        'name': 'Rufflet',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 70,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Rufflet', 'Braviary', 54)],
        'base': {
            'hitpoints': 70,
            'attack': 83,
            'specialAttack': 37,
            'defense': 50,
            'specialDefense': 50,
            'speed': 60,
        },
    },
    {
        'id': 628,
        'name': 'Braviary',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 179,
        'catchRate': 60,
        'base': {
            'hitpoints': 100,
            'attack': 123,
            'specialAttack': 57,
            'defense': 75,
            'specialDefense': 75,
            'speed': 80,
        },
    },
    {
        'id': 629,
        'name': 'Vullaby',
        'type': [PokemonType.Dark, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 74,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Vullaby', 'Mandibuzz', 54)],
        'base': {
            'hitpoints': 70,
            'attack': 55,
            'specialAttack': 45,
            'defense': 75,
            'specialDefense': 65,
            'speed': 60,
        },
    },
    {
        'id': 630,
        'name': 'Mandibuzz',
        'type': [PokemonType.Dark, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 179,
        'catchRate': 60,
        'base': {
            'hitpoints': 110,
            'attack': 65,
            'specialAttack': 55,
            'defense': 105,
            'specialDefense': 95,
            'speed': 80,
        },
    },
    {
        'id': 631,
        'name': 'Heatmor',
        'type': [PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 169,
        'catchRate': 90,
        'base': {
            'hitpoints': 85,
            'attack': 97,
            'specialAttack': 105,
            'defense': 66,
            'specialDefense': 66,
            'speed': 65,
        },
    },
    {
        'id': 632,
        'name': 'Durant',
        'type': [PokemonType.Bug, PokemonType.Steel],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 169,
        'catchRate': 90,
        'base': {
            'hitpoints': 58,
            'attack': 109,
            'specialAttack': 48,
            'defense': 112,
            'specialDefense': 48,
            'speed': 109,
        },
    },
    {
        'id': 633,
        'name': 'Deino',
        'type': [PokemonType.Dark, PokemonType.Dragon],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 60,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Deino', 'Zweilous', 50)],
        'base': {
            'hitpoints': 52,
            'attack': 65,
            'specialAttack': 45,
            'defense': 50,
            'specialDefense': 50,
            'speed': 38,
        },
    },
    {
        'id': 634,
        'name': 'Zweilous',
        'type': [PokemonType.Dark, PokemonType.Dragon],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Zweilous', 'Hydreigon', 64)],
        'base': {
            'hitpoints': 72,
            'attack': 85,
            'specialAttack': 65,
            'defense': 70,
            'specialDefense': 70,
            'speed': 58,
        },
    },
    {
        'id': 635,
        'name': 'Hydreigon',
        'type': [PokemonType.Dark, PokemonType.Dragon],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 45,
        'base': {
            'hitpoints': 92,
            'attack': 105,
            'specialAttack': 125,
            'defense': 90,
            'specialDefense': 90,
            'speed': 98,
        },
    },
    {
        'id': 636,
        'name': 'Larvesta',
        'type': [PokemonType.Bug, PokemonType.Fire],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 72,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Larvesta', 'Volcarona', 59)],
        'base': {
            'hitpoints': 55,
            'attack': 85,
            'specialAttack': 50,
            'defense': 55,
            'specialDefense': 55,
            'speed': 60,
        },
    },
    {
        'id': 637,
        'name': 'Volcarona',
        'type': [PokemonType.Bug, PokemonType.Fire],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 248,
        'catchRate': 15,
        'base': {
            'hitpoints': 85,
            'attack': 60,
            'specialAttack': 135,
            'defense': 65,
            'specialDefense': 105,
            'speed': 100,
        },
    },
    {
        'id': 638,
        'name': 'Cobalion',
        'type': [PokemonType.Steel, PokemonType.Fighting],
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 91,
            'attack': 90,
            'specialAttack': 90,
            'defense': 129,
            'specialDefense': 72,
            'speed': 108,
        },
    },
    {
        'id': 639,
        'name': 'Terrakion',
        'type': [PokemonType.Rock, PokemonType.Fighting],
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 91,
            'attack': 129,
            'specialAttack': 72,
            'defense': 90,
            'specialDefense': 90,
            'speed': 108,
        },
    },
    {
        'id': 640,
        'name': 'Virizion',
        'type': [PokemonType.Grass, PokemonType.Fighting],
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 91,
            'attack': 90,
            'specialAttack': 90,
            'defense': 72,
            'specialDefense': 129,
            'speed': 108,
        },
    },
    {
        'id': 641,
        'name': 'Tornadus',
        'type': [PokemonType.Flying],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 79,
            'attack': 115,
            'specialAttack': 125,
            'defense': 70,
            'specialDefense': 80,
            'speed': 111,
        },
    },
    {
        'id': 641.1,
        'name': 'Tornadus (Therian)',
        'type': [PokemonType.Flying],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 79,
            'attack': 100,
            'specialAttack': 110,
            'defense': 80,
            'specialDefense': 90,
            'speed': 121,
        },
    },
    {
        'id': 642,
        'name': 'Thundurus',
        'type': [PokemonType.Electric, PokemonType.Flying],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 79,
            'attack': 115,
            'specialAttack': 125,
            'defense': 70,
            'specialDefense': 80,
            'speed': 111,
        },
    },
    {
        'id': 642.1,
        'name': 'Thundurus (Therian)',
        'type': [PokemonType.Electric, PokemonType.Flying],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 79,
            'attack': 105,
            'specialAttack': 145,
            'defense': 70,
            'specialDefense': 80,
            'speed': 101,
        },
    },
    {
        'id': 643,
        'name': 'Reshiram',
        'type': [PokemonType.Dragon, PokemonType.Fire],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 3,
        'base': {
            'hitpoints': 100,
            'attack': 120,
            'specialAttack': 150,
            'defense': 100,
            'specialDefense': 120,
            'speed': 90,
        },
    },
    {
        'id': 644,
        'name': 'Zekrom',
        'type': [PokemonType.Dragon, PokemonType.Electric],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 3,
        'base': {
            'hitpoints': 100,
            'attack': 150,
            'specialAttack': 120,
            'defense': 120,
            'specialDefense': 100,
            'speed': 90,
        },
    },
    {
        'id': 645,
        'name': 'Landorus',
        'type': [PokemonType.Ground, PokemonType.Flying],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 89,
            'attack': 125,
            'specialAttack': 115,
            'defense': 90,
            'specialDefense': 80,
            'speed': 101,
        },
    },
    {
        'id': 645.1,
        'name': 'Landorus (Therian)',
        'type': [PokemonType.Ground, PokemonType.Flying],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 89,
            'attack': 145,
            'specialAttack': 105,
            'defense': 90,
            'specialDefense': 80,
            'speed': 91,
        },
    },
    {
        'id': 646,
        'name': 'Kyurem',
        'type': [PokemonType.Dragon, PokemonType.Ice],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 297,
        'catchRate': 3,
        'base': {
            'hitpoints': 125,
            'attack': 130,
            'specialAttack': 130,
            'defense': 90,
            'specialDefense': 90,
            'speed': 95,
        },
    },
    {
        'id': 646.1,
        'name': 'Kyurem (White)',
        'type': [PokemonType.Dragon, PokemonType.Ice],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 297,
        'catchRate': 3,
        'base': {
            'hitpoints': 125,
            'attack': 120,
            'specialAttack': 170,
            'defense': 90,
            'specialDefense': 100,
            'speed': 95,
        },
    },
    {
        'id': 646.2,
        'name': 'Kyurem (Black)',
        'type': [PokemonType.Dragon, PokemonType.Ice],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 297,
        'catchRate': 3,
        'base': {
            'hitpoints': 125,
            'attack': 170,
            'specialAttack': 120,
            'defense': 100,
            'specialDefense': 90,
            'speed': 95,
        },
    },
    {
        'id': 647,
        'name': 'Keldeo',
        'type': [PokemonType.Water, PokemonType.Fighting],
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 91,
            'attack': 72,
            'specialAttack': 129,
            'defense': 90,
            'specialDefense': 90,
            'speed': 108,
        },
    },
    {
        'id': 647.1,
        'name': 'Keldeo (Resolute)',
        'type': [PokemonType.Water, PokemonType.Fighting],
        'eggCycles': 80,
        'levelType': LevelType.slow,
        'exp': 261,
        'catchRate': 3,
        'base': {
            'hitpoints': 91,
            'attack': 72,
            'specialAttack': 129,
            'defense': 90,
            'specialDefense': 90,
            'speed': 108,
        },
    },
    {
        'id': 648,
        'name': 'Meloetta (aria)',
        'type': [PokemonType.Normal, PokemonType.Psychic],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 100,
            'attack': 77,
            'specialAttack': 128,
            'defense': 77,
            'specialDefense': 128,
            'speed': 90,
        },
    },
    {
        'id': 648.1,
        'name': 'Meloetta (pirouette)',
        'type': [PokemonType.Normal, PokemonType.Fighting],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 100,
            'attack': 128,
            'specialAttack': 77,
            'defense': 90,
            'specialDefense': 77,
            'speed': 128,
        },
    },
    {
        'id': 649,
        'name': 'Genesect',
        'type': [PokemonType.Bug, PokemonType.Steel],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 71,
            'attack': 120,
            'specialAttack': 120,
            'defense': 95,
            'specialDefense': 95,
            'speed': 99,
        },
    },
    {
        'id': 650,
        'name': 'Chespin',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 63,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Chespin', 'Quilladin', 16)],
        'base': {
            'hitpoints': 56,
            'attack': 61,
            'specialAttack': 48,
            'defense': 65,
            'specialDefense': 45,
            'speed': 38,
        },
    },
    {
        'id': 651,
        'name': 'Quilladin',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Quilladin', 'Chesnaught', 36)],
        'base': {
            'hitpoints': 61,
            'attack': 78,
            'specialAttack': 56,
            'defense': 95,
            'specialDefense': 58,
            'speed': 57,
        },
    },
    {
        'id': 652,
        'name': 'Chesnaught',
        'type': [PokemonType.Grass, PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
        'base': {
            'hitpoints': 88,
            'attack': 107,
            'specialAttack': 74,
            'defense': 122,
            'specialDefense': 75,
            'speed': 64,
        },
    },
    {
        'id': 653,
        'name': 'Fennekin',
        'type': [PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 61,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Fennekin', 'Braixen', 16)],
        'base': {
            'hitpoints': 40,
            'attack': 45,
            'specialAttack': 62,
            'defense': 40,
            'specialDefense': 60,
            'speed': 60,
        },
    },
    {
        'id': 654,
        'name': 'Braixen',
        'type': [PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 143,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Braixen', 'Delphox', 36)],
        'base': {
            'hitpoints': 59,
            'attack': 59,
            'specialAttack': 90,
            'defense': 58,
            'specialDefense': 70,
            'speed': 73,
        },
    },
    {
        'id': 655,
        'name': 'Delphox',
        'type': [PokemonType.Fire, PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 240,
        'catchRate': 45,
        'base': {
            'hitpoints': 75,
            'attack': 69,
            'specialAttack': 114,
            'defense': 72,
            'specialDefense': 100,
            'speed': 104,
        },
    },
    {
        'id': 656,
        'name': 'Froakie',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 63,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Froakie', 'Frogadier', 16)],
        'base': {
            'hitpoints': 41,
            'attack': 56,
            'specialAttack': 62,
            'defense': 40,
            'specialDefense': 44,
            'speed': 71,
        },
    },
    {
        'id': 657,
        'name': 'Frogadier',
        'type': [PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Frogadier', 'Greninja', 36)],
        'base': {
            'hitpoints': 54,
            'attack': 63,
            'specialAttack': 83,
            'defense': 52,
            'specialDefense': 56,
            'speed': 97,
        },
    },
    {
        'id': 658,
        'name': 'Greninja',
        'type': [PokemonType.Water, PokemonType.Dark],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
        'base': {
            'hitpoints': 72,
            'attack': 95,
            'specialAttack': 103,
            'defense': 67,
            'specialDefense': 71,
            'speed': 122,
        },
    },
    {
        'id': 659,
        'name': 'Bunnelby',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 47,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Bunnelby', 'Diggersby', 20)],
        'base': {
            'hitpoints': 38,
            'attack': 36,
            'specialAttack': 32,
            'defense': 38,
            'specialDefense': 36,
            'speed': 57,
        },
    },
    {
        'id': 660,
        'name': 'Diggersby',
        'type': [PokemonType.Normal, PokemonType.Ground],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 148,
        'catchRate': 127,
        'base': {
            'hitpoints': 85,
            'attack': 56,
            'specialAttack': 50,
            'defense': 77,
            'specialDefense': 77,
            'speed': 78,
        },
    },
    {
        'id': 661,
        'name': 'Fletchling',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Fletchling', 'Fletchinder', 17)],
        'base': {
            'hitpoints': 45,
            'attack': 50,
            'specialAttack': 40,
            'defense': 43,
            'specialDefense': 38,
            'speed': 62,
        },
    },
    {
        'id': 662,
        'name': 'Fletchinder',
        'type': [PokemonType.Fire, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 134,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Fletchinder', 'Talonflame', 35)],
        'base': {
            'hitpoints': 62,
            'attack': 73,
            'specialAttack': 56,
            'defense': 55,
            'specialDefense': 52,
            'speed': 84,
        },
    },
    {
        'id': 663,
        'name': 'Talonflame',
        'type': [PokemonType.Fire, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 175,
        'catchRate': 45,
        'base': {
            'hitpoints': 78,
            'attack': 81,
            'specialAttack': 74,
            'defense': 71,
            'specialDefense': 69,
            'speed': 126,
        },
    },
    {
        'id': 664,
        'name': 'Scatterbug',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 40,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Scatterbug', 'Spewpa', 9)],
        'base': {
            'hitpoints': 38,
            'attack': 35,
            'specialAttack': 27,
            'defense': 40,
            'specialDefense': 25,
            'speed': 35,
        },
    },
    {
        'id': 665,
        'name': 'Spewpa',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 75,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Spewpa', 'Vivillon', 12)],
        'base': {
            'hitpoints': 45,
            'attack': 22,
            'specialAttack': 27,
            'defense': 60,
            'specialDefense': 30,
            'speed': 29,
        },
    },
    {
        'id': 666,
        'name': 'Vivillon',
        'type': [PokemonType.Bug, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 185,
        'catchRate': 45,
        'base': {
            'hitpoints': 80,
            'attack': 52,
            'specialAttack': 90,
            'defense': 50,
            'specialDefense': 50,
            'speed': 89,
        },
    },
    {
        'id': 667,
        'name': 'Litleo',
        'type': [PokemonType.Fire, PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 74,
        'catchRate': 220,
        'evolutions': [new LevelEvolution('Litleo', 'Pyroar', 35)],
        'base': {
            'hitpoints': 62,
            'attack': 50,
            'specialAttack': 73,
            'defense': 58,
            'specialDefense': 54,
            'speed': 72,
        },
    },
    {
        'id': 668,
        'name': 'Pyroar',
        'type': [PokemonType.Fire, PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 177,
        'catchRate': 65,
        'base': {
            'hitpoints': 86,
            'attack': 68,
            'specialAttack': 109,
            'defense': 72,
            'specialDefense': 66,
            'speed': 106,
        },
    },
    {
        'id': 669,
        'name': 'Flabébé',
        'type': [PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 225,
        'evolutions': [new LevelEvolution('Flabébé', 'Floette', 19)],
        'base': {
            'hitpoints': 44,
            'attack': 38,
            'specialAttack': 61,
            'defense': 39,
            'specialDefense': 79,
            'speed': 42,
        },
    },
    {
        'id': 670,
        'name': 'Floette',
        'type': [PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 130,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Floette', 'Florges', GameConstants.StoneType.None)],
        'base': {
            'hitpoints': 54,
            'attack': 45,
            'specialAttack': 75,
            'defense': 47,
            'specialDefense': 98,
            'speed': 52,
        },
    },
    {
        'id': 671,
        'name': 'Florges',
        'type': [PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 248,
        'catchRate': 45,
        'base': {
            'hitpoints': 78,
            'attack': 65,
            'specialAttack': 112,
            'defense': 68,
            'specialDefense': 154,
            'speed': 75,
        },
    },
    {
        'id': 672,
        'name': 'Skiddo',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 70,
        'catchRate': 200,
        'evolutions': [new LevelEvolution('Skiddo', 'Gogoat', 32)],
        'base': {
            'hitpoints': 66,
            'attack': 65,
            'specialAttack': 62,
            'defense': 48,
            'specialDefense': 57,
            'speed': 52,
        },
    },
    {
        'id': 673,
        'name': 'Gogoat',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 186,
        'catchRate': 45,
        'base': {
            'hitpoints': 123,
            'attack': 100,
            'specialAttack': 97,
            'defense': 62,
            'specialDefense': 81,
            'speed': 68,
        },
    },
    {
        'id': 674,
        'name': 'Pancham',
        'type': [PokemonType.Fighting],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 70,
        'catchRate': 220,
        'evolutions': [new LevelEvolution('Pancham', 'Pangoro', 32)],
        'base': {
            'hitpoints': 67,
            'attack': 82,
            'specialAttack': 46,
            'defense': 62,
            'specialDefense': 48,
            'speed': 43,
        },
    },
    {
        'id': 675,
        'name': 'Pangoro',
        'type': [PokemonType.Fighting, PokemonType.Dark],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 65,
        'base': {
            'hitpoints': 95,
            'attack': 124,
            'specialAttack': 69,
            'defense': 78,
            'specialDefense': 71,
            'speed': 58,
        },
    },
    {
        'id': 676,
        'name': 'Furfrou',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 165,
        'catchRate': 160,
        'base': {
            'hitpoints': 75,
            'attack': 80,
            'specialAttack': 65,
            'defense': 60,
            'specialDefense': 90,
            'speed': 102,
        },
    },
    {
        'id': 677,
        'name': 'Espurr',
        'type': [PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 71,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Espurr', 'Meowstic', 25)],
        'base': {
            'hitpoints': 62,
            'attack': 48,
            'specialAttack': 63,
            'defense': 54,
            'specialDefense': 60,
            'speed': 68,
        },
    },
    {
        'id': 678,
        'name': 'Meowstic',
        'type': [PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 163,
        'catchRate': 75,
        'base': {
            'hitpoints': 74,
            'attack': 48,
            'specialAttack': 83,
            'defense': 76,
            'specialDefense': 81,
            'speed': 104,
        },
    },
    {
        'id': 679,
        'name': 'Honedge',
        'type': [PokemonType.Steel, PokemonType.Ghost],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'catchRate': 180,
        'evolutions': [new LevelEvolution('Honedge', 'Doublade', 35)],
        'base': {
            'hitpoints': 45,
            'attack': 80,
            'specialAttack': 35,
            'defense': 100,
            'specialDefense': 37,
            'speed': 28,
        },
    },
    {
        'id': 680,
        'name': 'Doublade',
        'type': [PokemonType.Steel, PokemonType.Ghost],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 157,
        'catchRate': 90,
        'evolutions': [new StoneEvolution('Doublade', 'Aegislash', GameConstants.StoneType.None)],
        'base': {
            'hitpoints': 59,
            'attack': 110,
            'specialAttack': 45,
            'defense': 150,
            'specialDefense': 49,
            'speed': 35,
        },
    },
    {
        'id': 681,
        'name': 'Aegislash',
        'type': [PokemonType.Steel, PokemonType.Ghost],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 234,
        'catchRate': 45,
        'base': {
            'hitpoints': 60,
            'attack': 50,
            'specialAttack': 50,
            'defense': 140,
            'specialDefense': 140,
            'speed': 60,
        },
    },
    {
        'id': 682,
        'name': 'Spritzee',
        'type': [PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 68,
        'catchRate': 200,
        'evolutions': [new StoneEvolution('Spritzee', 'Aromatisse', GameConstants.StoneType.Sachet)],
        'base': {
            'hitpoints': 78,
            'attack': 52,
            'specialAttack': 63,
            'defense': 60,
            'specialDefense': 65,
            'speed': 23,
        },
    },
    {
        'id': 683,
        'name': 'Aromatisse',
        'type': [PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 162,
        'catchRate': 140,
        'base': {
            'hitpoints': 101,
            'attack': 72,
            'specialAttack': 99,
            'defense': 72,
            'specialDefense': 89,
            'speed': 29,
        },
    },
    {
        'id': 684,
        'name': 'Swirlix',
        'type': [PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 68,
        'catchRate': 200,
        'evolutions': [new StoneEvolution('Swirlix', 'Slurpuff', GameConstants.StoneType.Whipped_dream)],
        'base': {
            'hitpoints': 62,
            'attack': 48,
            'specialAttack': 59,
            'defense': 66,
            'specialDefense': 57,
            'speed': 49,
        },
    },
    {
        'id': 685,
        'name': 'Slurpuff',
        'type': [PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 140,
        'base': {
            'hitpoints': 82,
            'attack': 80,
            'specialAttack': 85,
            'defense': 86,
            'specialDefense': 75,
            'speed': 72,
        },
    },
    {
        'id': 686,
        'name': 'Inkay',
        'type': [PokemonType.Dark, PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 58,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Inkay', 'Malamar', 30)],
        'base': {
            'hitpoints': 53,
            'attack': 54,
            'specialAttack': 37,
            'defense': 53,
            'specialDefense': 46,
            'speed': 45,
        },
    },
    {
        'id': 687,
        'name': 'Malamar',
        'type': [PokemonType.Dark, PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 169,
        'catchRate': 80,
        'base': {
            'hitpoints': 86,
            'attack': 92,
            'specialAttack': 68,
            'defense': 88,
            'specialDefense': 75,
            'speed': 73,
        },
    },
    {
        'id': 688,
        'name': 'Binacle',
        'type': [PokemonType.Rock, PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Binacle', 'Barbaracle', 39)],
        'base': {
            'hitpoints': 42,
            'attack': 52,
            'specialAttack': 39,
            'defense': 67,
            'specialDefense': 56,
            'speed': 50,
        },
    },
    {
        'id': 689,
        'name': 'Barbaracle',
        'type': [PokemonType.Rock, PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'catchRate': 45,
        'base': {
            'hitpoints': 72,
            'attack': 105,
            'specialAttack': 54,
            'defense': 115,
            'specialDefense': 86,
            'speed': 68,
        },
    },
    {
        'id': 690,
        'name': 'Skrelp',
        'type': [PokemonType.Poison, PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'catchRate': 225,
        'evolutions': [new LevelEvolution('Skrelp', 'Dragalge', 48)],
        'base': {
            'hitpoints': 50,
            'attack': 60,
            'specialAttack': 60,
            'defense': 60,
            'specialDefense': 60,
            'speed': 30,
        },
    },
    {
        'id': 691,
        'name': 'Dragalge',
        'type': [PokemonType.Poison, PokemonType.Dragon],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 55,
        'base': {
            'hitpoints': 65,
            'attack': 75,
            'specialAttack': 97,
            'defense': 90,
            'specialDefense': 123,
            'speed': 44,
        },
    },
    {
        'id': 692,
        'name': 'Clauncher',
        'type': [PokemonType.Water],
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': 66,
        'catchRate': 225,
        'evolutions': [new LevelEvolution('Clauncher', 'Clawitzer', 37)],
        'base': {
            'hitpoints': 50,
            'attack': 53,
            'specialAttack': 58,
            'defense': 62,
            'specialDefense': 63,
            'speed': 44,
        },
    },
    {
        'id': 693,
        'name': 'Clawitzer',
        'type': [PokemonType.Water],
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': 100,
        'catchRate': 55,
        'base': {
            'hitpoints': 71,
            'attack': 73,
            'specialAttack': 120,
            'defense': 88,
            'specialDefense': 89,
            'speed': 59,
        },
    },
    {
        'id': 694,
        'name': 'Helioptile',
        'type': [PokemonType.Electric, PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 58,
        'catchRate': 190,
        'evolutions': [new StoneEvolution('Helioptile', 'Heliolisk', GameConstants.StoneType.Sun_stone)],
        'base': {
            'hitpoints': 44,
            'attack': 38,
            'specialAttack': 61,
            'defense': 33,
            'specialDefense': 43,
            'speed': 70,
        },
    },
    {
        'id': 695,
        'name': 'Heliolisk',
        'type': [PokemonType.Electric, PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 75,
        'base': {
            'hitpoints': 62,
            'attack': 55,
            'specialAttack': 109,
            'defense': 52,
            'specialDefense': 94,
            'speed': 109,
        },
    },
    {
        'id': 696,
        'name': 'Tyrunt',
        'type': [PokemonType.Rock, PokemonType.Dragon],
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 72,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Tyrunt', 'Tyrantrum', 39)],
        'base': {
            'hitpoints': 58,
            'attack': 89,
            'specialAttack': 45,
            'defense': 77,
            'specialDefense': 45,
            'speed': 48,
        },
    },
    {
        'id': 697,
        'name': 'Tyrantrum',
        'type': [PokemonType.Rock, PokemonType.Dragon],
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 182,
        'catchRate': 45,
        'base': {
            'hitpoints': 82,
            'attack': 121,
            'specialAttack': 69,
            'defense': 119,
            'specialDefense': 59,
            'speed': 71,
        },
    },
    {
        'id': 698,
        'name': 'Amaura',
        'type': [PokemonType.Rock, PokemonType.Ice],
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 72,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Amaura', 'Aurorus', 39)],
        'base': {
            'hitpoints': 77,
            'attack': 59,
            'specialAttack': 67,
            'defense': 50,
            'specialDefense': 63,
            'speed': 46,
        },
    },
    {
        'id': 699,
        'name': 'Aurorus',
        'type': [PokemonType.Rock, PokemonType.Ice],
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 104,
        'catchRate': 45,
        'base': {
            'hitpoints': 123,
            'attack': 77,
            'specialAttack': 99,
            'defense': 72,
            'specialDefense': 92,
            'speed': 58,
        },
    },
    {
        'id': 700,
        'name': 'Sylveon',
        'type': [PokemonType.Fairy],
        'eggCycles': 35,
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'catchRate': 45,
        'base': {
            'hitpoints': 95,
            'attack': 65,
            'specialAttack': 110,
            'defense': 65,
            'specialDefense': 130,
            'speed': 60,
        },
    },
    {
        'id': 701,
        'name': 'Hawlucha',
        'type': [PokemonType.Fighting, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'catchRate': 100,
        'base': {
            'hitpoints': 78,
            'attack': 92,
            'specialAttack': 74,
            'defense': 75,
            'specialDefense': 63,
            'speed': 118,
        },
    },
    {
        'id': 702,
        'name': 'Dedenne',
        'type': [PokemonType.Electric, PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 151,
        'catchRate': 180,
        'base': {
            'hitpoints': 67,
            'attack': 58,
            'specialAttack': 81,
            'defense': 57,
            'specialDefense': 67,
            'speed': 101,
        },
    },
    {
        'id': 703,
        'name': 'Carbink',
        'type': [PokemonType.Rock, PokemonType.Fairy],
        'eggCycles': 25,
        'levelType': LevelType.slow,
        'exp': 100,
        'catchRate': 60,
        'base': {
            'hitpoints': 50,
            'attack': 50,
            'specialAttack': 50,
            'defense': 150,
            'specialDefense': 150,
            'speed': 50,
        },
    },
    {
        'id': 704,
        'name': 'Goomy',
        'type': [PokemonType.Dragon],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 60,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Goomy', 'Sliggoo', 40)],
        'base': {
            'hitpoints': 45,
            'attack': 50,
            'specialAttack': 55,
            'defense': 35,
            'specialDefense': 75,
            'speed': 40,
        },
    },
    {
        'id': 705,
        'name': 'Sliggoo',
        'type': [PokemonType.Dragon],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 158,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Sliggoo', 'Goodra', 50)],
        'base': {
            'hitpoints': 68,
            'attack': 75,
            'specialAttack': 83,
            'defense': 53,
            'specialDefense': 113,
            'speed': 60,
        },
    },
    {
        'id': 706,
        'name': 'Goodra',
        'type': [PokemonType.Dragon],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 45,
        'base': {
            'hitpoints': 90,
            'attack': 100,
            'specialAttack': 110,
            'defense': 70,
            'specialDefense': 150,
            'speed': 80,
        },
    },
    {
        'id': 707,
        'name': 'Klefki',
        'type': [PokemonType.Steel, PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': 4,
        'exp': 165,
        'catchRate': 75,
        'base': {
            'hitpoints': 57,
            'attack': 80,
            'specialAttack': 80,
            'defense': 91,
            'specialDefense': 87,
            'speed': 75,
        },
    },
    {
        'id': 708,
        'name': 'Phantump',
        'type': [PokemonType.Ghost, PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 62,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Phantump', 'Trevenant', GameConstants.StoneType.Trade_stone)],
        'base': {
            'hitpoints': 43,
            'attack': 70,
            'specialAttack': 50,
            'defense': 48,
            'specialDefense': 60,
            'speed': 38,
        },
    },
    {
        'id': 709,
        'name': 'Trevenant',
        'type': [PokemonType.Ghost, PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 60,
        'base': {
            'hitpoints': 85,
            'attack': 110,
            'specialAttack': 65,
            'defense': 76,
            'specialDefense': 82,
            'speed': 56,
        },
    },
    {
        'id': 710,
        'name': 'Pumpkaboo',
        'type': [PokemonType.Ghost, PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 67,
        'catchRate': 120,
        'base': {
            'hitpoints': 44,
            'attack': 66,
            'specialAttack': 44,
            'defense': 70,
            'specialDefense': 55,
            'speed': 56,
        },
    },
    {
        'id': 711,
        'name': 'Gourgeist',
        'type': [PokemonType.Ghost, PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 60,
        'base': {
            'hitpoints': 55,
            'attack': 85,
            'specialAttack': 58,
            'defense': 122,
            'specialDefense': 75,
            'speed': 99,
        },
    },
    {
        'id': 712,
        'name': 'Bergmite',
        'type': [PokemonType.Ice],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Bergmite', 'Avalugg', 37)],
        'base': {
            'hitpoints': 55,
            'attack': 69,
            'specialAttack': 32,
            'defense': 85,
            'specialDefense': 35,
            'speed': 28,
        },
    },
    {
        'id': 713,
        'name': 'Avalugg',
        'type': [PokemonType.Ice],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 180,
        'catchRate': 55,
        'base': {
            'hitpoints': 95,
            'attack': 117,
            'specialAttack': 44,
            'defense': 184,
            'specialDefense': 46,
            'speed': 28,
        },
    },
    {
        'id': 714,
        'name': 'Noibat',
        'type': [PokemonType.Flying, PokemonType.Dragon],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 49,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Noibat', 'Noivern', 48)],
        'base': {
            'hitpoints': 40,
            'attack': 30,
            'specialAttack': 45,
            'defense': 35,
            'specialDefense': 40,
            'speed': 55,
        },
    },
    {
        'id': 715,
        'name': 'Noivern',
        'type': [PokemonType.Flying, PokemonType.Dragon],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 187,
        'catchRate': 45,
        'base': {
            'hitpoints': 85,
            'attack': 70,
            'specialAttack': 97,
            'defense': 80,
            'specialDefense': 80,
            'speed': 123,
        },
    },
    {
        'id': 716,
        'name': 'Xerneas',
        'type': [PokemonType.Fairy],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 45,
        'base': {
            'hitpoints': 126,
            'attack': 131,
            'specialAttack': 131,
            'defense': 95,
            'specialDefense': 98,
            'speed': 99,
        },
    },
    {
        'id': 717,
        'name': 'Yveltal',
        'type': [PokemonType.Dark, PokemonType.Flying],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 306,
        'catchRate': 45,
        'base': {
            'hitpoints': 126,
            'attack': 131,
            'specialAttack': 131,
            'defense': 95,
            'specialDefense': 98,
            'speed': 99,
        },
    },
    {
        'id': 718,
        'name': 'Zygarde',
        'type': [PokemonType.Dragon, PokemonType.Ground],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 108,
            'attack': 100,
            'specialAttack': 81,
            'defense': 121,
            'specialDefense': 95,
            'speed': 95,
        },
    },
    {
        'id': 719,
        'name': 'Diancie',
        'type': [PokemonType.Rock, PokemonType.Fairy],
        'eggCycles': 25,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 50,
            'attack': 100,
            'specialAttack': 100,
            'defense': 150,
            'specialDefense': 150,
            'speed': 50,
        },
    },
    {
        'id': 720,
        'name': 'Hoopa',
        'type': [PokemonType.Psychic, PokemonType.Ghost],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 80,
            'attack': 110,
            'specialAttack': 150,
            'defense': 60,
            'specialDefense': 130,
            'speed': 70,
        },
    },
    {
        'id': 721,
        'name': 'Volcanion',
        'type': [PokemonType.Fire, PokemonType.Water],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 80,
            'attack': 110,
            'specialAttack': 130,
            'defense': 120,
            'specialDefense': 90,
            'speed': 70,
        },
    },
    {
        'id': 722,
        'name': 'Rowlet',
        'type': [PokemonType.Grass, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Rowlet', 'Dartrix', 17)],
        'base': {
            'hitpoints': 68,
            'attack': 55,
            'specialAttack': 50,
            'defense': 55,
            'specialDefense': 50,
            'speed': 42,
        },
    },
    {
        'id': 723,
        'name': 'Dartrix',
        'type': [PokemonType.Grass, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Dartrix', 'Decidueye', 34)],
        'base': {
            'hitpoints': 78,
            'attack': 75,
            'specialAttack': 70,
            'defense': 75,
            'specialDefense': 70,
            'speed': 52,
        },
    },
    {
        'id': 724,
        'name': 'Decidueye',
        'type': [PokemonType.Grass, PokemonType.Ghost],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
        'base': {
            'hitpoints': 78,
            'attack': 107,
            'specialAttack': 100,
            'defense': 75,
            'specialDefense': 100,
            'speed': 70,
        },
    },
    {
        'id': 725,
        'name': 'Litten',
        'type': [PokemonType.Fire],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Litten', 'Torracat', 17)],
        'base': {
            'hitpoints': 45,
            'attack': 65,
            'specialAttack': 60,
            'defense': 40,
            'specialDefense': 40,
            'speed': 70,
        },
    },
    {
        'id': 726,
        'name': 'Torracat',
        'type': [PokemonType.Fire],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Torracat', 'Incineroar', 34)],
        'base': {
            'hitpoints': 65,
            'attack': 85,
            'specialAttack': 80,
            'defense': 50,
            'specialDefense': 50,
            'speed': 90,
        },
    },
    {
        'id': 727,
        'name': 'Incineroar',
        'type': [PokemonType.Fire, PokemonType.Dark],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
        'base': {
            'hitpoints': 95,
            'attack': 115,
            'specialAttack': 80,
            'defense': 90,
            'specialDefense': 90,
            'speed': 60,
        },
    },
    {
        'id': 728,
        'name': 'Popplio',
        'type': [PokemonType.Water],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Popplio', 'Brionne', 17)],
        'base': {
            'hitpoints': 50,
            'attack': 54,
            'specialAttack': 66,
            'defense': 54,
            'specialDefense': 56,
            'speed': 40,
        },
    },
    {
        'id': 729,
        'name': 'Brionne',
        'type': [PokemonType.Water],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Brionne', 'Primarina', 34)],
        'base': {
            'hitpoints': 60,
            'attack': 69,
            'specialAttack': 91,
            'defense': 69,
            'specialDefense': 81,
            'speed': 50,
        },
    },
    {
        'id': 730,
        'name': 'Primarina',
        'type': [PokemonType.Water, PokemonType.Fairy],
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'catchRate': 45,
        'base': {
            'hitpoints': 80,
            'attack': 74,
            'specialAttack': 126,
            'defense': 74,
            'specialDefense': 116,
            'speed': 60,
        },
    },
    {
        'id': 731,
        'name': 'Pikipek',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 53,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Pikipek', 'Trumbeak', 14)],
        'base': {
            'hitpoints': 35,
            'attack': 75,
            'specialAttack': 30,
            'defense': 30,
            'specialDefense': 30,
            'speed': 65,
        },
    },
    {
        'id': 732,
        'name': 'Trumbeak',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 124,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Trumbeak', 'Toucannon', 28)],
        'base': {
            'hitpoints': 55,
            'attack': 85,
            'specialAttack': 40,
            'defense': 50,
            'specialDefense': 50,
            'speed': 75,
        },
    },
    {
        'id': 733,
        'name': 'Toucannon',
        'type': [PokemonType.Normal, PokemonType.Flying],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 218,
        'catchRate': 45,
        'base': {
            'hitpoints': 80,
            'attack': 120,
            'specialAttack': 75,
            'defense': 75,
            'specialDefense': 75,
            'speed': 60,
        },
    },
    {
        'id': 734,
        'name': 'Yungoos',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 51,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Yungoos', 'Gumshoos', 20)],
        'base': {
            'hitpoints': 48,
            'attack': 70,
            'specialAttack': 30,
            'defense': 30,
            'specialDefense': 30,
            'speed': 45,
        },
    },
    {
        'id': 735,
        'name': 'Gumshoos',
        'type': [PokemonType.Normal],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 146,
        'catchRate': 127,
        'base': {
            'hitpoints': 88,
            'attack': 110,
            'specialAttack': 55,
            'defense': 60,
            'specialDefense': 60,
            'speed': 45,
        },
    },
    {
        'id': 736,
        'name': 'Grubbin',
        'type': [PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 60,
        'catchRate': 255,
        'evolutions': [new LevelEvolution('Grubbin', 'Charjabug', 20)],
        'base': {
            'hitpoints': 47,
            'attack': 62,
            'specialAttack': 55,
            'defense': 45,
            'specialDefense': 45,
            'speed': 46,
        },
    },
    {
        'id': 737,
        'name': 'Charjabug',
        'type': [PokemonType.Bug, PokemonType.Electric],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 140,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Charjabug', 'Vikavolt', GameConstants.StoneType.None)],
        'base': {
            'hitpoints': 57,
            'attack': 82,
            'specialAttack': 55,
            'defense': 95,
            'specialDefense': 75,
            'speed': 36,
        },
    },
    {
        'id': 738,
        'name': 'Vikavolt',
        'type': [PokemonType.Bug, PokemonType.Electric],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 225,
        'catchRate': 45,
        'base': {
            'hitpoints': 77,
            'attack': 70,
            'specialAttack': 145,
            'defense': 90,
            'specialDefense': 75,
            'speed': 43,
        },
    },
    {
        'id': 739,
        'name': 'Crabrawler',
        'type': [PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 68,
        'catchRate': 225,
        'evolutions': [new StoneEvolution('Crabrawler', 'Crabominable', GameConstants.StoneType.None)],
        'base': {
            'hitpoints': 47,
            'attack': 82,
            'specialAttack': 42,
            'defense': 57,
            'specialDefense': 47,
            'speed': 63,
        },
    },
    {
        'id': 740,
        'name': 'Crabominable',
        'type': [PokemonType.Fighting, PokemonType.Ice],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 167,
        'catchRate': 60,
        'base': {
            'hitpoints': 97,
            'attack': 132,
            'specialAttack': 62,
            'defense': 77,
            'specialDefense': 67,
            'speed': 43,
        },
    },
    {
        'id': 741,
        'name': 'Oricorio',
        'type': [PokemonType.Fire, PokemonType.Flying],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 167,
        'catchRate': 45,
        'base': {
            'hitpoints': 75,
            'attack': 70,
            'specialAttack': 98,
            'defense': 70,
            'specialDefense': 70,
            'speed': 93,
        },
    },
    {
        'id': 742,
        'name': 'Cutiefly',
        'type': [PokemonType.Bug, PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Cutiefly', 'Ribombee', 25)],
        'base': {
            'hitpoints': 40,
            'attack': 45,
            'specialAttack': 55,
            'defense': 40,
            'specialDefense': 40,
            'speed': 84,
        },
    },
    {
        'id': 743,
        'name': 'Ribombee',
        'type': [PokemonType.Bug, PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 162,
        'catchRate': 75,
        'base': {
            'hitpoints': 60,
            'attack': 55,
            'specialAttack': 95,
            'defense': 60,
            'specialDefense': 70,
            'speed': 124,
        },
    },
    {
        'id': 744,
        'name': 'Rockruff',
        'type': [PokemonType.Rock],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 56,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Rockruff', 'Lycanroc', 25)],
        'base': {
            'hitpoints': 45,
            'attack': 65,
            'specialAttack': 30,
            'defense': 40,
            'specialDefense': 40,
            'speed': 60,
        },
    },
    {
        'id': 745,
        'name': 'Lycanroc',
        'type': [PokemonType.Rock],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 90,
        'base': {
            'hitpoints': 75,
            'attack': 115,
            'specialAttack': 55,
            'defense': 65,
            'specialDefense': 65,
            'speed': 112,
        },
    },
    {
        'id': 746,
        'name': 'Wishiwashi',
        'type': [PokemonType.Water],
        'eggCycles': 15,
        'levelType': 4,
        'exp': 61,
        'catchRate': 60,
        'base': {
            'hitpoints': 45,
            'attack': 20,
            'specialAttack': 25,
            'defense': 20,
            'specialDefense': 25,
            'speed': 40,
        },
    },
    {
        'id': 747,
        'name': 'Mareanie',
        'type': [PokemonType.Poison, PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Mareanie', 'Toxapex', 38)],
        'base': {
            'hitpoints': 50,
            'attack': 53,
            'specialAttack': 43,
            'defense': 62,
            'specialDefense': 52,
            'speed': 45,
        },
    },
    {
        'id': 748,
        'name': 'Toxapex',
        'type': [PokemonType.Poison, PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 75,
        'base': {
            'hitpoints': 50,
            'attack': 63,
            'specialAttack': 53,
            'defense': 152,
            'specialDefense': 142,
            'speed': 35,
        },
    },
    {
        'id': 749,
        'name': 'Mudbray',
        'type': [PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 77,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Mudbray', 'Mudsdale', 30)],
        'base': {
            'hitpoints': 70,
            'attack': 100,
            'specialAttack': 45,
            'defense': 70,
            'specialDefense': 55,
            'speed': 45,
        },
    },
    {
        'id': 750,
        'name': 'Mudsdale',
        'type': [PokemonType.Ground],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'catchRate': 60,
        'base': {
            'hitpoints': 100,
            'attack': 125,
            'specialAttack': 55,
            'defense': 100,
            'specialDefense': 85,
            'speed': 35,
        },
    },
    {
        'id': 751,
        'name': 'Dewpider',
        'type': [PokemonType.Water, PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 54,
        'catchRate': 200,
        'evolutions': [new LevelEvolution('Dewpider', 'Araquanid', 22)],
        'base': {
            'hitpoints': 38,
            'attack': 40,
            'specialAttack': 40,
            'defense': 52,
            'specialDefense': 72,
            'speed': 27,
        },
    },
    {
        'id': 752,
        'name': 'Araquanid',
        'type': [PokemonType.Water, PokemonType.Bug],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 159,
        'catchRate': 100,
        'base': {
            'hitpoints': 68,
            'attack': 70,
            'specialAttack': 50,
            'defense': 92,
            'specialDefense': 132,
            'speed': 42,
        },
    },
    {
        'id': 753,
        'name': 'Fomantis',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 50,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Fomantis', 'Lurantis', 34)],
        'base': {
            'hitpoints': 40,
            'attack': 55,
            'specialAttack': 50,
            'defense': 35,
            'specialDefense': 35,
            'speed': 35,
        },
    },
    {
        'id': 754,
        'name': 'Lurantis',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 75,
        'base': {
            'hitpoints': 70,
            'attack': 105,
            'specialAttack': 80,
            'defense': 90,
            'specialDefense': 90,
            'speed': 45,
        },
    },
    {
        'id': 755,
        'name': 'Morelull',
        'type': [PokemonType.Grass, PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 57,
        'catchRate': 190,
        'evolutions': [new LevelEvolution('Morelull', 'Shiinotic', 24)],
        'base': {
            'hitpoints': 40,
            'attack': 35,
            'specialAttack': 65,
            'defense': 55,
            'specialDefense': 75,
            'speed': 15,
        },
    },
    {
        'id': 756,
        'name': 'Shiinotic',
        'type': [PokemonType.Grass, PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 142,
        'catchRate': 75,
        'base': {
            'hitpoints': 60,
            'attack': 45,
            'specialAttack': 90,
            'defense': 80,
            'specialDefense': 100,
            'speed': 30,
        },
    },
    {
        'id': 757,
        'name': 'Salandit',
        'type': [PokemonType.Poison, PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'catchRate': 120,
        'evolutions': [new LevelEvolution('Salandit', 'Salazzle', 33)],
        'base': {
            'hitpoints': 48,
            'attack': 44,
            'specialAttack': 71,
            'defense': 40,
            'specialDefense': 40,
            'speed': 77,
        },
    },
    {
        'id': 758,
        'name': 'Salazzle',
        'type': [PokemonType.Poison, PokemonType.Fire],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 45,
        'base': {
            'hitpoints': 68,
            'attack': 64,
            'specialAttack': 111,
            'defense': 60,
            'specialDefense': 60,
            'speed': 117,
        },
    },
    {
        'id': 759,
        'name': 'Stufful',
        'type': [PokemonType.Normal, PokemonType.Fighting],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 68,
        'catchRate': 140,
        'evolutions': [new LevelEvolution('Stufful', 'Bewear', 27)],
        'base': {
            'hitpoints': 70,
            'attack': 75,
            'specialAttack': 45,
            'defense': 50,
            'specialDefense': 50,
            'speed': 50,
        },
    },
    {
        'id': 760,
        'name': 'Bewear',
        'type': [PokemonType.Normal, PokemonType.Fighting],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'catchRate': 70,
        'base': {
            'hitpoints': 120,
            'attack': 125,
            'specialAttack': 55,
            'defense': 80,
            'specialDefense': 60,
            'speed': 60,
        },
    },
    {
        'id': 761,
        'name': 'Bounsweet',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 42,
        'catchRate': 235,
        'evolutions': [new LevelEvolution('Bounsweet', 'Steenee', 18)],
        'base': {
            'hitpoints': 42,
            'attack': 30,
            'specialAttack': 30,
            'defense': 38,
            'specialDefense': 38,
            'speed': 32,
        },
    },
    {
        'id': 762,
        'name': 'Steenee',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 102,
        'catchRate': 120,
        'evolutions': [new StoneEvolution('Steenee', 'Tsareena', GameConstants.StoneType.None)],
        'base': {
            'hitpoints': 52,
            'attack': 40,
            'specialAttack': 40,
            'defense': 48,
            'specialDefense': 48,
            'speed': 62,
        },
    },
    {
        'id': 763,
        'name': 'Tsareena',
        'type': [PokemonType.Grass],
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 230,
        'catchRate': 45,
        'base': {
            'hitpoints': 72,
            'attack': 120,
            'specialAttack': 50,
            'defense': 98,
            'specialDefense': 98,
            'speed': 72,
        },
    },
    {
        'id': 764,
        'name': 'Comfey',
        'type': [PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': 4,
        'exp': 170,
        'catchRate': 60,
        'base': {
            'hitpoints': 51,
            'attack': 52,
            'specialAttack': 82,
            'defense': 90,
            'specialDefense': 110,
            'speed': 100,
        },
    },
    {
        'id': 765,
        'name': 'Oranguru',
        'type': [PokemonType.Normal, PokemonType.Psychic],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 172,
        'catchRate': 45,
        'base': {
            'hitpoints': 90,
            'attack': 60,
            'specialAttack': 90,
            'defense': 80,
            'specialDefense': 110,
            'speed': 60,
        },
    },
    {
        'id': 766,
        'name': 'Passimian',
        'type': [PokemonType.Fighting],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 172,
        'catchRate': 45,
        'base': {
            'hitpoints': 100,
            'attack': 120,
            'specialAttack': 40,
            'defense': 90,
            'specialDefense': 60,
            'speed': 80,
        },
    },
    {
        'id': 767,
        'name': 'Wimpod',
        'type': [PokemonType.Bug, PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 46,
        'catchRate': 90,
        'evolutions': [new LevelEvolution('Wimpod', 'Golisopod', 30)],
        'base': {
            'hitpoints': 25,
            'attack': 35,
            'specialAttack': 20,
            'defense': 40,
            'specialDefense': 30,
            'speed': 80,
        },
    },
    {
        'id': 768,
        'name': 'Golisopod',
        'type': [PokemonType.Bug, PokemonType.Water],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 186,
        'catchRate': 45,
        'base': {
            'hitpoints': 75,
            'attack': 125,
            'specialAttack': 60,
            'defense': 140,
            'specialDefense': 90,
            'speed': 40,
        },
    },
    {
        'id': 769,
        'name': 'Sandygast',
        'type': [PokemonType.Ghost, PokemonType.Ground],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 64,
        'catchRate': 140,
        'evolutions': [new LevelEvolution('Sandygast', 'Palossand', 42)],
        'base': {
            'hitpoints': 55,
            'attack': 55,
            'specialAttack': 70,
            'defense': 80,
            'specialDefense': 45,
            'speed': 15,
        },
    },
    {
        'id': 770,
        'name': 'Palossand',
        'type': [PokemonType.Ghost, PokemonType.Ground],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 168,
        'catchRate': 60,
        'base': {
            'hitpoints': 85,
            'attack': 75,
            'specialAttack': 100,
            'defense': 110,
            'specialDefense': 75,
            'speed': 35,
        },
    },
    {
        'id': 771,
        'name': 'Pyukumuku',
        'type': [PokemonType.Water],
        'eggCycles': 15,
        'levelType': 4,
        'exp': 144,
        'catchRate': 60,
        'base': {
            'hitpoints': 55,
            'attack': 60,
            'specialAttack': 30,
            'defense': 130,
            'specialDefense': 130,
            'speed': 5,
        },
    },
    {
        'id': 772,
        'name': 'Type: Null',
        'type': [PokemonType.Normal],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 107,
        'catchRate': 3,
        'evolutions': [new StoneEvolution('Type: Null', 'Silvally', GameConstants.StoneType.Soothe_bell)],
        'base': {
            'hitpoints': 95,
            'attack': 95,
            'specialAttack': 95,
            'defense': 95,
            'specialDefense': 95,
            'speed': 59,
        },
    },
    {
        'id': 773,
        'name': 'Silvally',
        'type': [PokemonType.Normal],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 3,
        'base': {
            'hitpoints': 95,
            'attack': 95,
            'specialAttack': 95,
            'defense': 95,
            'specialDefense': 95,
            'speed': 95,
        },
    },
    {
        'id': 774,
        'name': 'Minior',
        'type': [PokemonType.Rock, PokemonType.Flying],
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 154,
        'catchRate': 30,
        'base': {
            'hitpoints': 60,
            'attack': 60,
            'specialAttack': 60,
            'defense': 100,
            'specialDefense': 100,
            'speed': 60,
        },
    },
    {
        'id': 775,
        'name': 'Komala',
        'type': [PokemonType.Normal],
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 168,
        'catchRate': 45,
        'base': {
            'hitpoints': 65,
            'attack': 115,
            'specialAttack': 75,
            'defense': 65,
            'specialDefense': 95,
            'speed': 65,
        },
    },
    {
        'id': 776,
        'name': 'Turtonator',
        'type': [PokemonType.Fire, PokemonType.Dragon],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 70,
        'base': {
            'hitpoints': 60,
            'attack': 78,
            'specialAttack': 91,
            'defense': 135,
            'specialDefense': 85,
            'speed': 36,
        },
    },
    {
        'id': 777,
        'name': 'Togedemaru',
        'type': [PokemonType.Electric, PokemonType.Steel],
        'eggCycles': 10,
        'levelType': LevelType.mediumfast,
        'exp': 152,
        'catchRate': 180,
        'base': {
            'hitpoints': 65,
            'attack': 98,
            'specialAttack': 40,
            'defense': 63,
            'specialDefense': 73,
            'speed': 96,
        },
    },
    {
        'id': 778,
        'name': 'Mimikyu',
        'type': [PokemonType.Ghost, PokemonType.Fairy],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 167,
        'catchRate': 45,
        'base': {
            'hitpoints': 55,
            'attack': 90,
            'specialAttack': 50,
            'defense': 80,
            'specialDefense': 105,
            'speed': 96,
        },
    },
    {
        'id': 779,
        'name': 'Bruxish',
        'type': [PokemonType.Water, PokemonType.Psychic],
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 80,
        'base': {
            'hitpoints': 68,
            'attack': 105,
            'specialAttack': 70,
            'defense': 70,
            'specialDefense': 70,
            'speed': 92,
        },
    },
    {
        'id': 780,
        'name': 'Drampa',
        'type': [PokemonType.Normal, PokemonType.Dragon],
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 70,
        'base': {
            'hitpoints': 78,
            'attack': 60,
            'specialAttack': 135,
            'defense': 85,
            'specialDefense': 91,
            'speed': 36,
        },
    },
    {
        'id': 781,
        'name': 'Dhelmise',
        'type': [PokemonType.Ghost, PokemonType.Grass],
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 181,
        'catchRate': 25,
        'base': {
            'hitpoints': 70,
            'attack': 131,
            'specialAttack': 86,
            'defense': 100,
            'specialDefense': 90,
            'speed': 40,
        },
    },
    {
        'id': 782,
        'name': 'Jangmo-o',
        'type': [PokemonType.Dragon],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 60,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Jangmo-o', 'Hakamo-o', 35)],
        'base': {
            'hitpoints': 45,
            'attack': 55,
            'specialAttack': 45,
            'defense': 65,
            'specialDefense': 45,
            'speed': 45,
        },
    },
    {
        'id': 783,
        'name': 'Hakamo-o',
        'type': [PokemonType.Dragon, PokemonType.Fighting],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Hakamo-o', 'Kommo-o', 45)],
        'base': {
            'hitpoints': 55,
            'attack': 75,
            'specialAttack': 65,
            'defense': 90,
            'specialDefense': 70,
            'speed': 65,
        },
    },
    {
        'id': 784,
        'name': 'Kommo-o',
        'type': [PokemonType.Dragon, PokemonType.Fighting],
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 45,
        'base': {
            'hitpoints': 75,
            'attack': 110,
            'specialAttack': 100,
            'defense': 125,
            'specialDefense': 105,
            'speed': 85,
        },
    },
    {
        'id': 785,
        'name': 'Tapu Koko',
        'type': [PokemonType.Electric, PokemonType.Fairy],
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 3,
        'base': {
            'hitpoints': 70,
            'attack': 115,
            'specialAttack': 95,
            'defense': 85,
            'specialDefense': 75,
            'speed': 130,
        },
    },
    {
        'id': 786,
        'name': 'Tapu Lele',
        'type': [PokemonType.Psychic, PokemonType.Fairy],
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 3,
        'base': {
            'hitpoints': 70,
            'attack': 85,
            'specialAttack': 130,
            'defense': 75,
            'specialDefense': 115,
            'speed': 95,
        },
    },
    {
        'id': 787,
        'name': 'Tapu Bulu',
        'type': [PokemonType.Grass, PokemonType.Fairy],
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 3,
        'base': {
            'hitpoints': 70,
            'attack': 130,
            'specialAttack': 85,
            'defense': 115,
            'specialDefense': 95,
            'speed': 75,
        },
    },
    {
        'id': 788,
        'name': 'Tapu Fini',
        'type': [PokemonType.Water, PokemonType.Fairy],
        'eggCycles': 15,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 3,
        'base': {
            'hitpoints': 70,
            'attack': 75,
            'specialAttack': 95,
            'defense': 115,
            'specialDefense': 130,
            'speed': 85,
        },
    },
    {
        'id': 789,
        'name': 'Cosmog',
        'type': [PokemonType.Psychic],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 40,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Cosmog', 'Cosmoem', 43)],
        'base': {
            'hitpoints': 43,
            'attack': 29,
            'specialAttack': 29,
            'defense': 31,
            'specialDefense': 31,
            'speed': 37,
        },
    },
    {
        'id': 790,
        'name': 'Cosmoem',
        'type': [PokemonType.Psychic],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
        'evolutions': [new LevelEvolution('Cosmoem', 'Solgaleo', 53)],
        'base': {
            'hitpoints': 43,
            'attack': 29,
            'specialAttack': 29,
            'defense': 131,
            'specialDefense': 131,
            'speed': 37,
        },
    },
    {
        'id': 791,
        'name': 'Solgaleo',
        'type': [PokemonType.Psychic, PokemonType.Steel],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
        'base': {
            'hitpoints': 137,
            'attack': 137,
            'specialAttack': 113,
            'defense': 107,
            'specialDefense': 89,
            'speed': 97,
        },
    },
    {
        'id': 792,
        'name': 'Lunala',
        'type': [PokemonType.Psychic, PokemonType.Ghost],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
        'base': {
            'hitpoints': 137,
            'attack': 113,
            'specialAttack': 137,
            'defense': 89,
            'specialDefense': 107,
            'speed': 97,
        },
    },
    {
        'id': 793,
        'name': 'Nihilego',
        'type': [PokemonType.Rock, PokemonType.Poison],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
        'base': {
            'hitpoints': 109,
            'attack': 53,
            'specialAttack': 127,
            'defense': 47,
            'specialDefense': 131,
            'speed': 103,
        },
    },
    {
        'id': 794,
        'name': 'Buzzwole',
        'type': [PokemonType.Bug, PokemonType.Fighting],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
        'base': {
            'hitpoints': 107,
            'attack': 139,
            'specialAttack': 53,
            'defense': 139,
            'specialDefense': 53,
            'speed': 79,
        },
    },
    {
        'id': 795,
        'name': 'Pheromosa',
        'type': [PokemonType.Bug, PokemonType.Fighting],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
        'base': {
            'hitpoints': 71,
            'attack': 137,
            'specialAttack': 137,
            'defense': 37,
            'specialDefense': 37,
            'speed': 151,
        },
    },
    {
        'id': 796,
        'name': 'Xurkitree',
        'type': [PokemonType.Electric],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
        'base': {
            'hitpoints': 83,
            'attack': 89,
            'specialAttack': 173,
            'defense': 71,
            'specialDefense': 71,
            'speed': 83,
        },
    },
    {
        'id': 797,
        'name': 'Celesteela',
        'type': [PokemonType.Steel, PokemonType.Flying],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
        'base': {
            'hitpoints': 97,
            'attack': 101,
            'specialAttack': 107,
            'defense': 103,
            'specialDefense': 101,
            'speed': 61,
        },
    },
    {
        'id': 798,
        'name': 'Kartana',
        'type': [PokemonType.Grass, PokemonType.Steel],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
        'base': {
            'hitpoints': 59,
            'attack': 181,
            'specialAttack': 59,
            'defense': 131,
            'specialDefense': 31,
            'speed': 109,
        },
    },
    {
        'id': 799,
        'name': 'Guzzlord',
        'type': [PokemonType.Dark, PokemonType.Dragon],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 45,
        'base': {
            'hitpoints': 223,
            'attack': 101,
            'specialAttack': 97,
            'defense': 53,
            'specialDefense': 53,
            'speed': 43,
        },
    },
    {
        'id': 800,
        'name': 'Necrozma',
        'type': [PokemonType.Psychic],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 255,
        'base': {
            'hitpoints': 97,
            'attack': 107,
            'specialAttack': 127,
            'defense': 101,
            'specialDefense': 89,
            'speed': 79,
        },
    },
    {
        'id': 801,
        'name': 'Magearna',
        'type': [PokemonType.Steel, PokemonType.Fairy],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 3,
        'base': {
            'hitpoints': 80,
            'attack': 95,
            'specialAttack': 130,
            'defense': 115,
            'specialDefense': 115,
            'speed': 65,
        },
    },
    {
        'id': 802,
        'name': 'Marshadow',
        'type': [PokemonType.Fighting, PokemonType.Ghost],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': null,
        'catchRate': 3,
        'base': {
            'hitpoints': 90,
            'attack': 125,
            'specialAttack': 90,
            'defense': 80,
            'specialDefense': 90,
            'speed': 125,
        },
    },
    {
        'id': 803,
        'name': 'Poipole',
        'type': [PokemonType.Poison],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 189,
        'catchRate': 45,
        'evolutions': [new StoneEvolution('Poipole', 'Naganadel', GameConstants.StoneType.None)],
        'base': {
            'hitpoints': 67,
            'attack': 73,
            'specialAttack': 73,
            'defense': 67,
            'specialDefense': 67,
            'speed': 73,
        },
    },
    {
        'id': 804,
        'name': 'Naganadel',
        'type': [PokemonType.Poison, PokemonType.Dragon],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 243,
        'catchRate': 45,
        'base': {
            'hitpoints': 73,
            'attack': 73,
            'specialAttack': 127,
            'defense': 73,
            'specialDefense': 73,
            'speed': 121,
        },
    },
    {
        'id': 805,
        'name': 'Stakataka',
        'type': [PokemonType.Rock, PokemonType.Steel],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 257,
        'catchRate': 30,
        'base': {
            'hitpoints': 61,
            'attack': 131,
            'specialAttack': 53,
            'defense': 211,
            'specialDefense': 101,
            'speed': 13,
        },
    },
    {
        'id': 806,
        'name': 'Blacephalon',
        'type': [PokemonType.Fire, PokemonType.Ghost],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 257,
        'catchRate': 30,
        'base': {
            'hitpoints': 53,
            'attack': 127,
            'specialAttack': 151,
            'defense': 53,
            'specialDefense': 79,
            'speed': 107,
        },
    },
    {
        'id': 807,
        'name': 'Zeraora',
        'type': [PokemonType.Electric],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 88,
            'attack': 112,
            'specialAttack': 102,
            'defense': 75,
            'specialDefense': 80,
            'speed': 143,
        },
    },
    {
        'id': 808,
        'name': 'Meltan',
        'type': [PokemonType.Steel],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 135,
        'catchRate': 3,
        'evolutions': [new StoneEvolution('Meltan', 'Melmetal', GameConstants.StoneType.None)],
        'base': {
            'hitpoints': 46,
            'attack': 65,
            'specialAttack': 55,
            'defense': 65,
            'specialDefense': 35,
            'speed': 34,
        },
    },
    {
        'id': 809,
        'name': 'Melmetal',
        'type': [PokemonType.Steel],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 270,
        'catchRate': 3,
        'base': {
            'hitpoints': 135,
            'attack': 143,
            'specialAttack': 80,
            'defense': 143,
            'specialDefense': 65,
            'speed': 34,
        },
    },
    {
        'id': 810,
        'name': 'Grookey',
        'type': [PokemonType.Grass],
        'base': {
            'hitpoints': 50,
            'attack': 65,
            'specialAttack': 40,
            'defense': 50,
            'specialDefense': 40,
            'speed': 65,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [],
    },
    {
        'id': 811,
        'name': 'Thwackey',
        'type': [PokemonType.Grass],
        'base': {
            'hitpoints': 70,
            'attack': 85,
            'specialAttack': 55,
            'defense': 70,
            'specialDefense': 60,
            'speed': 80,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [],
    },
    {
        'id': 812,
        'name': 'Rillaboom',
        'type': [PokemonType.Grass],
        'base': {
            'hitpoints': 100,
            'attack': 125,
            'specialAttack': 60,
            'defense': 90,
            'specialDefense': 70,
            'speed': 85,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 265,
        'catchRate': 45,
    },
    {
        'id': 813,
        'name': 'Scorbunny',
        'type': [PokemonType.Fire],
        'base': {
            'hitpoints': 50,
            'attack': 71,
            'specialAttack': 40,
            'defense': 40,
            'specialDefense': 40,
            'speed': 69,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [],
    },
    {
        'id': 814,
        'name': 'Raboot',
        'type': [PokemonType.Fire],
        'base': {
            'hitpoints': 65,
            'attack': 86,
            'specialAttack': 55,
            'defense': 60,
            'specialDefense': 60,
            'speed': 94,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [],
    },
    {
        'id': 815,
        'name': 'Cinderace',
        'type': [PokemonType.Fire],
        'base': {
            'hitpoints': 80,
            'attack': 116,
            'specialAttack': 65,
            'defense': 75,
            'specialDefense': 75,
            'speed': 119,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 265,
        'catchRate': 45,
    },
    {
        'id': 816,
        'name': 'Sobble',
        'type': [PokemonType.Water],
        'base': {
            'hitpoints': 50,
            'attack': 40,
            'specialAttack': 70,
            'defense': 40,
            'specialDefense': 40,
            'speed': 70,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 45,
        'evolutions': [],
    },
    {
        'id': 817,
        'name': 'Drizzile',
        'type': [PokemonType.Water],
        'base': {
            'hitpoints': 65,
            'attack': 60,
            'specialAttack': 95,
            'defense': 55,
            'specialDefense': 55,
            'speed': 90,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 147,
        'catchRate': 45,
        'evolutions': [],
    },
    {
        'id': 818,
        'name': 'Inteleon',
        'type': [PokemonType.Water],
        'base': {
            'hitpoints': 70,
            'attack': 85,
            'specialAttack': 125,
            'defense': 65,
            'specialDefense': 65,
            'speed': 120,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumslow,
        'exp': 265,
        'catchRate': 45,
    },
    {
        'id': 819,
        'name': 'Skwovet',
        'type': [PokemonType.Normal],
        'base': {
            'hitpoints': 70,
            'attack': 55,
            'specialAttack': 35,
            'defense': 55,
            'specialDefense': 35,
            'speed': 25,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 55,
        'catchRate': 255,
        'evolutions': [],
    },
    {
        'id': 820,
        'name': 'Greedent',
        'type': [PokemonType.Normal],
        'base': {
            'hitpoints': 120,
            'attack': 95,
            'specialAttack': 55,
            'defense': 95,
            'specialDefense': 75,
            'speed': 20,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 161,
        'catchRate': 90,
    },
    {
        'id': 821,
        'name': 'Rookidee',
        'type': [PokemonType.Flying],
        'base': {
            'hitpoints': 38,
            'attack': 47,
            'specialAttack': 33,
            'defense': 35,
            'specialDefense': 35,
            'speed': 57,
        },
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 49,
        'catchRate': 255,
        'evolutions': [],
    },
    {
        'id': 822,
        'name': 'Corvisquire',
        'type': [PokemonType.Flying],
        'base': {
            'hitpoints': 68,
            'attack': 67,
            'specialAttack': 43,
            'defense': 55,
            'specialDefense': 55,
            'speed': 77,
        },
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 128,
        'catchRate': 120,
        'evolutions': [],
    },
    {
        'id': 823,
        'name': 'Corviknight',
        'type': [
            PokemonType.Flying,
            PokemonType.Steel,
        ],
        'base': {
            'hitpoints': 98,
            'attack': 87,
            'specialAttack': 53,
            'defense': 105,
            'specialDefense': 85,
            'speed': 67,
        },
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 248,
        'catchRate': 45,
    },
    {
        'id': 824,
        'name': 'Blipbug',
        'type': [PokemonType.Bug],
        'base': {
            'hitpoints': 25,
            'attack': 20,
            'specialAttack': 25,
            'defense': 20,
            'specialDefense': 45,
            'speed': 45,
        },
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 36,
        'catchRate': 255,
        'evolutions': [],
    },
    {
        'id': 825,
        'name': 'Dottler',
        'type': [
            PokemonType.Bug,
            PokemonType.Psychic,
        ],
        'base': {
            'hitpoints': 50,
            'attack': 35,
            'specialAttack': 50,
            'defense': 80,
            'specialDefense': 90,
            'speed': 30,
        },
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 117,
        'catchRate': 120,
        'evolutions': [],
    },
    {
        'id': 826,
        'name': 'Orbeetle',
        'type': [
            PokemonType.Bug,
            PokemonType.Psychic,
        ],
        'base': {
            'hitpoints': 60,
            'attack': 45,
            'specialAttack': 80,
            'defense': 110,
            'specialDefense': 120,
            'speed': 90,
        },
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 253,
        'catchRate': 45,
    },
    {
        'id': 827,
        'name': 'Nickit',
        'type': [PokemonType.Dark],
        'base': {
            'hitpoints': 40,
            'attack': 28,
            'specialAttack': 47,
            'defense': 28,
            'specialDefense': 52,
            'speed': 50,
        },
        'eggCycles': 15,
        'levelType': LevelType.fast,
        'exp': 49,
        'catchRate': 255,
        'evolutions': [],
    },
    {
        'id': 828,
        'name': 'Thievul',
        'type': [PokemonType.Dark],
        'base': {
            'hitpoints': 70,
            'attack': 58,
            'specialAttack': 87,
            'defense': 58,
            'specialDefense': 92,
            'speed': 90,
        },
        'eggCycles': 15,
        'levelType': LevelType.fast,
        'exp': 159,
        'catchRate': 127,
    },
    {
        'id': 829,
        'name': 'Gossifleur',
        'type': [PokemonType.Grass],
        'base': {
            'hitpoints': 40,
            'attack': 40,
            'specialAttack': 40,
            'defense': 60,
            'specialDefense': 60,
            'speed': 10,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 50,
        'catchRate': 190,
        'evolutions': [],
    },
    {
        'id': 830,
        'name': 'Eldegoss',
        'type': [PokemonType.Grass],
        'base': {
            'hitpoints': 60,
            'attack': 50,
            'specialAttack': 80,
            'defense': 90,
            'specialDefense': 120,
            'speed': 60,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 161,
        'catchRate': 75,
    },
    {
        'id': 831,
        'name': 'Wooloo',
        'type': [PokemonType.Normal],
        'base': {
            'hitpoints': 42,
            'attack': 40,
            'specialAttack': 40,
            'defense': 55,
            'specialDefense': 45,
            'speed': 48,
        },
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 122,
        'catchRate': 255,
        'evolutions': [],
    },
    {
        'id': 832,
        'name': 'Dubwool',
        'type': [PokemonType.Normal],
        'base': {
            'hitpoints': 72,
            'attack': 80,
            'specialAttack': 60,
            'defense': 100,
            'specialDefense': 90,
            'speed': 88,
        },
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 172,
        'catchRate': 127,
    },
    {
        'id': 833,
        'name': 'Chewtle',
        'type': [PokemonType.Water],
        'base': {
            'hitpoints': 50,
            'attack': 64,
            'specialAttack': 38,
            'defense': 50,
            'specialDefense': 38,
            'speed': 44,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 57,
        'catchRate': 255,
        'evolutions': [],
    },
    {
        'id': 834,
        'name': 'Drednaw',
        'type': [
            PokemonType.Water,
            PokemonType.Rock,
        ],
        'base': {
            'hitpoints': 90,
            'attack': 115,
            'specialAttack': 48,
            'defense': 90,
            'specialDefense': 68,
            'speed': 74,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 170,
        'catchRate': 75,
    },
    {
        'id': 835,
        'name': 'Yamper',
        'type': [PokemonType.Electric],
        'base': {
            'hitpoints': 59,
            'attack': 45,
            'specialAttack': 40,
            'defense': 50,
            'specialDefense': 50,
            'speed': 26,
        },
        'eggCycles': 20,
        'levelType': LevelType.fast,
        'exp': 54,
        'catchRate': 255,
        'evolutions': [],
    },
    {
        'id': 836,
        'name': 'Boltund',
        'type': [PokemonType.Electric],
        'base': {
            'hitpoints': 69,
            'attack': 90,
            'specialAttack': 90,
            'defense': 60,
            'specialDefense': 60,
            'speed': 121,
        },
        'eggCycles': 20,
        'levelType': LevelType.fast,
        'exp': 172,
        'catchRate': 45,
    },
    {
        'id': 837,
        'name': 'Rolycoly',
        'type': [PokemonType.Rock],
        'base': {
            'hitpoints': 30,
            'attack': 40,
            'specialAttack': 40,
            'defense': 50,
            'specialDefense': 50,
            'speed': 30,
        },
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 48,
        'catchRate': 255,
        'evolutions': [],
    },
    {
        'id': 838,
        'name': 'Carkol',
        'type': [
            PokemonType.Rock,
            PokemonType.Fire,
        ],
        'base': {
            'hitpoints': 80,
            'attack': 60,
            'specialAttack': 60,
            'defense': 90,
            'specialDefense': 70,
            'speed': 50,
        },
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 144,
        'catchRate': 120,
        'evolutions': [],
    },
    {
        'id': 839,
        'name': 'Coalossal',
        'type': [
            PokemonType.Rock,
            PokemonType.Fire,
        ],
        'base': {
            'hitpoints': 110,
            'attack': 80,
            'specialAttack': 80,
            'defense': 120,
            'specialDefense': 90,
            'speed': 30,
        },
        'eggCycles': 15,
        'levelType': LevelType.mediumslow,
        'exp': 255,
        'catchRate': 45,
    },
    {
        'id': 840,
        'name': 'Applin',
        'type': [
            PokemonType.Grass,
            PokemonType.Dragon,
        ],
        'base': {
            'hitpoints': 40,
            'attack': 40,
            'specialAttack': 40,
            'defense': 80,
            'specialDefense': 40,
            'speed': 20,
        },
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 52,
        'catchRate': 255,
        'evolutions': [],
    },
    {
        'id': 841,
        'name': 'Flapple',
        'type': [
            PokemonType.Grass,
            PokemonType.Dragon,
        ],
        'base': {
            'hitpoints': 70,
            'attack': 110,
            'specialAttack': 95,
            'defense': 80,
            'specialDefense': 60,
            'speed': 70,
        },
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 170,
        'catchRate': 45,
    },
    {
        'id': 842,
        'name': 'Appletun',
        'type': [
            PokemonType.Grass,
            PokemonType.Dragon,
        ],
        'base': {
            'hitpoints': 110,
            'attack': 85,
            'specialAttack': 100,
            'defense': 80,
            'specialDefense': 80,
            'speed': 30,
        },
        'eggCycles': 20,
        'levelType': LevelType.erratic,
        'exp': 170,
        'catchRate': 45,
    },
    {
        'id': 843,
        'name': 'Silicobra',
        'type': [PokemonType.Ground],
        'base': {
            'hitpoints': 52,
            'attack': 57,
            'specialAttack': 35,
            'defense': 75,
            'specialDefense': 50,
            'speed': 46,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 63,
        'catchRate': 255,
        'evolutions': [],
    },
    {
        'id': 844,
        'name': 'Sandaconda',
        'type': [PokemonType.Ground],
        'base': {
            'hitpoints': 72,
            'attack': 107,
            'specialAttack': 65,
            'defense': 125,
            'specialDefense': 70,
            'speed': 71,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 179,
        'catchRate': 120,
    },
    {
        'id': 845,
        'name': 'Cramorant',
        'type': [
            PokemonType.Flying,
            PokemonType.Water,
        ],
        'base': {
            'hitpoints': 70,
            'attack': 85,
            'specialAttack': 85,
            'defense': 55,
            'specialDefense': 95,
            'speed': 85,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 45,
    },
    {
        'id': 846,
        'name': 'Arrokuda',
        'type': [PokemonType.Water],
        'base': {
            'hitpoints': 41,
            'attack': 63,
            'specialAttack': 40,
            'defense': 40,
            'specialDefense': 30,
            'speed': 66,
        },
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 56,
        'catchRate': 255,
        'evolutions': [],
    },
    {
        'id': 847,
        'name': 'Barraskewda',
        'type': [PokemonType.Water],
        'base': {
            'hitpoints': 61,
            'attack': 123,
            'specialAttack': 60,
            'defense': 60,
            'specialDefense': 50,
            'speed': 136,
        },
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 172,
        'catchRate': 60,
    },
    {
        'id': 848,
        'name': 'Toxel',
        'type': [
            PokemonType.Electric,
            PokemonType.Poison,
        ],
        'base': {
            'hitpoints': 40,
            'attack': 38,
            'specialAttack': 54,
            'defense': 35,
            'specialDefense': 35,
            'speed': 40,
        },
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 48,
        'catchRate': 75,
        'evolutions': [],
    },
    {
        'id': 849,
        'name': 'Toxtricity',
        'type': [
            PokemonType.Electric,
            PokemonType.Poison,
        ],
        'base': {
            'hitpoints': 75,
            'attack': 98,
            'specialAttack': 114,
            'defense': 70,
            'specialDefense': 70,
            'speed': 75,
        },
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 176,
        'catchRate': 45,
    },
    {
        'id': 850,
        'name': 'Sizzlipede',
        'type': [
            PokemonType.Fire,
            PokemonType.Bug,
        ],
        'base': {
            'hitpoints': 50,
            'attack': 65,
            'specialAttack': 50,
            'defense': 45,
            'specialDefense': 50,
            'speed': 45,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 61,
        'catchRate': 190,
        'evolutions': [],
    },
    {
        'id': 851,
        'name': 'Centiskorch',
        'type': [
            PokemonType.Fire,
            PokemonType.Bug,
        ],
        'base': {
            'hitpoints': 100,
            'attack': 115,
            'specialAttack': 90,
            'defense': 65,
            'specialDefense': 90,
            'speed': 65,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 184,
        'catchRate': 75,
    },
    {
        'id': 852,
        'name': 'Clobbopus',
        'type': [PokemonType.Fighting],
        'base': {
            'hitpoints': 50,
            'attack': 68,
            'specialAttack': 50,
            'defense': 60,
            'specialDefense': 50,
            'speed': 32,
        },
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'catchRate': 180,
        'evolutions': [],
    },
    {
        'id': 853,
        'name': 'Grapploct',
        'type': [PokemonType.Fighting],
        'base': {
            'hitpoints': 80,
            'attack': 118,
            'specialAttack': 70,
            'defense': 90,
            'specialDefense': 80,
            'speed': 42,
        },
        'eggCycles': 25,
        'levelType': LevelType.mediumslow,
        'exp': 168,
        'catchRate': 45,
    },
    {
        'id': 854,
        'name': 'Sinistea',
        'type': [PokemonType.Ghost],
        'base': {
            'hitpoints': 40,
            'attack': 45,
            'specialAttack': 74,
            'defense': 45,
            'specialDefense': 54,
            'speed': 50,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 62,
        'catchRate': 120,
        'evolutions': [],
    },
    {
        'id': 855,
        'name': 'Polteageist',
        'type': [PokemonType.Ghost],
        'base': {
            'hitpoints': 60,
            'attack': 65,
            'specialAttack': 134,
            'defense': 65,
            'specialDefense': 114,
            'speed': 70,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 178,
        'catchRate': 60,
    },
    {
        'id': 856,
        'name': 'Hatenna',
        'type': [PokemonType.Psychic],
        'base': {
            'hitpoints': 42,
            'attack': 30,
            'specialAttack': 56,
            'defense': 45,
            'specialDefense': 53,
            'speed': 39,
        },
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 53,
        'catchRate': 235,
        'evolutions': [],
    },
    {
        'id': 857,
        'name': 'Hattrem',
        'type': [PokemonType.Psychic],
        'base': {
            'hitpoints': 57,
            'attack': 40,
            'specialAttack': 86,
            'defense': 65,
            'specialDefense': 73,
            'speed': 49,
        },
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 130,
        'catchRate': 120,
        'evolutions': [],
    },
    {
        'id': 858,
        'name': 'Hatterene',
        'type': [
            PokemonType.Psychic,
            PokemonType.Fairy,
        ],
        'base': {
            'hitpoints': 57,
            'attack': 90,
            'specialAttack': 136,
            'defense': 95,
            'specialDefense': 103,
            'speed': 29,
        },
        'eggCycles': 20,
        'levelType': LevelType.slow,
        'exp': 255,
        'catchRate': 45,
    },
    {
        'id': 859,
        'name': 'Impidimp',
        'type': [
            PokemonType.Dark,
            PokemonType.Fairy,
        ],
        'base': {
            'hitpoints': 45,
            'attack': 45,
            'specialAttack': 55,
            'defense': 30,
            'specialDefense': 40,
            'speed': 50,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 53,
        'catchRate': 255,
        'evolutions': [],
    },
    {
        'id': 860,
        'name': 'Morgrem',
        'type': [
            PokemonType.Dark,
            PokemonType.Fairy,
        ],
        'base': {
            'hitpoints': 65,
            'attack': 60,
            'specialAttack': 75,
            'defense': 45,
            'specialDefense': 55,
            'speed': 70,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 130,
        'catchRate': 120,
        'evolutions': [],
    },
    {
        'id': 861,
        'name': 'Grimmsnarl',
        'type': [
            PokemonType.Dark,
            PokemonType.Fairy,
        ],
        'base': {
            'hitpoints': 95,
            'attack': 120,
            'specialAttack': 95,
            'defense': 65,
            'specialDefense': 75,
            'speed': 60,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 255,
        'catchRate': 45,
    },
    {
        'id': 862,
        'name': 'Obstagoon',
        'type': [
            PokemonType.Dark,
            PokemonType.Normal,
        ],
        'base': {
            'hitpoints': 93,
            'attack': 90,
            'specialAttack': 60,
            'defense': 101,
            'specialDefense': 81,
            'speed': 95,
        },
        'eggCycles': 15,
        'levelType': LevelType.mediumfast,
        'exp': 260,
        'catchRate': 45,
    },
    {
        'id': 863,
        'name': 'Perrserker',
        'type': [PokemonType.Steel],
        'base': {
            'hitpoints': 70,
            'attack': 110,
            'specialAttack': 50,
            'defense': 100,
            'specialDefense': 60,
            'speed': 50,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 154,
        'catchRate': 90,
    },
    {
        'id': 864,
        'name': 'Cursola',
        'type': [PokemonType.Ghost],
        'base': {
            'hitpoints': 60,
            'attack': 95,
            'specialAttack': 145,
            'defense': 50,
            'specialDefense': 130,
            'speed': 30,
        },
        'eggCycles': 20,
        'levelType': LevelType.fast,
        'exp': 179,
        'catchRate': 30,
    },
    {
        'id': 865,
        'name': "Sirfetch'd",
        'type': [PokemonType.Fighting],
        'base': {
            'hitpoints': 62,
            'attack': 135,
            'specialAttack': 68,
            'defense': 95,
            'specialDefense': 82,
            'speed': 65,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 177,
        'catchRate': 45,
    },
    {
        'id': 866,
        'name': 'Mr. Rime',
        'type': [
            PokemonType.Psychic,
            PokemonType.Ice,
        ],
        'base': {
            'hitpoints': 80,
            'attack': 85,
            'specialAttack': 110,
            'defense': 75,
            'specialDefense': 100,
            'speed': 70,
        },
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 182,
        'catchRate': 45,
    },
    {
        'id': 867,
        'name': 'Runerigus',
        'type': [
            PokemonType.Ground,
            PokemonType.Ghost,
        ],
        'base': {
            'hitpoints': 58,
            'attack': 95,
            'specialAttack': 50,
            'defense': 145,
            'specialDefense': 105,
            'speed': 30,
        },
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 169,
        'catchRate': 90,
    },
    {
        'id': 868,
        'name': 'Milcery',
        'type': [PokemonType.Fairy],
        'base': {
            'hitpoints': 45,
            'attack': 40,
            'specialAttack': 50,
            'defense': 40,
            'specialDefense': 61,
            'speed': 34,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 54,
        'catchRate': 200,
        'evolutions': [],
    },
    {
        'id': 869,
        'name': 'Alcremie',
        'type': [PokemonType.Fairy],
        'base': {
            'hitpoints': 65,
            'attack': 60,
            'specialAttack': 110,
            'defense': 75,
            'specialDefense': 121,
            'speed': 64,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 173,
        'catchRate': 100,
    },
    {
        'id': 870,
        'name': 'Falinks',
        'type': [PokemonType.Fighting],
        'base': {
            'hitpoints': 65,
            'attack': 100,
            'specialAttack': 70,
            'defense': 100,
            'specialDefense': 60,
            'speed': 75,
        },
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 165,
        'catchRate': 45,
    },
    {
        'id': 871,
        'name': 'Pincurchin',
        'type': [PokemonType.Electric],
        'base': {
            'hitpoints': 48,
            'attack': 101,
            'specialAttack': 91,
            'defense': 95,
            'specialDefense': 85,
            'speed': 15,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 152,
        'catchRate': 75,
    },
    {
        'id': 872,
        'name': 'Snom',
        'type': [
            PokemonType.Ice,
            PokemonType.Bug,
        ],
        'base': {
            'hitpoints': 30,
            'attack': 25,
            'specialAttack': 45,
            'defense': 35,
            'specialDefense': 30,
            'speed': 20,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 37,
        'catchRate': 190,
        'evolutions': [],
    },
    {
        'id': 873,
        'name': 'Frosmoth',
        'type': [
            PokemonType.Ice,
            PokemonType.Bug,
        ],
        'base': {
            'hitpoints': 70,
            'attack': 65,
            'specialAttack': 125,
            'defense': 60,
            'specialDefense': 90,
            'speed': 65,
        },
        'eggCycles': 20,
        'levelType': LevelType.mediumfast,
        'exp': 166,
        'catchRate': 75,
    },
    {
        'id': 874,
        'name': 'Stonjourner',
        'type': [PokemonType.Rock],
        'base': {
            'hitpoints': 100,
            'attack': 125,
            'specialAttack': 20,
            'defense': 135,
            'specialDefense': 20,
            'speed': 70,
        },
        'eggCycles': 25,
        'levelType': LevelType.slow,
        'exp': 165,
        'catchRate': 60,
    },
    {
        'id': 875,
        'name': 'Eiscue',
        'type': [PokemonType.Ice],
        'base': {
            'hitpoints': 75,
            'attack': 80,
            'specialAttack': 65,
            'defense': 110,
            'specialDefense': 90,
            'speed': 50,
        },
        'eggCycles': 25,
        'levelType': LevelType.slow,
        'exp': 165,
        'catchRate': 60,
    },
    {
        'id': 876,
        'name': 'Indeedee',
        'type': [
            PokemonType.Psychic,
            PokemonType.Normal,
        ],
        'base': {
            'hitpoints': 60,
            'attack': 65,
            'specialAttack': 105,
            'defense': 55,
            'specialDefense': 95,
            'speed': 95,
        },
        'eggCycles': 40,
        'levelType': LevelType.fast,
        'exp': 166,
        'catchRate': 30,
    },
    {
        'id': 877,
        'name': 'Morpeko',
        'type': [
            PokemonType.Electric,
            PokemonType.Dark,
        ],
        'base': {
            'hitpoints': 58,
            'attack': 95,
            'specialAttack': 70,
            'defense': 58,
            'specialDefense': 58,
            'speed': 97,
        },
        'eggCycles': 10,
        'levelType': LevelType.mediumfast,
        'exp': 153,
        'catchRate': 180,
    },
    {
        'id': 878,
        'name': 'Cufant',
        'type': [PokemonType.Steel],
        'base': {
            'hitpoints': 72,
            'attack': 80,
            'specialAttack': 40,
            'defense': 49,
            'specialDefense': 49,
            'speed': 40,
        },
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 66,
        'catchRate': 190,
        'evolutions': [],
    },
    {
        'id': 879,
        'name': 'Copperajah',
        'type': [PokemonType.Steel],
        'base': {
            'hitpoints': 122,
            'attack': 130,
            'specialAttack': 80,
            'defense': 69,
            'specialDefense': 69,
            'speed': 30,
        },
        'eggCycles': 25,
        'levelType': LevelType.mediumfast,
        'exp': 175,
        'catchRate': 90,
    },
    {
        'id': 880,
        'name': 'Dracozolt',
        'type': [
            PokemonType.Electric,
            PokemonType.Dragon,
        ],
        'base': {
            'hitpoints': 90,
            'attack': 100,
            'specialAttack': 80,
            'defense': 90,
            'specialDefense': 70,
            'speed': 75,
        },
        'eggCycles': 35,
        'levelType': LevelType.slow,
        'exp': 177,
        'catchRate': 45,
    },
    {
        'id': 881,
        'name': 'Arctozolt',
        'type': [
            PokemonType.Electric,
            PokemonType.Ice,
        ],
        'base': {
            'hitpoints': 90,
            'attack': 100,
            'specialAttack': 90,
            'defense': 90,
            'specialDefense': 80,
            'speed': 55,
        },
        'eggCycles': 35,
        'levelType': LevelType.slow,
        'exp': 177,
        'catchRate': 45,
    },
    {
        'id': 882,
        'name': 'Dracovish',
        'type': [
            PokemonType.Water,
            PokemonType.Dragon,
        ],
        'base': {
            'hitpoints': 90,
            'attack': 90,
            'specialAttack': 70,
            'defense': 100,
            'specialDefense': 80,
            'speed': 75,
        },
        'eggCycles': 35,
        'levelType': LevelType.slow,
        'exp': 177,
        'catchRate': 45,
    },
    {
        'id': 883,
        'name': 'Arctovish',
        'type': [
            PokemonType.Water,
            PokemonType.Ice,
        ],
        'base': {
            'hitpoints': 90,
            'attack': 90,
            'specialAttack': 80,
            'defense': 100,
            'specialDefense': 90,
            'speed': 55,
        },
        'eggCycles': 35,
        'levelType': LevelType.slow,
        'exp': 177,
        'catchRate': 45,
    },
    {
        'id': 884,
        'name': 'Duraludon',
        'type': [
            PokemonType.Steel,
            PokemonType.Dragon,
        ],
        'base': {
            'hitpoints': 70,
            'attack': 95,
            'specialAttack': 120,
            'defense': 115,
            'specialDefense': 50,
            'speed': 85,
        },
        'eggCycles': 30,
        'levelType': LevelType.mediumfast,
        'exp': 187,
        'catchRate': 45,
    },
    {
        'id': 885,
        'name': 'Dreepy',
        'type': [
            PokemonType.Dragon,
            PokemonType.Ghost,
        ],
        'base': {
            'hitpoints': 28,
            'attack': 60,
            'specialAttack': 40,
            'defense': 30,
            'specialDefense': 30,
            'speed': 82,
        },
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 54,
        'catchRate': 45,
        'evolutions': [],
    },
    {
        'id': 886,
        'name': 'Drakloak',
        'type': [
            PokemonType.Dragon,
            PokemonType.Ghost,
        ],
        'base': {
            'hitpoints': 68,
            'attack': 80,
            'specialAttack': 60,
            'defense': 50,
            'specialDefense': 50,
            'speed': 102,
        },
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 144,
        'catchRate': 45,
        'evolutions': [],
    },
    {
        'id': 887,
        'name': 'Dragapult',
        'type': [
            PokemonType.Dragon,
            PokemonType.Ghost,
        ],
        'base': {
            'hitpoints': 88,
            'attack': 120,
            'specialAttack': 100,
            'defense': 75,
            'specialDefense': 75,
            'speed': 142,
        },
        'eggCycles': 40,
        'levelType': LevelType.slow,
        'exp': 300,
        'catchRate': 45,
    },
    {
        'id': 888,
        'name': 'Zacian',
        'type': [
            PokemonType.Fairy,
            PokemonType.Steel,
        ],
        'base': {
            'hitpoints': 92,
            'attack': 130,
            'specialAttack': 80,
            'defense': 115,
            'specialDefense': 115,
            'speed': 138,
        },
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 335,
        'catchRate': 10,
    },
    {
        'id': 889,
        'name': 'Zamazenta',
        'type': [
            PokemonType.Fighting,
            PokemonType.Steel,
        ],
        'base': {
            'hitpoints': 92,
            'attack': 130,
            'specialAttack': 80,
            'defense': 115,
            'specialDefense': 115,
            'speed': 138,
        },
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 335,
        'catchRate': 10,
    },
    {
        'id': 890,
        'name': 'Eternatus',
        'type': [
            PokemonType.Poison,
            PokemonType.Dragon,
        ],
        'base': {
            'hitpoints': 140,
            'attack': 85,
            'specialAttack': 145,
            'defense': 95,
            'specialDefense': 95,
            'speed': 130,
        },
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 345,
        'catchRate': 255,
    },
    {
        'id': 891,
        'name': 'Kubfu',
        'type': [PokemonType.Fighting],
        'base': {
            'hitpoints': 60,
            'attack': 90,
            'specialAttack': 53,
            'defense': 60,
            'specialDefense': 50,
            'speed': 72,
        },
        'catchRate': 3,
        'evolutions': [],
        // TODO: might be wrong
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 335,
    },
    {
        'id': 892,
        'name': 'Urshifu',
        'type': [
            PokemonType.Fighting,
            PokemonType.Dark,
        ],
        'base': {
            'hitpoints': 100,
            'attack': 130,
            'specialAttack': 63,
            'defense': 100,
            'specialDefense': 60,
            'speed': 97,
        },
        'catchRate': 3,
        // TODO: might be wrong
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 335,
    },
    {
        'id': 893,
        'name': 'Zarude',
        'type': [
            PokemonType.Dark,
            PokemonType.Grass,
        ],
        'base': {
            'hitpoints': 105,
            'attack': 120,
            'specialAttack': 70,
            'defense': 105,
            'specialDefense': 95,
            'speed': 105,
        },
        'catchRate': 3,
        // TODO: might be wrong
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 335,
    },
    // Missingno.
    {
        'id': 0,
        'name': 'MissingNo.',
        'nativeRegion': GameConstants.Region.none,
        'catchRate': 45,
        'type': [PokemonType.Flying, PokemonType.Normal],
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'eggCycles': 20,
        'base': {
            'hitpoints': 178,
            'attack': 19,
            'specialAttack': 23,
            'defense': 11,
            'specialDefense': 23,
            'speed': 0,
        },
    },
    // Event Pokemon only between -1 → -99
    {
        'id': -1,
        'name': 'Flying Pikachu',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 50,
        'type': [PokemonType.Electric, PokemonType.Flying],
        'levelType': LevelType.mediumfast,
        'exp': 112,
        'eggCycles': 20,
        'base': {
            'hitpoints': 35,
            'attack': 55,
            'specialAttack': 50,
            'defense': 40,
            'specialDefense': 50,
            'speed': 90,
        },
    },
    {
        'id': -2,
        'name': 'Surfing Pikachu',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 50,
        'type': [PokemonType.Electric, PokemonType.Water],
        'levelType': LevelType.mediumfast,
        'exp': 112,
        'eggCycles': 20,
        'base': {
            'hitpoints': 35,
            'attack': 55,
            'specialAttack': 50,
            'defense': 40,
            'specialDefense': 50,
            'speed': 90,
        },
    },
    {
        'id': -3,
        'name': 'Armored Mewtwo',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 2,
        'type': [PokemonType.Psychic],
        'levelType': LevelType.slow,
        'exp': 306,
        'eggCycles': 120,
        'base': {
            'hitpoints': 106,
            'attack': 110,
            'specialAttack': 154,
            'defense': 100,
            'specialDefense': 100,
            'speed': 130,
        },
    },
    {
        'id': -4,
        'name': 'Santa Dragonite',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 20,
        'type': [PokemonType.Dragon, PokemonType.Flying],
        'levelType': LevelType.slow,
        'exp': 270,
        'eggCycles': 40,
        'base': {
            'hitpoints': 91,
            'attack': 134,
            'specialAttack': 100,
            'defense': 95,
            'specialDefense': 100,
            'speed': 80,
        },
    },
    {
        'id': -5,
        'name': 'Spooky Togepi',
        'nativeRegion': GameConstants.Region.johto,
        'catchRate': 30,
        'type': [PokemonType.Fairy],
        'levelType': LevelType.fast,
        'exp': 49,
        'eggCycles': 10,
        'base': {
            'hitpoints': 35,
            'attack': 25,
            'specialAttack': 40,
            'defense': 65,
            'specialDefense': 65,
            'speed': 20,
        },
    },
    {
        'id': -6,
        'name': 'Spooky Bulbasaur',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 25,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'eggCycles': 20,
        'base': {
            'hitpoints': 45,
            'attack': 49,
            'specialAttack': 65,
            'defense': 49,
            'specialDefense': 65,
            'speed': 45,
        },
    },
    {
        'id': -7,
        'name': 'Pikachu (Gengar)',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 50,
        'type': [PokemonType.Electric],
        'levelType': LevelType.mediumfast,
        'exp': 112,
        'eggCycles': 20,
        'base': {
            'hitpoints': 35,
            'attack': 55,
            'specialAttack': 50,
            'defense': 40,
            'specialDefense': 50,
            'speed': 90,
        },
    },
    {
        'id': -8,
        'name': 'Lets go Pikachu',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 50,
        'type': [PokemonType.Electric],
        'levelType': LevelType.mediumfast,
        'exp': 112,
        'eggCycles': 20,
        'base': {
            'hitpoints': 35,
            'attack': 55,
            'specialAttack': 50,
            'defense': 40,
            'specialDefense': 50,
            'speed': 90,
        },
    },
    {
        'id': -9,
        'name': 'Lets go Eevee',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 255,
        'type': [PokemonType.Normal],
        'levelType': LevelType.mediumfast,
        'exp': 65,
        'eggCycles': 35,
        'base': {
            'hitpoints': 55,
            'attack': 55,
            'specialAttack': 45,
            'defense': 50,
            'specialDefense': 65,
            'speed': 55,
        },
    },
    {
        'id': -10,
        'name': 'Bulbasaur (clone)',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 64,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Bulbasaur (clone)', 'Ivysaur (clone)', 16)],
        'base': {
            'hitpoints': 45,
            'attack': 49,
            'specialAttack': 65,
            'defense': 49,
            'specialDefense': 65,
            'speed': 45,
        },
    },
    {
        'id': -11,
        'name': 'Ivysaur (clone)',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Ivysaur (clone)', 'Venusaur (clone)', 32)],
        'base': {
            'hitpoints': 60,
            'attack': 62,
            'specialAttack': 80,
            'defense': 63,
            'specialDefense': 80,
            'speed': 60,
        },
    },
    {
        'id': -12,
        'name': 'Venusaur (clone)',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 45,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'levelType': LevelType.mediumslow,
        'exp': 236,
        'eggCycles': 20,
        'base': {
            'hitpoints': 80,
            'attack': 82,
            'specialAttack': 100,
            'defense': 83,
            'specialDefense': 100,
            'speed': 80,
        },
    },
    {
        'id': -13,
        'name': 'Charmander (clone)',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumslow,
        'exp': 62,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Charmander (clone)', 'Charmeleon (clone)', 16)],
        'base': {
            'hitpoints': 39,
            'attack': 52,
            'specialAttack': 60,
            'defense': 43,
            'specialDefense': 50,
            'speed': 65,
        },
    },
    {
        'id': -14,
        'name': 'Charmeleon (clone)',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 45,
        'type': [PokemonType.Fire],
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Charmeleon (clone)', 'Charizard (clone)', 36)],
        'base': {
            'hitpoints': 58,
            'attack': 64,
            'specialAttack': 80,
            'defense': 58,
            'specialDefense': 65,
            'speed': 80,
        },
    },
    {
        'id': -15,
        'name': 'Charizard (clone)',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 45,
        'type': [PokemonType.Fire, PokemonType.Flying],
        'levelType': LevelType.mediumslow,
        'exp': 240,
        'eggCycles': 20,
        'base': {
            'hitpoints': 78,
            'attack': 84,
            'specialAttack': 109,
            'defense': 78,
            'specialDefense': 85,
            'speed': 100,
        },
    },
    {
        'id': -16,
        'name': 'Squirtle (clone)',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 45,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumslow,
        'exp': 63,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Squirtle (clone)', 'Wartortle (clone)', 16)],
        'base': {
            'hitpoints': 44,
            'attack': 48,
            'specialAttack': 50,
            'defense': 65,
            'specialDefense': 64,
            'speed': 43,
        },
    },
    {
        'id': -17,
        'name': 'Wartortle (clone)',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 45,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumslow,
        'exp': 142,
        'eggCycles': 20,
        'evolutions': [new LevelEvolution('Wartortle (clone)', 'Blastoise (clone)', 36)],
        'base': {
            'hitpoints': 59,
            'attack': 63,
            'specialAttack': 65,
            'defense': 80,
            'specialDefense': 80,
            'speed': 58,
        },
    },
    {
        'id': -18,
        'name': 'Blastoise (clone)',
        'nativeRegion': GameConstants.Region.kanto,
        'catchRate': 45,
        'type': [PokemonType.Water],
        'levelType': LevelType.mediumslow,
        'exp': 239,
        'eggCycles': 20,
        'base': {
            'hitpoints': 79,
            'attack': 83,
            'specialAttack': 85,
            'defense': 100,
            'specialDefense': 105,
            'speed': 78,
        },
    },
    // Megas only between -100 → -199
    {
        'id': -100,
        'name': 'Mega Venusaur',
        'nativeRegion': GameConstants.Region.kanto,
        'type': [PokemonType.Grass, PokemonType.Poison],
        'eggCycles': 120,
        'levelType': LevelType.mediumslow,
        'exp': 281,
        'catchRate': 10,
        'base': {
            'hitpoints': 80,
            'attack': 100,
            'specialAttack': 122,
            'defense': 123,
            'specialDefense': 120,
            'speed': 80,
        },
    },
    {
        'id': -101,
        'name': 'Mega Charizard X',
        'nativeRegion': GameConstants.Region.kanto,
        'type': [PokemonType.Fire, PokemonType.Dragon],
        'eggCycles': 120,
        'levelType': LevelType.mediumslow,
        'exp': 285,
        'catchRate': 10,
        'base': {
            'hitpoints': 78,
            'attack': 130,
            'specialAttack': 130,
            'defense': 111,
            'specialDefense': 85,
            'speed': 100,
        },
    },
    // {
    //     'id': -102,
    //     'name': 'Mega Charizard Y',
    //     'type': [PokemonType.Fire, PokemonType.Flying],
    //     'eggCycles': 120,
    //     'levelType': LevelType.mediumslow,
    //     'exp': 285,
    //     'catchRate': 10,
    //     'base': {
    //         'hitpoints': 78,
    //         'attack': 104,
    //         'specialAttack': 154,
    //         'defense': 78,
    //         'specialDefense': 115,
    //         'speed': 100,
    //     },
    // },
    // {
    //     'id': -103,
    //     'name': 'Mega Blastoise',
    //     'type': [PokemonType.Water],
    //     'eggCycles': 120,
    //     'levelType': LevelType.mediumslow,
    //     'exp': 284,
    //     'catchRate': 10,
    //     'base': {
    //         'hitpoints': 79,
    //         'attack': 103,
    //         'specialAttack': 135,
    //         'defense': 120,
    //         'specialDefense': 115,
    //         'speed': 78,
    //     },
    // },
    // {
    //     'id': -104,
    //     'name': 'Mega Beedrill',
    //     'type': [PokemonType.Bug, PokemonType.Poison],
    //     'eggCycles': 80,
    //     'levelType': LevelType.mediumfast,
    //     'exp': 223,
    //     'catchRate': 10,
    //     'base': {
    //         'hitpoints': 65,
    //         'attack': 150,
    //         'specialAttack': 15,
    //         'defense': 40,
    //         'specialDefense': 80,
    //         'speed': 145,
    //     },
    // },
    // {
    //     'id': -105,
    //     'name': 'Mega Pidgeot',
    //     'type': [PokemonType.Normal, PokemonType.Flying],
    //     'eggCycles': 80,
    //     'levelType': LevelType.mediumfast,
    //     'exp': 261,
    //     'catchRate': 10,
    //     'base': {
    //         'hitpoints': 83,
    //         'attack': 80,
    //         'specialAttack': 135,
    //         'defense': 80,
    //         'specialDefense': 80,
    //         'speed': 121,
    //     },
    // },
    // {
    //     'id': -106,
    //     'name': 'Mega Alakazam',
    //     'type': [PokemonType.Psychic],
    //     'eggCycles': 80,
    //     'levelType': LevelType.mediumslow,
    //     'exp': 270,
    //     'catchRate': 10,
    //     'base': {
    //         'hitpoints': 55,
    //         'attack': 50,
    //         'specialAttack': 175,
    //         'defense': 65,
    //         'specialDefense': 105,
    //         'speed': 150,
    //     },
    // },
    // {
    //     'id': -107,
    //     'name': 'Mega Slowbro',
    //     'type': [PokemonType.Water, PokemonType.Psychic],
    //     'eggCycles': 80,
    //     'levelType': LevelType.mediumfast,
    //     'exp': 207,
    //     'catchRate': 10,
    //     'base': {
    //         'hitpoints': 95,
    //         'attack': 75,
    //         'specialAttack': 130,
    //         'defense': 180,
    //         'specialDefense': 80,
    //         'speed': 30,
    //     },
    // },
    // {
    //     'id': -108,
    //     'name': 'Mega Gengar',
    //     'type': [PokemonType.Poison, PokemonType.Ghost],
    //     'eggCycles': 120,
    //     'levelType': LevelType.mediumslow,
    //     'exp': 207,
    //     'catchRate': 10,
    //     'base': {
    //         'hitpoints': 60,
    //         'attack': 65,
    //         'specialAttack': 170,
    //         'defense': 80,
    //         'specialDefense': 95,
    //         'speed': 130,
    //     },
    // },
    // {
    //     'id': -109,
    //     'name': 'Mega Kangaskhan',
    //     'type': [PokemonType.Normal],
    //     'eggCycles': 120,
    //     'levelType': LevelType.mediumslow,
    //     'exp': 207,
    //     'catchRate': 10,
    //     'base': {
    //         'hitpoints': 105,
    //         'attack': 125,
    //         'specialAttack': 60,
    //         'defense': 100,
    //         'specialDefense': 100,
    //         'speed': 100,
    //     },
    // },
    // {
    //     'id': -110,
    //     'name': 'Mega Pinsir',
    //     'type': [PokemonType.Bug, PokemonType.Flying],
    //     'eggCycles': 120,
    //     'levelType': LevelType.mediumslow,
    //     'exp': 210,
    //     'catchRate': 10,
    //     'base': {
    //         'hitpoints': 65,
    //         'attack': 155,
    //         'specialAttack': 65,
    //         'defense': 120,
    //         'specialDefense': 90,
    //         'speed': 105,
    //     },
    // },
    {
        'id': -111,
        'name': 'Mega Gyarados',
        'nativeRegion': GameConstants.Region.kanto,
        'type': [PokemonType.Water, PokemonType.Dark],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 224,
        'catchRate': 10,
        'base': {
            'hitpoints': 95,
            'attack': 155,
            'specialAttack': 70,
            'defense': 109,
            'specialDefense': 130,
            'speed': 81,
        },
    },
    // {
    //     'id': -112,
    //     'name': 'Mega Aerodactyl',
    //     'type': [PokemonType.Water, PokemonType.Dark],
    //     'eggCycles': 120,
    //     'levelType': LevelType.mediumslow,
    //     'exp': 215,
    //     'catchRate': 10,
    //     'base': {
    //         'hitpoints': 80,
    //         'attack': 135,
    //         'specialAttack': 70,
    //         'defense': 85,
    //         'specialDefense': 95,
    //         'speed': 150,
    //     },
    // },
    // {
    //     'id': -113,
    //     'name': 'Mega Mewtwo X',
    //     'type': [PokemonType.Psychic, PokemonType.Fighting],
    //     'eggCycles': 120,
    //     'levelType': LevelType.slow,
    //     'exp': 351,
    //     'catchRate': 2,
    //     'base': {
    //         'hitpoints': 106,
    //         'attack': 190,
    //         'specialAttack': 154,
    //         'defense': 100,
    //         'specialDefense': 100,
    //         'speed': 130,
    //     },
    // },
    // {
    //     'id': -114,
    //     'name': 'Mega Mewtwo Y',
    //     'type': [PokemonType.Psychic, PokemonType.Fighting],
    //     'eggCycles': 120,
    //     'levelType': LevelType.slow,
    //     'exp': 351,
    //     'catchRate': 2,
    //     'base': {
    //         'hitpoints': 106,
    //         'attack': 150,
    //         'specialAttack': 194,
    //         'defense': 70,
    //         'specialDefense': 120,
    //         'speed': 140,
    //     },
    // },
    {
        'id': -115,
        'name': 'Mega Rayquaza',
        'nativeRegion': GameConstants.Region.hoenn,
        'type': [PokemonType.Dragon, PokemonType.Flying],
        'eggCycles': 120,
        'levelType': LevelType.slow,
        'exp': 351,
        'catchRate': 1,
        'base': {
            'hitpoints': 105,
            'attack': 180,
            'specialAttack': 180,
            'defense': 100,
            'specialDefense': 100,
            'speed': 115,
        },
    },
];
const pokemonNameIndex = {};
// TODO move to its own initialize method that gets called on game start.
pokemonList.forEach(p => {
    var _a;
    const baseOffense = 2 * Math.round(Math.sqrt(p.base.attack * p.base.specialAttack) + Math.sqrt(p.base.speed));
    const baseDefense = 2 * Math.round(Math.sqrt(p.base.defense * p.base.specialDefense) + Math.sqrt(p.base.speed));
    const baseStamina = 2 * p.base.hitpoints;
    p.attack = Math.max(10, Math.floor(Math.sqrt(baseDefense * baseStamina) * baseOffense / 250));
    if (p.baby) {
        (_a = p.evolutions) === null || _a === void 0 ? void 0 : _a.forEach(evo => pokemonDevolutionMap[evo.getEvolvedPokemon()] = evo.basePokemon);
    }
    p.nativeRegion = p.nativeRegion || GameConstants.TotalPokemonsPerRegion.findIndex(maxRegionID => maxRegionID >= p.id);
    pokemonNameIndex[p.name.toLowerCase()] = p;
});
const pokemonMap = new Proxy(pokemonList, {
    get: (pokemon, prop) => {
        if (!isNaN(+prop)) {
            const id = +prop;
            const pokemonByID = pokemon.find(p => p.id == id);
            if (pokemonByID) {
                return pokemonByID;
            }
        }
        switch (prop) {
            case 'random':
                return (_max = 0, _min = 0) => {
                    // minimum 0
                    const min = Math.max(0, Math.min(_min, _max));
                    // maximum is same as however many pokemon are available
                    const max = Math.min(pokemon.length, Math.max(_min, _max));
                    const random = Math.floor(Math.random() * (max ? max : pokemon.length) + min);
                    return pokemon[random];
                };
            default:
                return pokemonNameIndex[prop.toLowerCase()] || pokemon[prop] || pokemon.find(p => p.id == 0);
        }
    },
});
///<reference path="PokemonList.ts"/>
///<reference path="../GameConstants.ts"/>
var PokemonLocationType;
(function (PokemonLocationType) {
    PokemonLocationType[PokemonLocationType["Route"] = 0] = "Route";
    PokemonLocationType[PokemonLocationType["Roaming"] = 1] = "Roaming";
    PokemonLocationType[PokemonLocationType["Dungeon"] = 2] = "Dungeon";
    PokemonLocationType[PokemonLocationType["DungeonBoss"] = 3] = "DungeonBoss";
    PokemonLocationType[PokemonLocationType["Evolution"] = 4] = "Evolution";
    PokemonLocationType[PokemonLocationType["Egg"] = 5] = "Egg";
    PokemonLocationType[PokemonLocationType["Baby"] = 6] = "Baby";
    PokemonLocationType[PokemonLocationType["Shop"] = 7] = "Shop";
    PokemonLocationType[PokemonLocationType["Fossil"] = 8] = "Fossil";
    PokemonLocationType[PokemonLocationType["Safari"] = 9] = "Safari";
})(PokemonLocationType || (PokemonLocationType = {}));
class PokemonHelper {
    static getPokemonsWithEvolution(evoType) {
        return App.game.party.caughtPokemon.filter((partyPokemon) => {
            if (!partyPokemon.evolutions) {
                return false;
            }
            for (const evolution of partyPokemon.evolutions) {
                if (evolution instanceof StoneEvolution && evolution.stone == evoType && evolution.isSatisfied() && PokemonHelper.calcNativeRegion(evolution.getEvolvedPokemon()) <= player.highestRegion()) {
                    return true;
                }
            }
            return false;
        });
    }
    static getEvolution(id, evoType) {
        const pokemon = App.game.party.caughtPokemon.find(p => p.id == id);
        if (pokemon) {
            for (const evolution of pokemon.evolutions) {
                if (evolution instanceof StoneEvolution && evolution.stone == evoType) {
                    return evolution.getEvolvedPokemon();
                }
            }
        }
        return '';
    }
    static getPokemonById(id) {
        return this.getPokemonByName(pokemonMap[id].name);
    }
    static getPokemonByName(name) {
        var _a;
        const basePokemon = pokemonMap[name];
        if (!basePokemon) {
            console.warn('Could not find pokemon', name);
            return;
        }
        const type1 = basePokemon['type'][0];
        const type2 = (_a = basePokemon['type'][1]) !== null && _a !== void 0 ? _a : PokemonType.None;
        const eggCycles = basePokemon['eggCycles'] || 20;
        return new DataPokemon(basePokemon['id'], basePokemon['name'], basePokemon['catchRate'], basePokemon['evolutions'], type1, type2, basePokemon['attack'], basePokemon['levelType'], basePokemon['exp'], eggCycles, basePokemon['heldItem']);
    }
    static typeStringToId(id) {
        return PokemonType[id];
    }
    static typeIdToString(id) {
        return PokemonType[id];
    }
    static getImage(pokemon, shiny) {
        let src = 'assets/images/';
        if (shiny) {
            src += 'shiny';
        }
        src += `pokemon/${pokemon.id}.png`;
        return src;
    }
    static getPokeballImage(pokemonName) {
        let src = '';
        if (App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(pokemonName).id)) {
            src = 'assets/images/pokeball/Pokeball-';
            if (App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(pokemonName).id, true)) {
                src += 'shiny-';
            }
            src += 'small.png';
        }
        return src;
    }
    static calcNativeRegion(pokemonName) {
        const pokemon = pokemonMap[pokemonName];
        if (pokemon.nativeRegion != undefined) {
            return pokemon.nativeRegion;
        }
        const id = pokemon.id;
        const region = GameConstants.TotalPokemonsPerRegion.findIndex(maxRegionID => maxRegionID >= id);
        return region >= 0 ? region : GameConstants.Region.none;
    }
    static calcUniquePokemonsByRegion(region) {
        if (region != 0) {
            return GameConstants.TotalPokemonsPerRegion[region] - Number(GameConstants.TotalPokemonsPerRegion[region - 1]);
        }
        else {
            return GameConstants.TotalPokemonsPerRegion[region];
        }
    }
    static getPokemonRegionRoutes(pokemonName) {
        const regionRoutes = {};
        Routes.regionRoutes.forEach(routeData => {
            const region = routeData.region;
            Object.entries(routeData.pokemon).forEach(([pokemon, encounterType]) => {
                if (Object.values(encounterType).flat().includes(pokemonName)) {
                    if (!regionRoutes[region]) {
                        regionRoutes[region] = [];
                    }
                    regionRoutes[region].push(routeData.number);
                }
            });
        });
        return regionRoutes;
    }
    static getPokemonDungeons(pokemonName) {
        const dungeons = [];
        Object.entries(dungeonList).forEach(([dungeonName, dungeon]) => {
            // Dungeon Grunt
            if (dungeon.pokemonList.includes(pokemonName)) {
                dungeons.push(dungeonName);
            }
        });
        return dungeons;
    }
    static getPokemonBossDungeons(pokemonName) {
        const dungeons = [];
        Object.entries(dungeonList).forEach(([dungeonName, dungeon]) => {
            var _a;
            // Dungeon Boss
            const boss = dungeon.bossList.find(boss => boss.name == pokemonName);
            if (boss) {
                const data = {
                    dungeon: dungeonName,
                    requirements: (_a = boss.requirement) === null || _a === void 0 ? void 0 : _a.hint(),
                };
                dungeons.push(data);
            }
        });
        return dungeons;
    }
    static getPokemonEggs(pokemonName) {
        const eggTypes = [];
        Object.entries(App.game.breeding.hatchList).forEach(([eggType, pokemonArr]) => {
            if (pokemonArr.flat().includes(pokemonName)) {
                eggTypes.push(EggType[eggType]);
            }
        });
        return eggTypes;
    }
    static getPokemonShops(pokemonName) {
        const shops = [];
        Object.entries(TownList).forEach(([townName, town]) => {
            if (town.shop() && town.shop().items()) {
                const hasPokemon = town.shop().items().find(item => item.name() == pokemonName);
                if (hasPokemon) {
                    shops.push(townName);
                }
            }
        });
        return shops;
    }
    static getPokemonRoamingRegions(pokemonName) {
        const regions = [];
        Object.entries(RoamingPokemonList.list).forEach(([region, pokemonArr]) => {
            var _a;
            const pokemon = pokemonArr.find(r => r.pokemon.name == pokemonName);
            if (pokemon) {
                const data = {
                    region: +region,
                    requirements: (_a = pokemon.unlockRequirement) === null || _a === void 0 ? void 0 : _a.hint(),
                };
                regions.push(data);
            }
        });
        return regions;
    }
    static getPokemonParents(pokemonName) {
        const parents = [];
        Object.entries(pokemonDevolutionMap).forEach(([parent, baby]) => {
            if (baby == pokemonName) {
                parents.push(parent);
            }
        });
        return parents;
    }
    static getPokemonFossils(pokemonName) {
        const fossils = [];
        Object.entries(GameConstants.FossilToPokemon).forEach(([fossil, pokemon]) => {
            if (pokemon == pokemonName) {
                fossils.push(fossil);
            }
        });
        return fossils;
    }
    static getPokemonSafariChance(pokemonName) {
        const safariPokemon = SafariPokemon.list.find(p => p.name == pokemonName);
        return safariPokemon ? +((safariPokemon.weight / SafariPokemon.listWeight) * 100).toFixed(2) : 0;
    }
    static getPokemonPrevolution(pokemonName) {
        const evolutions = [];
        const prevolutionPokemon = pokemonList.filter(p => p.evolutions ? p.evolutions.find(e => e.getEvolvedPokemon() == pokemonName) : false);
        prevolutionPokemon.forEach(p => p.evolutions.forEach(e => {
            if (e.getEvolvedPokemon() == pokemonName) {
                evolutions.push(e);
            }
        }));
        return evolutions;
    }
    static getPokemonLevelPrevolution(pokemonName) {
        const evolutionPokemon = pokemonList.find(p => p.evolutions ? p.evolutions.find(e => e.type.includes(EvolutionType.Level) && e.getEvolvedPokemon() == pokemonName) : null);
        return evolutionPokemon ? evolutionPokemon.evolutions.find(e => e.getEvolvedPokemon() == pokemonName) : undefined;
    }
    static getPokemonStonePrevolution(pokemonName) {
        const evolutionPokemon = pokemonList.find(p => p.evolutions ? p.evolutions.find(e => e.type.includes(EvolutionType.Stone) && e.getEvolvedPokemon() == pokemonName) : null);
        return evolutionPokemon ? evolutionPokemon.evolutions.find(e => e.getEvolvedPokemon() == pokemonName) : undefined;
    }
}
PokemonHelper.getPokemonLocations = (pokemonName) => {
    const encounterTypes = {};
    // Routes
    const regionRoutes = PokemonHelper.getPokemonRegionRoutes(pokemonName);
    if (Object.keys(regionRoutes).length) {
        encounterTypes[PokemonLocationType.Route] = regionRoutes;
    }
    // Dungeons
    const dungeons = PokemonHelper.getPokemonDungeons(pokemonName);
    if (dungeons.length) {
        encounterTypes[PokemonLocationType.Dungeon] = dungeons;
    }
    // Dungeon Boss
    const bossDungeons = PokemonHelper.getPokemonBossDungeons(pokemonName);
    if (bossDungeons.length) {
        encounterTypes[PokemonLocationType.DungeonBoss] = bossDungeons;
    }
    // Eggs
    const eggs = PokemonHelper.getPokemonEggs(pokemonName);
    if (eggs.length) {
        encounterTypes[PokemonLocationType.Egg] = eggs;
    }
    // Shops
    const shops = PokemonHelper.getPokemonShops(pokemonName);
    if (shops.length) {
        encounterTypes[PokemonLocationType.Shop] = shops;
    }
    // Roaming
    const roaming = PokemonHelper.getPokemonRoamingRegions(pokemonName);
    if (roaming.length) {
        encounterTypes[PokemonLocationType.Roaming] = roaming;
    }
    // Baby
    const parents = PokemonHelper.getPokemonParents(pokemonName);
    if (parents.length) {
        encounterTypes[PokemonLocationType.Baby] = parents;
    }
    // Fossil
    const fossils = PokemonHelper.getPokemonFossils(pokemonName);
    if (fossils.length) {
        encounterTypes[PokemonLocationType.Fossil] = fossils;
    }
    // Safari
    const safariChance = PokemonHelper.getPokemonSafariChance(pokemonName);
    if (safariChance) {
        encounterTypes[PokemonLocationType.Safari] = `${safariChance}%`;
    }
    // Evolution
    const evolutions = PokemonHelper.getPokemonPrevolution(pokemonName);
    if (evolutions.length) {
        encounterTypes[PokemonLocationType.Evolution] = evolutions;
    }
    // Return the list of items
    return encounterTypes;
};
class BattlePokemon {
    /**
     * In case you want to manually create a Pokémon instead of generating it from the route number
     * @param name Pokémon name
     * @param id Pokémon
     * @param type1 First type of the Pokémon
     * @param type2 Second type of the Pokémon
     * @param maxHealth max health that the Pokémon can have
     * @param level level is 2 times the current route
     * @param catchRate base chance of catching this Pokémon
     * @param exp base exp reward for defeating this Pokémon
     * @param money exp base exp reward for defeating this Pokémon
     * @param shiny
     * @param [heldItem] item to gain on defeat of this pokemon
     */
    constructor(name, id, type1 = PokemonType.None, type2 = PokemonType.None, maxHealth, level, catchRate, exp, money, shiny, shardReward = 1, heldItem) {
        this.name = name;
        this.id = id;
        this.type1 = type1;
        this.type2 = type2;
        this.level = level;
        this.catchRate = catchRate;
        this.exp = exp;
        this.money = money;
        this.shiny = shiny;
        this.shardReward = shardReward;
        this.heldItem = heldItem;
        this.health = ko.observable(maxHealth);
        this.maxHealth = ko.observable(maxHealth);
        this.healthPercentage = ko.observable(100);
    }
    isAlive() {
        return this.health() > 0;
    }
    /**
     * Lost health without
     * @param damage
     */
    damage(damage) {
        this.health(Math.max(0, this.health() - damage));
        this.healthPercentage(Math.floor(this.health() / this.maxHealth() * 100));
    }
    defeat(trainer = false) {
        GameHelper.incrementObservable(App.game.statistics.pokemonDefeated[this.id]);
        GameHelper.incrementObservable(App.game.statistics.totalPokemonDefeated);
        if (this.shiny) {
            GameHelper.incrementObservable(App.game.statistics.shinyPokemonDefeated[this.id]);
            GameHelper.incrementObservable(App.game.statistics.totalShinyPokemonDefeated);
        }
        if (this.money) {
            App.game.wallet.gainMoney(this.money);
        }
        if (this.heldItem && ItemList[this.heldItem]) {
            const item = ItemList[this.heldItem];
            const name = GameConstants.humanifyString(item.name());
            item.gain(1);
            const msg = `${this.name} dropped ${GameHelper.anOrA(name)} ${name}!`;
            Notifier.notify({
                message: `The enemy ${msg}`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.dropped_item,
            });
            App.game.logbook.newLog(LogBookTypes.FOUND, `An enemy ${msg}`);
        }
        App.game.party.gainExp(this.exp, this.level, trainer);
        App.game.shards.gainShards(this.shardReward, this.type1);
        App.game.shards.gainShards(this.shardReward, this.type2);
    }
}
///<reference path="PokemonHelper.ts"/>
///<reference path="BattlePokemon.ts"/>
class PokemonFactory {
    /**
     * Generate a wild pokemon based on route, region and the dataList.
     * @param route route that the player is on.
     * @param region region that the player is in.
     * @returns {any}
     */
    static generateWildPokemon(route, region) {
        if (!MapHelper.validRoute(route, region)) {
            return new BattlePokemon('Rattata', 19, PokemonType.Psychic, PokemonType.None, 10000, 1, 0, 0, 0, false, 1);
        }
        let name;
        if (PokemonFactory.roamingEncounter(route, region)) {
            const possible = RoamingPokemonList.getRegionalRoamers(region);
            name = possible[Math.floor(Math.random() * possible.length)].pokemon.name;
        }
        else {
            const pokemonList = RouteHelper.getAvailablePokemonList(route, region);
            const rand = Math.floor(Math.random() * pokemonList.length);
            name = pokemonList[rand];
        }
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        // TODO this monster formula needs to be improved. Preferably with graphs :D
        const maxHealth = PokemonFactory.routeHealth(route, region);
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const level = this.routeLevel(route, region);
        const heldItem = this.generateHeldItem(basePokemon.heldItem, GameConstants.ROUTE_HELD_ITEM_CHANCE);
        const money = this.routeMoney(route, region);
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        if (shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.shiny_long,
                setting: NotificationConstants.NotificationSetting.encountered_shiny,
            });
        }
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, level, catchRate, exp, money, shiny, 1, heldItem);
    }
    static routeLevel(route, region) {
        return Math.floor(MapHelper.normalizeRoute(route, region) * 2 + 20 * Math.pow(region, 2.3));
    }
    static routeHealth(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        const health = Math.max(20, Math.floor(Math.pow((100 * Math.pow(route, 2.2) / 12), 1.15))) || 20;
        return health;
    }
    static routeMoney(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        const deviation = Math.floor(Math.random() * 51) - 25;
        const money = Math.max(10, 3 * route + 5 * Math.pow(route, 1.15) + deviation);
        return money;
    }
    static routeDungeonTokens(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        const tokens = Math.max(1, 6 * Math.pow(route * 2 / (3 / Math.round(1 + region / 3)), 1.05));
        return tokens;
    }
    /**
     * Calculate if a shiny has spawned.
     * @param chance Base chance, should be from GameConstants.SHINY_CHANCE.*
     * @returns {boolean}
     */
    static generateShiny(chance) {
        chance /= App.game.oakItems.calculateBonus(OakItems.OakItem.Shiny_Charm);
        const rand = Math.floor(Math.random() * chance) + 1;
        if (rand <= 1) {
            App.game.oakItems.use(OakItems.OakItem.Shiny_Charm);
            return true;
        }
        return false;
    }
    static generatePartyPokemon(id, shiny = false) {
        const dataPokemon = PokemonHelper.getPokemonById(id);
        return new PartyPokemon(dataPokemon.id, dataPokemon.name, dataPokemon.evolutions, dataPokemon.attack, 0, 0, false, shiny);
    }
    /**
     * Generate a trainer pokemon based on gymName, index and the dataList.
     * @param gymName name of the gym that the player is fighting.
     * @param index index of the pokémon that is being generated.
     * @returns {any}
     */
    static generateTrainerPokemon(gymName, index) {
        const gym = gymList[gymName];
        const pokemon = gym.pokemons[index];
        const basePokemon = PokemonHelper.getPokemonByName(pokemon.name);
        const exp = basePokemon.exp * 1.5;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        return new BattlePokemon(pokemon.name, basePokemon.id, basePokemon.type1, basePokemon.type2, pokemon.maxHealth, pokemon.level, 0, exp, 0, shiny, GameConstants.GYM_SHARDS);
    }
    static generateDungeonPokemon(pokemonList, chestsOpened, baseHealth, level) {
        const random = GameConstants.randomIntBetween(0, pokemonList.length - 1);
        const name = pokemonList[random];
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const maxHealth = Math.floor(baseHealth * (1 + (chestsOpened / 5)));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const money = 0;
        const heldItem = this.generateHeldItem(basePokemon.heldItem, GameConstants.DUNGEON_HELD_ITEM_CHANCE);
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_DUNGEON);
        if (shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.shiny_long,
                setting: NotificationConstants.NotificationSetting.encountered_shiny,
            });
        }
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, level, catchRate, exp, money, shiny, GameConstants.DUNGEON_SHARDS, heldItem);
    }
    static generateDungeonBoss(bossPokemonList, chestsOpened) {
        const random = GameConstants.randomIntBetween(0, bossPokemonList.length - 1);
        const bossPokemon = bossPokemonList[random];
        const name = bossPokemon.name;
        const basePokemon = PokemonHelper.getPokemonByName(name);
        const id = basePokemon.id;
        const maxHealth = Math.floor(bossPokemon.baseHealth * (1 + (chestsOpened / 5)));
        const catchRate = this.catchRateHelper(basePokemon.catchRate);
        const exp = basePokemon.exp;
        const money = 0;
        const shiny = this.generateShiny(GameConstants.SHINY_CHANCE_DUNGEON);
        if (shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.shiny_long,
                setting: NotificationConstants.NotificationSetting.encountered_shiny,
            });
        }
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, bossPokemon.level, catchRate, exp, money, shiny, GameConstants.DUNGEON_BOSS_SHARDS);
    }
    static roamingEncounter(route, region) {
        const routes = GameConstants.RegionRoute[region];
        const roamingPokemon = RoamingPokemonList.getRegionalRoamers(region);
        if (!routes || !roamingPokemon || !roamingPokemon.length) {
            return false;
        }
        return PokemonFactory.roamingChance(GameConstants.ROAMING_MAX_CHANCE, GameConstants.ROAMING_MIN_CHANCE, routes[1], routes[0], route);
    }
    static roamingChance(max, min, maxRoute, minRoute, curRoute) {
        return Math.random() < 1 / (max + ((min - max) * (maxRoute - curRoute) / (maxRoute - minRoute)));
    }
    static catchRateHelper(baseCatchRate, noVariation = false) {
        const catchVariation = noVariation ? 0 : GameConstants.randomIntBetween(-3, 3);
        const catchRateRaw = Math.floor(Math.pow(baseCatchRate, 0.75)) + catchVariation;
        return GameConstants.clipNumber(catchRateRaw, 0, 100);
    }
    static generateHeldItem(item, chance) {
        if (!item || !ItemList[item]) {
            return null;
        }
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.Item_magnet)()) {
            chance /= 1.5;
        }
        const rand = Math.floor(Math.random() * chance) + 1;
        if (rand <= 1) {
            return item;
        }
        return null;
    }
}
///<reference path="pokemons/PokemonFactory.ts"/>
/**
 * Handles all logic related to battling
 */
class Battle {
    /**
     * Probably not needed right now, but might be if we add more logic to a gameTick.
     */
    static tick() {
        this.counter = 0;
        this.pokemonAttack();
    }
    /**
     * Attacks with Pokémon and checks if the enemy is defeated.
     */
    static pokemonAttack() {
        var _a;
        // TODO: figure out a better way of handling this
        // Limit pokemon attack speed, Only allow 1 attack per 900ms
        const now = Date.now();
        if (this.lastPokemonAttack > now - 900) {
            return;
        }
        this.lastPokemonAttack = now;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        this.enemyPokemon().damage(App.game.party.calculatePokemonAttack(this.enemyPokemon().type1, this.enemyPokemon().type2));
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Attacks with clicks and checks if the enemy is defeated.
     */
    static clickAttack() {
        var _a;
        // TODO: figure out a better way of handling this
        // Limit click attack speed, Only allow 1 attack per 20ms (50 per second)
        const now = Date.now();
        if (this.lastClickAttack > now - 20) {
            return;
        }
        this.lastClickAttack = now;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        App.game.oakItems.use(OakItems.OakItem.Poison_Barb);
        GameHelper.incrementObservable(App.game.statistics.clickAttacks);
        this.enemyPokemon().damage(App.game.party.calculateClickAttack());
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Award the player with money and exp, and throw a Pokéball if applicable
     */
    static defeatPokemon() {
        const enemyPokemon = this.enemyPokemon();
        enemyPokemon.defeat();
        GameHelper.incrementObservable(App.game.statistics.routeKills[player.route()]);
        App.game.breeding.progressEggsBattle(player.route(), player.region);
        const isShiny = enemyPokemon.shiny;
        const pokeBall = App.game.pokeballs.calculatePokeballToUse(enemyPokemon.id, isShiny);
        if (pokeBall !== GameConstants.Pokeball.None) {
            this.prepareCatch(enemyPokemon, pokeBall);
            setTimeout(() => {
                this.attemptCatch(enemyPokemon);
                if (player.route() != 0) {
                    this.generateNewEnemy();
                }
            }, App.game.pokeballs.calculateCatchTime(pokeBall));
        }
        else {
            this.generateNewEnemy();
        }
        this.gainItem();
        player.lowerItemMultipliers();
    }
    /**
     * Generate a new enemy based on the current route and region.
     * Reset the counter.
     */
    static generateNewEnemy() {
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateWildPokemon(player.route(), player.region));
        const enemyPokemon = this.enemyPokemon();
        GameHelper.incrementObservable(App.game.statistics.pokemonEncountered[enemyPokemon.id]);
        GameHelper.incrementObservable(App.game.statistics.totalPokemonEncountered);
        if (enemyPokemon.shiny) {
            GameHelper.incrementObservable(App.game.statistics.shinyPokemonEncountered[enemyPokemon.id]);
            GameHelper.incrementObservable(App.game.statistics.totalShinyPokemonEncountered);
            App.game.logbook.newLog(LogBookTypes.SHINY, `You encountered a Shiny ${enemyPokemon.name} on route ${player.route()}.`);
        }
        else if (!App.game.party.alreadyCaughtPokemon(Battle.enemyPokemon().id)) {
            App.game.logbook.newLog(LogBookTypes.NEW, `You encountered a wild ${enemyPokemon.name} on route ${player.route()}.`);
        }
    }
    static calculateActualCatchRate(enemyPokemon, pokeBall) {
        const pokeballBonus = App.game.pokeballs.getCatchBonus(pokeBall);
        const oakBonus = App.game.oakItems.calculateBonus(OakItems.OakItem.Magic_Ball);
        const totalChance = GameConstants.clipNumber(enemyPokemon.catchRate + pokeballBonus + oakBonus, 0, 100);
        return totalChance;
    }
    static prepareCatch(enemyPokemon, pokeBall) {
        this.pokeball = ko.observable(pokeBall);
        this.catching(true);
        this.catchRateActual(this.calculateActualCatchRate(enemyPokemon, pokeBall));
        App.game.pokeballs.usePokeball(pokeBall);
    }
    static attemptCatch(enemyPokemon) {
        if (enemyPokemon == null) {
            this.catching(false);
            return;
        }
        const random = Math.floor(Math.random() * 100);
        if (random <= this.catchRateActual()) { // Caught
            this.catchPokemon(enemyPokemon);
        }
        else if (enemyPokemon.shiny) { // Failed to catch, Shiny
            App.game.logbook.newLog(LogBookTypes.ESCAPED, `The Shiny ${enemyPokemon.name} escaped!`);
        }
        else if (!App.game.party.alreadyCaughtPokemon(enemyPokemon.id)) { // Failed to catch, Uncaught
            App.game.logbook.newLog(LogBookTypes.ESCAPED, `The wild ${enemyPokemon.name} escaped!`);
        }
        this.catching(false);
        this.catchRateActual(null);
    }
    static catchPokemon(enemyPokemon) {
        var _a, _b;
        const route = player.route() || ((_b = (_a = player.town()) === null || _a === void 0 ? void 0 : _a.dungeon()) === null || _b === void 0 ? void 0 : _b.difficultyRoute) || 1;
        App.game.wallet.gainDungeonTokens(PokemonFactory.routeDungeonTokens(route, player.region));
        App.game.oakItems.use(OakItems.OakItem.Magic_Ball);
        App.game.party.gainPokemonById(enemyPokemon.id, enemyPokemon.shiny);
    }
    static gainItem() {
        const p = player.route() / 1600 + 0.009375;
        if (Math.random() < p) {
            App.game.farming.gainRandomBerry();
        }
    }
}
Battle.enemyPokemon = ko.observable(null);
Battle.counter = 0;
Battle.catching = ko.observable(false);
Battle.catchRateActual = ko.observable(null);
Battle.lastPokemonAttack = Date.now();
Battle.lastClickAttack = Date.now();
const changelogType = {
    UPDATE: { display: 'dark', label: 'UPDATE' },
    NEW: { display: 'success', label: 'NEW' },
    CHANGE: { display: 'primary', label: 'CHANGE' },
    FIXED: { display: 'warning', label: 'FIXED' },
    REMOVED: { display: 'danger', label: 'REMOVED' },
    EVENT: { display: 'info', label: 'EVENT' },
    DEFAULT: { display: 'default', label: '-' },
};
class Changelog {
    constructor(type = { display: 'default', label: '-' }, description) {
        this.type = type;
        this.description = description;
        if (type == changelogType.UPDATE) {
            this.description = `<code>${this.description}</code>`;
        }
    }
}
/**
 * Add your changes to the top of the changelog. Please do not increase the version number.
 *
 * MAJOR - Will stay at 0 during development, 1 after the first public release
 * MINOR - Will increment for each feature refactor or large changes to a feature
 * PATCH - Increment for small changes, bugfixes, UI changes.
 */
const changelogItems = [
    // v0.5.7
    new Changelog(changelogType.UPDATE, 'v0.5.7'),
    new Changelog(changelogType.NEW, 'Added setting for Hatchery egg ready to hatch animations'),
    new Changelog(changelogType.NEW, 'More NPCs in towns around Johto and Hoenn'),
    new Changelog(changelogType.NEW, 'Types displayed in Pokémon statistics modal'),
    new Changelog(changelogType.NEW, 'Underground Bomb is now upgradable'),
    new Changelog(changelogType.NEW, 'Buttons added to achievement modal to jump to first and last pages'),
    new Changelog(changelogType.NEW, 'Number keys (1-9) can now be used to start Pokémon League battles'),
    new Changelog(changelogType.CHANGE, 'Pokeball selector made smaller, now makes use of a modal'),
    new Changelog(changelogType.CHANGE, 'Add some spacing to Damage Calculator'),
    new Changelog(changelogType.CHANGE, 'Hatchery eggs will display in a row of 4 when module is in the middle columnn'),
    new Changelog(changelogType.CHANGE, 'Always show total levels in Oak Item tooltips'),
    new Changelog(changelogType.CHANGE, 'Updated images for shop Pokémon'),
    new Changelog(changelogType.CHANGE, 'Farm images made sharper'),
    new Changelog(changelogType.FIXED, 'Dungeons with a large amount of Pokémon will no longer hide the start button'),
    new Changelog(changelogType.FIXED, 'Updated Hatchery sort display'),
    new Changelog(changelogType.FIXED, 'Notification sounds normalized'),
    new Changelog(changelogType.FIXED, 'Sprout images displayed in Farm'),
    new Changelog(changelogType.FIXED, 'Achievement modal pages should now show the correct numbers'),
    new Changelog(changelogType.FIXED, 'Mine data contained in save data'),
    new Changelog(changelogType.FIXED, 'Saves should no longer have issues downloading'),
    // v0.5.6
    new Changelog(changelogType.UPDATE, 'v0.5.6'),
    new Changelog(changelogType.NEW, 'Added Damage Calculator to Start Menu'),
    new Changelog(changelogType.NEW, 'Background settings Night and Dynamic added'),
    new Changelog(changelogType.NEW, 'Walking in the Safari Zone will now add steps to your eggs'),
    new Changelog(changelogType.NEW, 'Achievements added for reaching maximum level on oak items'),
    new Changelog(changelogType.NEW, 'Added Achievement Tracker module'),
    new Changelog(changelogType.NEW, 'Added region filter to Pokédex'),
    new Changelog(changelogType.NEW, 'Added sort dropdown to the Hatchery'),
    new Changelog(changelogType.NEW, 'Added setting for shop value increment amount'),
    new Changelog(changelogType.NEW, 'Introduction to some gameplay elements added for new players'),
    new Changelog(changelogType.NEW, 'Eggs will wobble when they are ready to hatch'),
    new Changelog(changelogType.NEW, 'Start Menu contains a link to the Wiki'),
    new Changelog(changelogType.CHANGE, 'Can hide the Pokémon filter in the Hatchery'),
    new Changelog(changelogType.CHANGE, 'Energy use disabled once you complete a layer in Underground until refreshed'),
    new Changelog(changelogType.CHANGE, 'Added player icon in Dungeons'),
    new Changelog(changelogType.CHANGE, 'Can see your list of eggs and fossils even if you cannot breed them'),
    new Changelog(changelogType.CHANGE, 'Unobtained Pokémon will show as white on dark themes'),
    new Changelog(changelogType.FIXED, 'Underground will no longer contain multiple deals with the same items'),
    new Changelog(changelogType.FIXED, 'Shop prices should no longer overflow when too large'),
    new Changelog(changelogType.FIXED, 'Discord usernames should no longer affect saves'),
    // v0.5.5
    new Changelog(changelogType.UPDATE, 'v0.5.5'),
    new Changelog(changelogType.NEW, 'Achievements can now be filtered'),
    new Changelog(changelogType.NEW, 'Can sort Underground items by clicking on table titles'),
    new Changelog(changelogType.NEW, 'NPCs now in towns, will provide dialog that will help the player complete their Pokédex'),
    new Changelog(changelogType.NEW, 'More notification settings have been added'),
    new Changelog(changelogType.CHANGE, 'Increase shiny chance when using an evolution item'),
    new Changelog(changelogType.CHANGE, 'Increase shiny chance for dungeon Pokémon'),
    new Changelog(changelogType.CHANGE, 'More shops added to towns'),
    new Changelog(changelogType.CHANGE, 'More Pokémon added to typed eggs'),
    new Changelog(changelogType.CHANGE, 'Electrike is now exclusive to eggs'),
    new Changelog(changelogType.CHANGE, '"Complete the Kanto Pokédex!" achievement now requires all 151 Kanto Pokémon'),
    new Changelog(changelogType.CHANGE, 'Regirock, Regice and Registeel no longer Roaming, now in Sealed Chamber dungeon'),
    new Changelog(changelogType.CHANGE, 'Kyogre and Groudon will only appear in their dungeon after defeating the Hoenn Elite 4'),
    new Changelog(changelogType.CHANGE, 'If you encounter a new Pokémon that is also shiny, the higher tier ball will be selected'),
    new Changelog(changelogType.CHANGE, 'Battle item effect timers now display upto 99 hours'),
    new Changelog(changelogType.CHANGE, 'Phione now obtained by breeding Manaphy'),
    new Changelog(changelogType.FIXED, 'Quest list should only auto refresh if all quest are claimed or it is a new day'),
    new Changelog(changelogType.FIXED, 'Gym Pokémon can no longer be captured by players'),
    new Changelog(changelogType.FIXED, 'Reduce some lag caused by hatchery filters'),
    new Changelog(changelogType.FIXED, 'Mystery egg can now hatch Pokémon from the Dragon Egg pool'),
    new Changelog(changelogType.FIXED, 'Travelling to the next Region now requires all of that regions Pokémon (excluding different forms)'),
    // v0.5.4
    new Changelog(changelogType.UPDATE, 'v0.5.4'),
    new Changelog(changelogType.NEW, 'More stores and items added in Johto, Hoenn and Sinnoh'),
    new Changelog(changelogType.NEW, 'Added notifications for the Farm'),
    new Changelog(changelogType.NEW, 'Can now sort Pokémon list by Breeding Efficiency'),
    new Changelog(changelogType.NEW, 'Can now sort Pokémon list by Egg Steps'),
    new Changelog(changelogType.NEW, 'New Rotom forms available'),
    new Changelog(changelogType.NEW, 'Added ability to use multiple battle items in 1 click'),
    new Changelog(changelogType.NEW, 'Shards types can now be collapsed'),
    new Changelog(changelogType.CHANGE, 'Game should now load in older versions of Firefox'),
    new Changelog(changelogType.CHANGE, 'Mesprit and Cresselia are now roaming in Sinnoh'),
    new Changelog(changelogType.FIXED, 'Updated Burmy (plant) shop image'),
    new Changelog(changelogType.FIXED, 'Safari Zone modal should no longer be able to close without clicking the intended buttons'),
    new Changelog(changelogType.FIXED, 'Updated Shoal Cave entry cost'),
    new Changelog(changelogType.FIXED, 'Hatchery should no longer cause lag when hatching'),
    new Changelog(changelogType.FIXED, 'Old Quests will no longer give a notification when completed once they are refreshed'),
    // v0.5.3
    new Changelog(changelogType.UPDATE, 'v0.5.3'),
    new Changelog(changelogType.NEW, 'Can filter Daycare Pokémon by name (regex supported)'),
    new Changelog(changelogType.NEW, 'Select which information is displayed under each Pokémon in the Daycare'),
    new Changelog(changelogType.NEW, 'Possible to start with a Pikachu if no starter Pokémon selected enough times'),
    new Changelog(changelogType.CHANGE, 'Some Roaming Pokémon will only appear after certain requirements have been met'),
    new Changelog(changelogType.CHANGE, 'Some Dungeon Pokémon will only appear after certain requirements have been met'),
    new Changelog(changelogType.FIXED, 'Flower Paradise dungeon HP corrected'),
    new Changelog(changelogType.FIXED, 'Route 40 should no longer unlock before reaching it'),
    new Changelog(changelogType.FIXED, 'Reduce some checks firing too often'),
    new Changelog(changelogType.FIXED, 'Game controls will be ignored if focused on an input element'),
    new Changelog(changelogType.FIXED, 'Backgrounds should no longer overflow in breeding modal'),
    // v0.5.2
    new Changelog(changelogType.UPDATE, 'v0.5.2'),
    new Changelog(changelogType.NEW, 'Underground quest line created'),
    new Changelog(changelogType.NEW, 'More statistics added'),
    new Changelog(changelogType.NEW, 'Some minor Discord integration'),
    new Changelog(changelogType.CHANGE, 'Attack achievement no longer based on current region'),
    new Changelog(changelogType.CHANGE, 'Modified the way game ticks are handled'),
    new Changelog(changelogType.FIXED, 'Fixed breeding filter displayed options being reset after hatchery filled up'),
    // v0.5.1
    new Changelog(changelogType.UPDATE, 'v0.5.1'),
    new Changelog(changelogType.NEW, 'Added a notification for when the game has an update available'),
    new Changelog(changelogType.NEW, 'Add Croagunk to Route 212'),
    new Changelog(changelogType.CHANGE, 'Move Hippopotas from Route 210 → Route 214'),
    new Changelog(changelogType.CHANGE, 'Updated Fight Area requirements'),
    new Changelog(changelogType.CHANGE, 'Buffed Erika Victreebel'),
    new Changelog(changelogType.FIXED, 'Unobtainable items will no longer remain in the Underground'),
    new Changelog(changelogType.FIXED, 'Pacifidlog town shop now available'),
    new Changelog(changelogType.FIXED, 'Hide alternate forms from Pokédex that have not yet been caught'),
    new Changelog(changelogType.FIXED, 'Shaymin (sky) form types corrected'),
    // v0.5.0 - Sinnoh
    new Changelog(changelogType.UPDATE, 'v0.5.0 - Sinnoh'),
    new Changelog(changelogType.NEW, 'The Sinnoh region is now available'),
    new Changelog(changelogType.NEW, 'New evolution stones'),
    new Changelog(changelogType.NEW, 'Dungeon based evolutions'),
    new Changelog(changelogType.NEW, 'Time based evolutions'),
    new Changelog(changelogType.NEW, '2 new fossils added to the Underground'),
    new Changelog(changelogType.NEW, 'Pokémon alternate forms can now be obtained'),
    new Changelog(changelogType.CHANGE, 'Decrease attack reduction in newer regions'),
    new Changelog(changelogType.CHANGE, 'All Happiness/Friendship evolutions now make use of the Soothe Bell'),
    new Changelog(changelogType.CHANGE, 'Added base exp per quest completed'),
    new Changelog(changelogType.CHANGE, 'Updated the order Routes, Dungeons and Gyms need to be completed in the Kanto region'),
    new Changelog(changelogType.FIXED, 'Gyms should award correct amount of Egg steps now'),
    new Changelog(changelogType.REMOVED, 'Removed Time Stone'),
    new Changelog(changelogType.REMOVED, 'Removed hold evolution items from the Underground'),
    // v0.4.20
    new Changelog(changelogType.UPDATE, 'v0.4.20 - Battle Frontier'),
    new Changelog(changelogType.NEW, 'Added the Battle Frontier in the Hoenn region'),
    new Changelog(changelogType.CHANGE, 'Buffed Dungeon Token gain in higher regions'),
    new Changelog(changelogType.CHANGE, 'Updated the order Routes, Dungeons and Gyms need to be completed in the Johto region'),
    new Changelog(changelogType.CHANGE, 'Updated the order Routes, Dungeons and Gyms need to be completed in the Kanto region'),
    new Changelog(changelogType.FIXED, 'Questline progress restored correctly'),
    // v0.4.19
    new Changelog(changelogType.UPDATE, 'v0.4.19'),
    new Changelog(changelogType.NEW, 'Filters added to the Day Care'),
    new Changelog(changelogType.NEW, 'Achievements available for all regions'),
    new Changelog(changelogType.CHANGE, 'Buffed bonus for the Cell Battery'),
    new Changelog(changelogType.CHANGE, 'Sounds will now play if enabled even if the notification is disabled'),
    // v0.4.18
    new Changelog(changelogType.UPDATE, 'v0.4.18 - Underground'),
    new Changelog(changelogType.NEW, 'Added Prospect ability to the Underground to see which types of items are in the current layer'),
    new Changelog(changelogType.NEW, 'Added Bomb ability to the Underground which will mine random tiles for you'),
    new Changelog(changelogType.NEW, 'Added ability to Skip layers in the Underground'),
    new Changelog(changelogType.NEW, 'Added ability to sell/trade multiple items at once in the Underground'),
    new Changelog(changelogType.NEW, 'Added volume control for notification sounds'),
    new Changelog(changelogType.NEW, 'Some Pokémon now have a chance to drop rare items upon defeat'),
    new Changelog(changelogType.NEW, 'Added Pokédex filter for Pokémon that drop rare items'),
    new Changelog(changelogType.NEW, 'Added Deoxys quest line'),
    new Changelog(changelogType.CHANGE, 'Deoxys no longer roaming'),
    new Changelog(changelogType.CHANGE, 'Separate Day Care modal into individual tabs for Pokémon, Eggs and Fossils'),
    new Changelog(changelogType.CHANGE, 'Update modal displays'),
    new Changelog(changelogType.FIXED, 'Event Pokémon no longer displayed in Pokédex'),
    new Changelog(changelogType.FIXED, 'Reduce memory usage in Underground'),
    // v0.4.17
    new Changelog(changelogType.UPDATE, 'v0.4.17'),
    new Changelog(changelogType.NEW, 'Update maps'),
    new Changelog(changelogType.NEW, 'Add notification settings'),
    new Changelog(changelogType.NEW, 'Add more notification sounds and settings'),
    new Changelog(changelogType.NEW, 'Can now filter the Pokédex by pure type Pokémon by selecting None for the second type'),
    new Changelog(changelogType.NEW, 'Added statistic for Hatched Shiny Pokémon'),
    new Changelog(changelogType.NEW, 'Caught indicator on eggs showing if you have obtained all the Pokémon available in that egg type'),
    new Changelog(changelogType.CHANGE, 'Move some dungeons to be standalone'),
    new Changelog(changelogType.FIXED, 'Safari Zone should no longer lock up'),
    new Changelog(changelogType.FIXED, 'Event Pokémon can now evolve'),
    new Changelog(changelogType.FIXED, 'Helix fossil now displays correctly when mining in the Underground'),
    // v0.4.16
    new Changelog(changelogType.UPDATE, 'v0.4.16'),
    new Changelog(changelogType.NEW, 'Added sounds for specific events'),
    new Changelog(changelogType.NEW, 'Added more settings'),
    new Changelog(changelogType.NEW, 'New maps'),
    new Changelog(changelogType.CHANGE, 'Updated settings menu'),
    new Changelog(changelogType.CHANGE, 'Shops will now only show the balance of currencies used there'),
    new Changelog(changelogType.CHANGE, 'Gyms and Dungeons in the Johto and Hoenn regions have been buffed'),
    // v0.4.15
    new Changelog(changelogType.UPDATE, 'v0.4.15'),
    new Changelog(changelogType.NEW, 'Eggs now have multiple different styles'),
    new Changelog(changelogType.CHANGE, 'xExp is now the Lucky Egg'),
    new Changelog(changelogType.CHANGE, 'Updated Currency, Item, Berry, Egg and Fossil images'),
    new Changelog(changelogType.CHANGE, 'Day Care is now unlocked once you defeat Route 5'),
    new Changelog(changelogType.CHANGE, 'Fossils will now show in the Hatchery'),
    new Changelog(changelogType.CHANGE, 'Update Farm layout for smaller displays'),
    new Changelog(changelogType.CHANGE, 'Update Safari Zone cost'),
    new Changelog(changelogType.CHANGE, 'Underground now shows the 3 x 3 area which will be mined when using the hammer'),
    new Changelog(changelogType.FIXED, 'Underground total items should now be correct'),
    // v0.4.14
    new Changelog(changelogType.UPDATE, 'v0.4.14'),
    new Changelog(changelogType.NEW, 'Added Dratini to Route 45'),
    new Changelog(changelogType.NEW, 'Underground should now work better on smaller screens'),
    new Changelog(changelogType.CHANGE, 'Enlarge buttons in Shortcut menu, Safari Zone'),
    new Changelog(changelogType.CHANGE, 'Make Shop items fit better'),
    new Changelog(changelogType.CHANGE, 'Breeding display takes up less space on smaller screens now'),
    new Changelog(changelogType.CHANGE, 'Add confirmation when refreshing quest list'),
    new Changelog(changelogType.FIXED, 'Update Oak items tooltip when upgraded'),
    new Changelog(changelogType.FIXED, 'Auto refresh Daily Deals when upgrade purchased'),
    // v0.4.13
    new Changelog(changelogType.UPDATE, 'v0.4.13'),
    new Changelog(changelogType.NEW, 'Added shortcut module'),
    new Changelog(changelogType.NEW, 'Added Poké Mart to shortcuts module'),
    new Changelog(changelogType.CHANGE, 'Updated Masterball pricing'),
    new Changelog(changelogType.CHANGE, 'Allow the game to continue running while Day Care is open'),
    new Changelog(changelogType.CHANGE, 'Allow the game to continue running while Underground is open'),
    new Changelog(changelogType.CHANGE, 'Don\'t send the player back to Route 11 when leaving the Underground'),
    new Changelog(changelogType.CHANGE, 'Allow the game to continue running while Farm is open'),
    new Changelog(changelogType.CHANGE, 'Don\'t send the player back to Route 14 when leaving the Farm'),
    new Changelog(changelogType.CHANGE, 'Added button to open Dock for cities located nearby'),
    new Changelog(changelogType.CHANGE, 'Moved shiny icon further into the corner in the Day Care view, to make it easier to spot already shiny Pokémon'),
    new Changelog(changelogType.CHANGE, 'Dungeon size scales depending on region'),
    // v0.4.12
    new Changelog(changelogType.UPDATE, 'v0.4.12'),
    new Changelog(changelogType.NEW, 'Modules can now be sorted/arranged any way you like, just drag and drop'),
    new Changelog(changelogType.NEW, 'Added confirmation when quiting a quest'),
    new Changelog(changelogType.CHANGE, 'Updated dungeon token cost in Hoenn dungeons'),
    new Changelog(changelogType.CHANGE, 'Updated the gym fight view'),
    new Changelog(changelogType.CHANGE, 'Updated some messages shown when you cannot access a location yet'),
    new Changelog(changelogType.FIXED, 'Some battle background images were not showing, they should now appear correctly'),
    new Changelog(changelogType.FIXED, 'Town Map will now be fully hidden when it is supposed to be'),
    // v0.4.11
    new Changelog(changelogType.UPDATE, 'v0.4.11'),
    new Changelog(changelogType.NEW, 'Towns will show as orange if you have not yet completed the gym'),
    new Changelog(changelogType.NEW, 'Map is able to be hidden now'),
    new Changelog(changelogType.NEW, 'Added mobile support to the Safari Zone'),
    new Changelog(changelogType.CHANGE, 'The Cell Battery Oak Item will now gain points each time you find an item'),
    new Changelog(changelogType.CHANGE, 'Updated the layout of the Shard modal'),
    new Changelog(changelogType.CHANGE, 'Updated the layout of the Safari Zone'),
    new Changelog(changelogType.FIXED, 'Stone evolutions will now only show the Pokéball if all possible evolutions have been caught'),
    // v0.4.10
    new Changelog(changelogType.UPDATE, 'v0.4.10 - Minor update'),
    new Changelog(changelogType.NEW, 'Added preload progress indicator'),
    new Changelog(changelogType.NEW, 'Game will still load if not all the images preload correctly'),
    // v0.4.9
    new Changelog(changelogType.UPDATE, 'v0.4.9'),
    new Changelog(changelogType.NEW, 'Added option to disable found berries notifications'),
    new Changelog(changelogType.NEW, 'Added different background images when battling Pokémon depending on route/dungeon'),
    new Changelog(changelogType.CHANGE, 'Updated Bootstrap, TypeScript and other dependencies, please report any problems you may notice'),
    new Changelog(changelogType.CHANGE, 'Limit maximum Quest Points for Dungeon and Gym quests'),
    new Changelog(changelogType.CHANGE, 'Updated quest list layout'),
    new Changelog(changelogType.CHANGE, 'Format numbers in shop and Pokéball selector'),
    new Changelog(changelogType.FIXED, 'Dungeons should now award Dungeon Tokens when catching a Pokémon'),
    new Changelog(changelogType.FIXED, 'Badge names should display correctly now'),
    // v0.4.8
    new Changelog(changelogType.UPDATE, 'v0.4.8'),
    new Changelog(changelogType.NEW, 'More events'),
    new Changelog(changelogType.NEW, 'Added caught status indicator to Safari Zone entrance'),
    new Changelog(changelogType.NEW, 'Added caught status indicator to Dungeons'),
    new Changelog(changelogType.CHANGE, 'Show Oak Item details on hover on main screen'),
    new Changelog(changelogType.CHANGE, 'Updated Oak Items modal to show current experience on hover'),
    new Changelog(changelogType.CHANGE, 'Animate town and dungeon background images'),
    new Changelog(changelogType.CHANGE, 'Updated battle views of routes and dungeons'),
    new Changelog(changelogType.FIXED, 'Event notifications showing way before event start'),
    new Changelog(changelogType.FIXED, 'Reduce lag when hatching Pokémon'),
    // v0.4.7
    new Changelog(changelogType.UPDATE, 'v0.4.7 - Layout'),
    new Changelog(changelogType.NEW, 'Added option to sort Pokémon list by base attack'),
    new Changelog(changelogType.CHANGE, 'Added information and confirmation check before traveling to next available region'),
    new Changelog(changelogType.CHANGE, 'Updated the Oak Items layout'),
    new Changelog(changelogType.CHANGE, 'Updated layout of Towns and Dungeons'),
    new Changelog(changelogType.CHANGE, 'Updated the Hoenn map'),
    new Changelog(changelogType.CHANGE, 'Show the amount of Pokémon visible in Pokédex with filters active'),
    new Changelog(changelogType.FIXED, 'Event Pokémon no longer count towards achievements or being able to travel to next region'),
    new Changelog(changelogType.FIXED, 'Mt. Chimney dungeon is now more powerful'),
    // v0.4.6
    new Changelog(changelogType.UPDATE, 'v0.4.6 - Bug fixes'),
    new Changelog(changelogType.NEW, 'Old save can be backed up when the game updates incase anything goes wrong<br/><i>You can disable auto download in the settings</i>'),
    new Changelog(changelogType.NEW, 'Add events modal'),
    new Changelog(changelogType.CHANGE, 'Safari now uses a Safari Ball'),
    new Changelog(changelogType.CHANGE, 'Added ability to track event Pokémon statistics'),
    new Changelog(changelogType.CHANGE, 'Update Discord link'),
    new Changelog(changelogType.FIXED, 'Pokéball should appear in dungeons again'),
    new Changelog(changelogType.FIXED, 'Fix Eeveelutions'),
    // v0.4.5
    new Changelog(changelogType.UPDATE, 'v0.4.5 - Special events'),
    new Changelog(changelogType.EVENT, 'Flying Pikachu Event'),
    new Changelog(changelogType.NEW, 'Special events can now appear in game'),
    new Changelog(changelogType.CHANGE, 'Modified the look of the dock'),
    new Changelog(changelogType.CHANGE, 'Always add caught Shiny Pokémon to the Log Book'),
    new Changelog(changelogType.CHANGE, 'Added close button on the top right of more modals'),
    new Changelog(changelogType.FIXED, 'Dungeon layout should be shuffled again'),
    new Changelog(changelogType.FIXED, 'Hopefully fixed some values becoming NaN'),
    // v0.4.4
    new Changelog(changelogType.UPDATE, 'v0.4.4 - Statistics 2.0'),
    new Changelog(changelogType.NEW, 'Add some new game codes'),
    new Changelog(changelogType.NEW, 'Statistics can now be viewed from the Start Menu'),
    new Changelog(changelogType.NEW, 'Pokémon statistics can be viewed by clicking a Pokémon in the Pokédex'),
    new Changelog(changelogType.CHANGE, 'Update some game codes'),
    new Changelog(changelogType.REMOVED, 'Remove old game codes'),
    new Changelog(changelogType.FIXED, 'Can no longer breed fossils from regions you have not reached yet'),
    new Changelog(changelogType.FIXED, 'Added missing notifications for stone evolution Pokémon'),
    // v0.4.3
    new Changelog(changelogType.UPDATE, 'v0.4.3'),
    new Changelog(changelogType.NEW, 'Add setting to disable currency animations'),
    new Changelog(changelogType.CHANGE, 'Increase some notifications display time'),
    new Changelog(changelogType.CHANGE, 'Decreased price multiplier'),
    new Changelog(changelogType.CHANGE, 'Modified Pokémon list reverse checkbox to show arrows instead'),
    new Changelog(changelogType.CHANGE, 'Updated changelog layout'),
    new Changelog(changelogType.FIXED, 'Fix LilyCove City naming and image'),
    new Changelog(changelogType.FIXED, 'Tidy up Key items, Evolution stones selector'),
    new Changelog(changelogType.FIXED, 'Sketchy theme checkboxes and close icons should display correctly now'),
    // v0.4.2
    new Changelog(changelogType.UPDATE, 'v0.4.2'),
    new Changelog(changelogType.FIXED, 'Fixed some Key items not being given when supposed to'),
    // v0.4.1
    new Changelog(changelogType.UPDATE, 'v0.4.1 - More fixes'),
    new Changelog(changelogType.NEW, 'More items added to underground'),
    new Changelog(changelogType.CHANGE, 'All Hoenn Pokémon should be obtainable now'),
    new Changelog(changelogType.FIXED, 'Pokédex filtering should be working again'),
    new Changelog(changelogType.FIXED, 'Some items showing _ in their name in notifications'),
    // v0.4.0
    new Changelog(changelogType.UPDATE, 'v0.4.0 - Statistics update'),
    new Changelog(changelogType.NEW, 'Current save data should be compatible with future versions!'),
    new Changelog(changelogType.NEW, 'More statistics have been added'),
    new Changelog(changelogType.CHANGE, 'Updated the way statistics are stored'),
    new Changelog(changelogType.CHANGE, 'Updated notifications'),
    new Changelog(changelogType.FIXED, 'Fix some missing Hoenn Pokémon'),
    new Changelog(changelogType.FIXED, 'Fix some missing images'),
    // v0.3.1
    new Changelog(changelogType.UPDATE, 'v0.3.1 - Bug catcher'),
    new Changelog(changelogType.CHANGE, 'Eevee will now evolve into Espeon or Umbreon depending on the time of day (when using Time stone)'),
    new Changelog(changelogType.FIXED, 'Can no longer evolve Magmar and Electabuzz before you are allowed'),
    new Changelog(changelogType.FIXED, 'Fix breeding steps gained for newer regions'),
    new Changelog(changelogType.FIXED, 'Fix roaming encounters for newer regions'),
    new Changelog(changelogType.FIXED, 'Fix route rewards for newer regions'),
    // v0.3.0
    new Changelog(changelogType.UPDATE, 'v0.3.0 - Hoenn Update'),
    new Changelog(changelogType.NEW, 'Add initial Hoenn region'),
    new Changelog(changelogType.CHANGE, 'Shiny Pokémon now increase click damage at a 50% rate compared to normal Pokémon'),
    new Changelog(changelogType.CHANGE, 'Allow better control of which type of ball to use when capturing a Pokémon'),
    // v0.2.1
    new Changelog(changelogType.UPDATE, 'v0.2.1'),
    new Changelog(changelogType.REMOVED, 'Remove Hoenn dungeons for now to avoid triggering errors'),
    new Changelog(changelogType.FIXED, 'Other berries will now be tasked in Quests'),
    // v0.2.0
    new Changelog(changelogType.UPDATE, 'v0.2.0 - Redeemable codes'),
    new Changelog(changelogType.NEW, 'Add redeemable codes to get a quick boost. You can enter them under the Save tab'),
    new Changelog(changelogType.FIXED, 'Gyms no longer reset 1 second in'),
    // v0.1.0
    new Changelog(changelogType.UPDATE, 'v0.1.0 - Farming refactor'),
    new Changelog(changelogType.CHANGE, 'Farming plots are a bit more expensive'),
    new Changelog(changelogType.CHANGE, 'Wailmer pail unlocks at 3 Cheri berries instead of 5'),
    new Changelog(changelogType.FIXED, 'Tooltips no longer overstay their welcome on the Farm'),
    // v0.0.5
    new Changelog(changelogType.UPDATE, 'v0.0.5'),
    new Changelog(changelogType.NEW, 'Can now use spacebar to start Gym/Dungeon'),
    new Changelog(changelogType.FIXED, 'Stones now work with multiple evolutions'),
    new Changelog(changelogType.FIXED, 'Pokémon will no longer evolve into evolutions you have already obtained'),
    new Changelog(changelogType.FIXED, 'Can obtain Pokémon from future generations by re-breeding'),
    new Changelog(changelogType.FIXED, 'Devolutions are obtained when breeding evolved forms'),
    new Changelog(changelogType.NEW, 'Add setting to toggle egg percentage/step count'),
    new Changelog(changelogType.CHANGE, 'Total shiny Pokémon caught no longer adds to your click attack'),
    new Changelog(changelogType.CHANGE, 'Halve xp needed to upgrade Oak items'),
    new Changelog(changelogType.FIXED, 'BattleItems now buy correctly'),
    new Changelog(changelogType.CHANGE, 'Increase dungeon tokens received when catching Pokémon'),
    new Changelog(changelogType.CHANGE, 'Going to the breeder will no longer send you to route 5'),
    new Changelog(changelogType.CHANGE, 'You will now start the game with 25 Pokéballs'),
    new Changelog(changelogType.CHANGE, 'Tutorial quest buy Pokéballs amount reduced'),
    new Changelog(changelogType.FIXED, 'Selecting "max" in store will no longer freeze the game for key items'),
    // v0.0.4 - 01-01-2020
    new Changelog(changelogType.UPDATE, 'v0.0.4'),
    new Changelog(changelogType.NEW, 'Show Pokéball image by caught Pokémon in the Pokédex'),
    new Changelog(changelogType.CHANGE, 'Show the reason you cannot access a location'),
    new Changelog(changelogType.CHANGE, 'Total shiny Pokémon caught now add to your total click attack'),
    new Changelog(changelogType.FIXED, 'Display floored dungeon tokens amount'),
    // v0.0.3
    new Changelog(changelogType.UPDATE, 'v0.0.3'),
    new Changelog(changelogType.NEW, 'Can now progress in multiple quest at a time <i>(amount based on Quest Level)</i>'),
    new Changelog(changelogType.NEW, 'Side cards can now be collapsed for more space'),
    new Changelog(changelogType.CHANGE, 'Move battle item container'),
    new Changelog(changelogType.CHANGE, 'Update how achievement percentages are shown'),
    new Changelog(changelogType.CHANGE, 'Update hatch/catch notification message'),
    new Changelog(changelogType.FIXED, 'Show the hatchery "list" button once Johto unlocked without page refresh'),
    new Changelog(changelogType.FIXED, 'Plates from underground should now sell for their correct value'),
    // v0.0.2
    new Changelog(changelogType.UPDATE, 'v0.0.2'),
    new Changelog(changelogType.NEW, 'Added changelog'),
    new Changelog(changelogType.CHANGE, 'Show battle item names and descriptions'),
    new Changelog(changelogType.FIXED, 'Item magnet now works in dungeons'),
    new Changelog(changelogType.FIXED, 'Battle items no longer always active'),
    // v0.0.1
    new Changelog(changelogType.UPDATE, 'v0.0.1'),
    new Changelog(changelogType.NEW, 'Add battle items'),
];
class DynamicBackground {
    constructor() { }
}
/* SUN & MOON */
DynamicBackground.setSunMoonPosition = (date = new Date()) => {
    const h = window.innerHeight;
    const w = window.innerWidth / 1.2;
    // Get the hours and minutes.
    const hours = date.getHours();
    const mins = date.getMinutes();
    // Calculate the position of the sun and moon based on the time.
    const sunRad = (((hours) * 60 + mins) / (24 * 60)) * Math.PI * 2;
    const moonRad = (((hours + 12) * 60 + mins) / (24 * 60)) * Math.PI * 2;
    // Calculate the axis
    const sunX = (w / 1.8) - (w * Math.sin(sunRad)) / 2;
    const sunY = (h / 2) + (h * Math.cos(sunRad)) / 2;
    const moonX = (w / 1.8) - (w * Math.sin(moonRad)) / 2;
    const moonY = (h / 1.4) + (h * Math.cos(moonRad)) / 2;
    // Apply the positions based on our previous calculations
    const sun = document.getElementById('sun');
    sun.style.top = `${sunY}px`;
    sun.style.left = `${sunX}px`;
    const moon = document.getElementById('moon');
    moon.style.top = `${moonY}px`;
    moon.style.left = `${moonX}px`;
};
/* SKY & GROUND */
DynamicBackground.updateBackgrounds = (d = new Date()) => {
    const hour = d.getHours();
    const minutes = d.getMinutes();
    const bgNumber = DynamicBackground.getPicture(hour);
    // Determine starting background images:
    const bgNumberNext = (bgNumber + 1) % 12;
    // Get opacity (i.e. how far (in percentage) are we in a certain time-block):
    // Every block is 2 hours, so 1 hour into a block would be 50% (0.50)
    // If we are in an even hour add 50%
    let opacity = hour % 2 ? 0 : 0.5;
    // Every minute would be 1/120th of a block (minutes / 120)
    opacity += minutes / 120;
    // Set sky image
    document.getElementById('sky1').classList.value = `sky sky-${bgNumber}`;
    document.getElementById('sky2').style.opacity = opacity.toString();
    document.getElementById('sky2').classList.value = `sky sky-${bgNumberNext}`;
    // Set ground image
    document.getElementById('ground1').classList.value = `ground ground-${bgNumber}`;
    document.getElementById('ground2').style.opacity = opacity.toString();
    document.getElementById('ground2').classList.value = `ground ground-${bgNumberNext}`;
};
// Determines the images to use based on the current hour
DynamicBackground.getPicture = hour => {
    return hour ? Math.floor(--hour / 2) : 11;
};
/* POKEMON */
// All the flying pokemon IDs (these pokemon can spawn in the sky)
DynamicBackground.flyingPokemon = [12, 15, 17, 18, 22, 41, 42, 49, 92, 93, 109, 110, 142, 144, 145, 146, 149, 151, 164, 165, 166, 169, 176, 187, 188, 189, 193, 200, 206, 227, 249, 250, 251, 267, 269, 277, 278, 279, 284, 291, 329, 330, 333, 334, 358, 380, 381, 382, 384, 385, 397, 398, 414, 415, 416, 425, 426, 433, 462, 469, 479, 480, 481, 482, 488, 489, 490, 491, 521, 527, 528, 567, 581, 628, 642, 644, 645, 646, 662, 663, 666, 691, 707, 714, 715, 738, 745, 746];
// Add a pokemon to the scene
DynamicBackground.addPokemon = id => {
    const flying = DynamicBackground.flyingPokemon.includes(id);
    const shiny = !Math.floor(Math.random() * GameConstants.SHINY_CHANCE_BREEDING);
    const pokeElement = document.createElement('div');
    pokeElement.style.bottom = flying ? `${Math.floor(Math.random() * 70) + 20}vh` : `${Math.floor(Math.random() * 10) + 5}vh`;
    pokeElement.style.backgroundImage = `url('assets/images/dynamic-background/pokemon/${id.toString().padStart(3, 0)}${shiny ? 's' : ''}.png')`;
    pokeElement.classList.add('pokemon');
    pokeElement.classList.add('walkLeft');
    document.getElementById('dynamic-background').appendChild(pokeElement);
    setTimeout(() => {
        document.getElementById('dynamic-background').removeChild(pokeElement);
    }, GameConstants.MINUTE);
};
DynamicBackground.startAddingPokemon = () => {
    // Random delay up to 10 seconds
    const delay = Math.floor(Math.random() * (10 * GameConstants.SECOND));
    // Assign our timeout function so we can stop it later
    DynamicBackground.addPokemonTimeout = setTimeout(() => {
        // limited to players highest region
        DynamicBackground.addPokemon(Math.floor(Math.random() * GameConstants.TotalPokemonsPerRegion[player.highestRegion()]) + 1);
        // Add another pokemon
        DynamicBackground.startAddingPokemon();
    }, delay);
};
DynamicBackground.stopAddingPokemon = () => {
    clearTimeout(DynamicBackground.addPokemonTimeout);
};
DynamicBackground.updateScene = (date = new Date()) => {
    try {
        DynamicBackground.setSunMoonPosition(date);
        DynamicBackground.updateBackgrounds(date);
    }
    catch (e) { }
};
DynamicBackground.startScene = () => {
    // Start adding the Pokemon images (manages it's own timer)
    DynamicBackground.startAddingPokemon();
    // Update the background now then every minute
    DynamicBackground.updateScene();
    DynamicBackground.autoUpdateScene = setInterval(DynamicBackground.updateScene, GameConstants.MINUTE);
};
DynamicBackground.stopScene = () => {
    // Stop adding the pokemon images
    DynamicBackground.stopAddingPokemon();
    // Stop updating background images
    clearInterval(DynamicBackground.autoUpdateScene);
};
/**
 * Main game class.
 */
class Game {
    /**
     * TODO(@Isha) pass all features through the constructor
     */
    constructor(update, breeding, pokeballs, wallet, keyItems, badgeCase, oakItems, party, shards, farming, logbook, redeemableCodes, statistics, quests, specialEvents, discord, achievementTracker) {
        this.update = update;
        this.breeding = breeding;
        this.pokeballs = pokeballs;
        this.wallet = wallet;
        this.keyItems = keyItems;
        this.badgeCase = badgeCase;
        this.oakItems = oakItems;
        this.party = party;
        this.shards = shards;
        this.farming = farming;
        this.logbook = logbook;
        this.redeemableCodes = redeemableCodes;
        this.statistics = statistics;
        this.quests = quests;
        this.specialEvents = specialEvents;
        this.discord = discord;
        this.achievementTracker = achievementTracker;
        this._gameState = ko.observable(GameConstants.GameState.paused);
        AchievementHandler.initialize();
    }
    load() {
        const saveJSON = localStorage.getItem('save');
        const saveObject = JSON.parse(saveJSON || '{}');
        Object.keys(this).filter(key => { var _a; return (_a = this[key]) === null || _a === void 0 ? void 0 : _a.saveKey; }).forEach(key => {
            try {
                const saveKey = this[key].saveKey;
                // Load our save object or the default save data
                this[key].fromJSON(saveObject[saveKey] || this[key].toJSON());
            }
            catch (error) {
                console.error('Unable to load sava data from JSON for:', key, '\nError:\n', error);
            }
        });
    }
    initialize() {
        this.breeding.initialize();
        this.pokeballs.initialize();
        this.keyItems.initialize();
        this.oakItems.initialize();
        this.farming.initialize();
        this.specialEvents.initialize();
        this.load();
        // TODO refactor to proper initialization methods
        Battle.generateNewEnemy();
        //Safari.load();
        Underground.energyTick(Underground.getEnergyRegenTime());
        DailyDeal.generateDeals(Underground.getDailyDealsMax(), new Date());
        this.gameState = GameConstants.GameState.fighting;
    }
    start() {
        console.log(`[${GameConstants.formatDate(new Date())}] %cGame started`, 'color:#2ecc71;font-weight:900;');
        if (player.starter === GameConstants.Starter.None) {
            StartSequenceRunner.start();
        }
        this.interval = setInterval(this.gameTick.bind(this), GameConstants.TICK_TIME);
    }
    stop() {
        clearTimeout(this.interval);
    }
    gameTick() {
        // Acheivements
        Game.achievementCounter += GameConstants.TICK_TIME;
        if (Game.achievementCounter >= GameConstants.ACHIEVEMENT_TICK) {
            Game.achievementCounter = 0;
            AchievementHandler.checkAchievements();
            GameHelper.incrementObservable(App.game.statistics.secondsPlayed);
        }
        // Battles
        switch (this.gameState) {
            case GameConstants.GameState.fighting: {
                Battle.counter += GameConstants.TICK_TIME;
                if (Battle.counter >= GameConstants.BATTLE_TICK) {
                    Battle.tick();
                }
                break;
            }
            case GameConstants.GameState.gym: {
                GymBattle.counter += GameConstants.TICK_TIME;
                if (GymBattle.counter >= GameConstants.BATTLE_TICK) {
                    GymBattle.tick();
                }
                GymRunner.tick();
                break;
            }
            case GameConstants.GameState.dungeon: {
                DungeonBattle.counter += GameConstants.TICK_TIME;
                if (DungeonBattle.counter >= GameConstants.BATTLE_TICK) {
                    DungeonBattle.tick();
                }
                DungeonRunner.tick();
                break;
            }
            case GameConstants.GameState.battleFrontier: {
                BattleFrontierBattle.counter += GameConstants.TICK_TIME;
                if (BattleFrontierBattle.counter >= GameConstants.BATTLE_FRONTIER_TICK) {
                    BattleFrontierBattle.tick();
                }
                BattleFrontierRunner.tick();
                break;
            }
        }
        // Auto Save
        Save.counter += GameConstants.TICK_TIME;
        if (Save.counter > GameConstants.SAVE_TICK) {
            const now = new Date();
            if (new Date(player._lastSeen).toLocaleDateString() !== now.toLocaleDateString()) {
                this.quests.resetRefreshes();
                this.quests.generateQuestList();
                DailyDeal.generateDeals(Underground.getDailyDealsMax(), now);
                Notifier.notify({
                    message: 'It\'s a new day! Your quests and underground deals have been updated.',
                    type: NotificationConstants.NotificationOption.info,
                    timeout: 1e4,
                });
            }
            player._lastSeen = Date.now();
            Save.store(player);
        }
        // Underground
        Underground.counter += GameConstants.TICK_TIME;
        if (Underground.counter >= GameConstants.UNDERGROUND_TICK) {
            Underground.energyTick(Math.max(0, Underground.energyTick() - 1));
            if (Underground.energyTick() == 0) {
                Underground.gainEnergy();
                Underground.energyTick(Underground.getEnergyRegenTime());
            }
            Underground.counter = 0;
        }
        // Farm
        this.farming.update(GameConstants.TICK_TIME / GameConstants.SECOND);
        // Effect Engine (battle items)
        EffectEngineRunner.counter += GameConstants.TICK_TIME;
        if (EffectEngineRunner.counter >= GameConstants.EFFECT_ENGINE_TICK) {
            EffectEngineRunner.tick();
        }
        // Game timers
        GameHelper.counter += GameConstants.TICK_TIME;
        if (GameHelper.counter >= GameConstants.MINUTE) {
            GameHelper.tick();
        }
    }
    save() {
    }
    // Knockout getters/setters
    get gameState() {
        return this._gameState();
    }
    set gameState(value) {
        this._gameState(value);
    }
}
Game.achievementCounter = 0;
/**
 * Class which controls the UI of the game.
 */
class GameController {
    static applyRouteBindings() {
        $('path, rect').hover(function () {
            const id = $(this).attr('data-town');
            if (id && id != 'mapTooltipWrapper') {
                const tooltip = $('#mapTooltip');
                tooltip.text(id);
                tooltip.css('visibility', 'visible');
            }
        }, function () {
            const tooltip = $('#mapTooltip');
            tooltip.text('');
            tooltip.css('visibility', 'hidden');
        });
    }
    static animateCurrency(amount, target) {
        // Check if animations have been disabled
        if (!Settings.getSetting('showCurrencyGainedAnimation').observableValue()) {
            return;
        }
        let pos;
        const targetVisible = $(`#${target}`).is(':visible');
        if ($(`#${target}`).offset() && targetVisible) {
            pos = $(`#${target}`).offset();
            pos.top -= 15;
        }
        else {
            pos = $('#gameTitle').offset();
            pos.top += 45;
            pos.left -= 100;
        }
        const left = ((Math.random() * ((pos.left + 25) - (pos.left - 25)) + (pos.left - 25))).toFixed(2);
        const place = amount.toString().length;
        let multi = 1;
        for (let i = 0; i < place; i++) {
            multi *= 10;
        }
        const ani = `<p style="z-index:50;position:absolute;left:${left}px;top:${pos.top}px; font-size:${10 + 0.5 * Math.log(amount)}px;">+${amount.toLocaleString('en-US')}</p>`;
        $(ani).prependTo('body').animate({
            top: 10,
            opacity: 0,
        }, 200 * Math.log(amount) + 1000, 'linear', function () {
            $(this).remove();
        });
    }
    static simulateKey(code, type = 'keydown', modifiers = {}) {
        const evtName = type.startsWith('key') ? type : `key${type}`;
        const event = document.createEvent('HTMLEvents');
        Object.defineProperties(event, {
            code: { value: code },
        });
        event.initEvent(evtName, true, false);
        for (const i in modifiers) {
            event[i] = modifiers[i];
        }
        document.dispatchEvent(event);
    }
    static bindToolTips() {
        $('[data-toggle="popover"]').popover();
        $('[data-toggle="tooltip"]').tooltip();
        ko.bindingHandlers.tooltip = {
            init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                const local = ko.utils.unwrapObservable(valueAccessor()), options = {};
                ko.utils.extend(options, ko.bindingHandlers.tooltip.options);
                ko.utils.extend(options, local);
                $(element).tooltip(options);
                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $(element).tooltip('dispose');
                });
                if (bindingContext.$data instanceof Plot) {
                    $(element).hover(function () {
                        $(this).data('to', setInterval(function () {
                            $(element).tooltip('hide')
                                .attr('data-original-title', FarmController.getTooltipLabel(bindingContext.$index()))
                                .tooltip('show');
                        }, 100));
                    }, function () {
                        clearInterval($(this).data('to'));
                    });
                }
            },
            options: {
                placement: 'bottom',
                trigger: 'click',
            },
        };
    }
    static addKeyListeners() {
        $(document).on('keydown', function (e) {
            // Ignore any of our controls if focused on an input element
            if (document.activeElement.localName == 'input') {
                return;
            }
            if (App.game.gameState === GameConstants.GameState.dungeon) {
                switch (e.code) {
                    case 'ArrowUp':
                    case 'KeyW':
                        DungeonRunner.map.moveUp();
                        break;
                    case 'ArrowLeft':
                    case 'KeyA':
                        DungeonRunner.map.moveLeft();
                        break;
                    case 'ArrowDown':
                    case 'KeyS':
                        DungeonRunner.map.moveDown();
                        break;
                    case 'ArrowRight':
                    case 'KeyD':
                        DungeonRunner.map.moveRight();
                        break;
                    case 'Space':
                        DungeonRunner.openChest();
                        DungeonRunner.startBossFight();
                        break;
                    default: // any other key (ignore)
                        return;
                }
                e.preventDefault();
            }
            else if (App.game.gameState === GameConstants.GameState.town) {
                if (e.code === 'Space') {
                    if (player.town().gym()) {
                        GymRunner.startGym(player.town().gym());
                    }
                    else if (player.town().dungeon()) {
                        DungeonRunner.initializeDungeon(player.town().dungeon());
                    }
                    e.preventDefault();
                }
                else if ('gymList' in player.town()) {
                    const number = Number(e.key);
                    // Check if a number higher than 0 and less than total Gyms was pressed
                    if (number && number <= player.town().gymList().length) {
                        GymRunner.startGym(player.town().gymList()[number - 1]());
                    }
                }
            }
            else if (App.game.gameState === GameConstants.GameState.fighting) {
                // Simpler with key because +/= share a code
                switch (e.key) {
                    case '+':
                        MapHelper.moveToRoute(player.route() + 1, player.region);
                        break;
                    case '-':
                        MapHelper.moveToRoute(player.route() - 1, player.region);
                        break;
                    default: // any other key (ignore)
                        return;
                }
                e.preventDefault();
            }
        });
        $(document).on('keydown', function (e) {
            if (App.game.gameState === GameConstants.GameState.safari) {
                const dir = GameConstants.KeyCodeToDirection[e.code];
                if (dir) {
                    e.preventDefault();
                    Safari.move(dir);
                }
                if (e.code === 'Space') {
                    e.preventDefault();
                }
            }
        });
        $(document).on('keyup', function (e) {
            if (App.game.gameState === GameConstants.GameState.safari) {
                const dir = GameConstants.KeyCodeToDirection[e.code];
                if (dir) {
                    e.preventDefault();
                    Safari.stop(dir);
                }
                else if (e.code === 'Space') {
                    e.preventDefault();
                }
            }
        });
    }
}
$(document).ready(function () {
    $('#pokedexModal').on('show.bs.modal', PokedexHelper.updateList);
});
// when stacking modals allow scrolling after top modal hidden
$(document).on('hidden.bs.modal', '.modal', function () {
    $('.modal:visible').length && $(document.body).addClass('modal-open');
});
// For helper functions that may be needed across all files
class GameHelper {
    static incrementObservable(obs, amt = 1) {
        if (typeof obs != 'function') {
            return false;
        }
        if (isNaN(amt) || amt == 0) {
            amt = 1;
        }
        obs(obs() + amt);
    }
    static enumLength(enumerable) {
        return Object.keys(enumerable).length / 2;
    }
    static enumStrings(enumerable) {
        return Object.keys(enumerable).filter(k => isNaN(+k));
    }
    static enumNumbers(enumerable) {
        return Object.keys(enumerable).filter(k => !isNaN(+k)).map(Number);
    }
    static tick() {
        this.counter = 0;
        this.updateTime();
    }
    static updateTime() {
        const now = new Date();
        if (now.getDate() == GameHelper.tomorrow.getDate()) {
            GameHelper.tomorrow = GameHelper.getTomorrow();
        }
        GameHelper.currentTime(new Date());
    }
    static getTomorrow() {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(0);
        tomorrow.setMinutes(0);
        tomorrow.setSeconds(0);
        tomorrow.setMilliseconds(0);
        return tomorrow;
    }
    static twoDigitNumber(n) {
        // For use in clocks / showing time
        // Turns 4 into 04, does nothing to 23, turns 173 into 73
        return (`0${n}`).slice(-2);
    }
    static formatAmount(n) {
        if (n >= 1e9) {
            return `${Math.floor(n / 1e9)}b`;
        }
        else if (n >= 1e6) {
            return `${Math.floor(n / 1e6)}m`;
        }
        else if (n >= 1e3) {
            return `${Math.floor(n / 1e3)}k`;
        }
        return `${n}`;
    }
    static getIndexFromDistribution(a) {
        const rand = Math.random();
        for (let i = 0; i < a.length; i++) {
            if (rand <= a[i]) {
                return i;
            }
        }
    }
    static createArray(start, max, step) {
        const array = [];
        for (let i = start; i <= max; i += step) {
            array.push(i);
        }
        return array;
    }
    static anOrA(name) {
        return ['a', 'e', 'i', 'o', 'u'].includes(name[0].toLowerCase()) ? 'an' : 'a';
    }
}
GameHelper.MS_IN_MIN = 1000 * 60;
GameHelper.MS_IN_HOUR = GameHelper.MS_IN_MIN * 60;
GameHelper.counter = 0;
GameHelper.currentTime = ko.observable(new Date());
GameHelper.tomorrow = GameHelper.getTomorrow();
GameHelper.msUntilTomorrow = ko.pureComputed(function () {
    return Number(GameHelper.tomorrow) - Number(GameHelper.currentTime());
});
GameHelper.formattedTimeUntilTomorrow = ko.pureComputed(function () {
    let milliseconds = GameHelper.msUntilTomorrow();
    const hours = Math.floor(milliseconds / GameHelper.MS_IN_HOUR);
    milliseconds -= hours * GameHelper.MS_IN_HOUR;
    const minutes = Math.floor(milliseconds / GameHelper.MS_IN_MIN);
    return `${hours}:${GameHelper.twoDigitNumber(minutes)}`;
});
GameHelper.formattedLetterTimeUntilTomorrow = ko.pureComputed(function () {
    let milliseconds = GameHelper.msUntilTomorrow();
    const hours = Math.floor(milliseconds / GameHelper.MS_IN_HOUR);
    milliseconds -= hours * GameHelper.MS_IN_HOUR;
    const minutes = Math.floor(milliseconds / GameHelper.MS_IN_MIN);
    return `${hours}h${GameHelper.twoDigitNumber(minutes)}m`;
});
class Sound {
    constructor(fileName, soundName) {
        this.sound = document.createElement('audio');
        this.initialized = false;
        const src = `assets/sounds/${fileName}.mp3`;
        this.name = soundName;
        this.sound.setAttribute('preload', 'auto');
        this.sound.setAttribute('controls', 'none');
        this.sound.style.display = 'none';
        // Wait until the document is loaded before moving the sound to the body
        $(() => {
            document.body.appendChild(this.sound);
            // Set as initialized now, incase the user is on Desktop and hasn't clicked anywhere yet
            this.initialized = true;
            // This is needed to be able to play sounds on mobile devices
            $(document).one('click', () => {
                this.sound.play().finally(() => {
                    this.sound.pause();
                    this.sound.src = src;
                });
                setTimeout(() => {
                    this.sound.pause();
                    this.sound.src = src;
                }, 1000);
            });
            Settings.getSetting('sound.volume').observableValue.subscribe((volume) => {
                try {
                    this.sound.volume = volume / 100;
                }
                catch (e) {
                    console.error(e);
                }
            });
        });
    }
    play() {
        if (this.initialized && this.canPlay()) {
            this.sound.play();
        }
    }
    stop() {
        if (this.initialized) {
            this.sound.pause();
        }
    }
    remove() {
        if (this.initialized) {
            this.sound.remove();
        }
    }
    canPlay() {
        const setting = Settings.getSetting(`sound.${this.name}`);
        if (!setting) {
            return true;
        }
        return !!setting.value;
    }
    toJSON() {
        return {
            name: this.name,
        };
    }
}
class SettingOption {
    constructor(text, value) {
        this.text = text;
        this.value = value;
    }
}
/// <reference path="SettingOption.ts" />
class Setting {
    // Leave options array empty to allow all options.
    constructor(name, displayName, options, defaultValue) {
        this.name = name;
        this.displayName = displayName;
        this.options = options;
        this.defaultValue = defaultValue;
        this.observableValue = ko.observable(this.defaultValue);
        this.set(defaultValue);
    }
    set(value) {
        if (this.validValue(value)) {
            this.value = value;
            this.observableValue(value);
        }
        else {
            console.warn(`${value} is not a valid value for setting ${this.name}`);
        }
    }
    validValue(value) {
        if (!this.isUnlocked(value)) {
            return false;
        }
        if (this.options.length === 0) {
            return true;
        }
        for (let i = 0; i < this.options.length; i++) {
            if (this.options[i].value === value) {
                return true;
            }
        }
        return false;
    }
    isSelected(value) {
        return ko.pureComputed(function () {
            return this.observableValue() === value;
        }, this);
    }
    isUnlocked(value) {
        return true;
    }
}
/// <reference path="Setting.ts" />
class MultipleChoiceSetting extends Setting {
    constructor(name, displayName, options, defaultValue) {
        super(name, displayName, options, defaultValue);
    }
}
/// <reference path="MultipleChoiceSetting.ts" />
class BooleanSetting extends MultipleChoiceSetting {
    constructor(name, displayName, defaultValue) {
        super(name, displayName, [
            new SettingOption('On', true),
            new SettingOption('Off', false),
        ], defaultValue);
    }
    toggle() {
        this.set(!this.value);
    }
}
///<reference path="./utilities/Sound.ts"/>
///<reference path="./settings/BooleanSetting.ts"/>
/**
 * Contains all notification constants for easy access.
 */
var NotificationConstants;
(function (NotificationConstants) {
    let NotificationOption;
    (function (NotificationOption) {
        NotificationOption[NotificationOption["info"] = 0] = "info";
        NotificationOption[NotificationOption["success"] = 1] = "success";
        NotificationOption[NotificationOption["warning"] = 2] = "warning";
        NotificationOption[NotificationOption["danger"] = 3] = "danger";
        NotificationOption[NotificationOption["primary"] = 4] = "primary";
        NotificationOption[NotificationOption["secondary"] = 5] = "secondary";
        NotificationOption[NotificationOption["dark"] = 6] = "dark";
        NotificationOption[NotificationOption["light"] = 7] = "light";
    })(NotificationOption = NotificationConstants.NotificationOption || (NotificationConstants.NotificationOption = {}));
    NotificationConstants.NotificationSound = {
        ready_to_hatch: new Sound('ready_to_hatch', 'Egg ready to hatch'),
        shiny_long: new Sound('shiny_long', 'Shiny Pokemon encountered/hatched'),
        new_catch: new Sound('new_catch', 'New pokemon/shiny captured'),
        achievement: new Sound('achievement', 'New achievement earned'),
        battle_item_timer: new Sound('battle_item_timer', 'Battle item about to wear off'),
        quest_ready_to_complete: new Sound('quest_ready_to_complete', 'Quest is ready to be completed'),
        quest_level_increased: new Sound('quest_level_increased', 'Quest level increased'),
        underground_energy_full: new Sound('underground_energy_full', 'Mining energy reached maximum capacity'),
        ready_to_harvest: new Sound('ready_to_harvest', 'Farm ready to harvest'),
    };
    NotificationConstants.NotificationSetting = {
        ready_to_hatch: new BooleanSetting('notification.ready_to_hatch', 'Egg ready to hatch', true),
        hatched: new BooleanSetting('notification.hatched', 'Egg hatched', true),
        hatched_shiny: new BooleanSetting('notification.hatched_shiny', 'Egg hatched a shiny', true),
        route_item_found: new BooleanSetting('notification.route_item_found', 'Item found during route battle', true),
        dungeon_item_found: new BooleanSetting('notification.dungeon_item_found', 'Item found in dungeon chest', true),
        battle_item_timer: new BooleanSetting('notification.battle_item_timer', 'Battle item about to wear off', true),
        encountered_shiny: new BooleanSetting('notification.encountered_shiny', 'Encountered a shiny Pokemon', true),
        quest_ready_to_complete: new BooleanSetting('notification.quest_ready_to_complete', 'Quest is ready to be completed', true),
        underground_energy_full: new BooleanSetting('notification.underground_energy_full', 'Mining energy reached maximum capacity', true),
        event_start_end: new BooleanSetting('notification.event_start_end', 'Event start/end information', true),
        dropped_item: new BooleanSetting('notification.dropped_item', 'Enemy pokemon dropped an item', true),
        ready_to_harvest: new BooleanSetting('notification.ready_to_harvest', 'Berry ready to harvest', true),
        gym_won: new BooleanSetting('notification.gym_won', 'Gym leader defeated', true),
    };
})(NotificationConstants || (NotificationConstants = {}));
class Notifier {
    static notify({ message, type = NotificationConstants.NotificationOption.primary, title = '', timeout = 3000, time = 'just now', sound = null, setting = null, }) {
        $(document).ready(function () {
            // If we have sounds enabled for this, play it now
            if (sound) {
                sound.play();
            }
            // Check if this type of notification is disabled
            if (setting && !Settings.getSetting(setting.name).value) {
                return;
            }
            // Get the notification ready to display
            const toastID = Math.random().toString(36).substr(2, 9);
            const toastHTML = `<div id="${toastID}" class="toast bg-${NotificationConstants.NotificationOption[type]}" data-autohide="false">
                  ${title ? `<div class="toast-header">
                    <strong class="mr-auto text-primary">${title || ''}</strong>
                    <small class="text-muted">${time}</small>
                    <button type="button" class="ml-2 mb-1 close" data-dismiss="toast">×</button>
                  </div>` : ''}
                  <div class="toast-body text-light">
                    ${message}
                    ${title ? '' : '<button type="button" class="ml-2 mb-1 close" data-dismiss="toast">×</button>'}
                  </div>
                </div>`;
            $('#toaster').prepend(toastHTML);
            // Show the notification
            $('.toast').toast('show');
            // Once the notification is shown, hide it after specified timeout
            $(`#${toastID}`).on('shown.bs.toast', (el) => {
                setTimeout(() => {
                    $(`#${toastID}`).toast('hide');
                }, timeout);
            });
            // Once hidden remove the element
            $(`#${toastID}`).on('hidden.bs.toast', () => {
                document.getElementById(toastID).remove();
            });
        });
    }
}
class ObservableArrayProxy extends Array {
    constructor(array) {
        super();
        this.array = array;
        this._array = ko.observableArray(this.array);
        return new Proxy(this._array, ObservableArrayProxy.proxyHandler);
    }
}
ObservableArrayProxy.proxyHandler = {
    get: function (target, prop) {
        if (target[prop]) { // this lets us use ObservableArray functions like reverse or peek
            return target[prop];
        }
        else {
            return target()[prop];
        }
    },
    set: function (target, prop, value) {
        target()[prop] = value;
        return true;
    },
    has: function (target, prop) {
        // This is needed for map, forEach etc to work,
        // because they want to check if target.hasOwnProperty("0") first.
        // The ko function doesn't seem to have any OwnProperties anyway, so no harm here (don't quote me)
        return Reflect.has(target(), prop);
    },
};
class Upgrade {
    constructor(name, displayName, maxLevel, costList, bonusList, increasing = true) {
        this.defaults = {
            level: 0,
        };
        this._level = ko.observable();
        // Optional array of costs
        this.costList = [];
        // Optional array of benefits
        this.bonusList = [];
        this.saveKey = name;
        this.name = name;
        this.displayName = displayName;
        this.maxLevel = maxLevel;
        this.level = this.defaults.level;
        this.costList = costList;
        this.bonusList = bonusList;
        this.increasing = increasing;
    }
    calculateCost() {
        return this.costList[this.level];
    }
    // Override with a custom function
    calculateBonus(level = this.level) {
        return this.bonusList[level];
    }
    upgradeBonus() {
        if (!this.isMaxLevel()) {
            return this.calculateBonus(this.level + 1) - this.calculateBonus(this.level);
        }
        return 0;
    }
    isMaxLevel() {
        return this.level >= this.maxLevel;
    }
    canAfford() {
        return App.game.wallet.hasAmount(this.calculateCost());
    }
    // Override in subclass when other requirements exist.
    canBuy() {
        return this.level < this.maxLevel && this.canAfford();
    }
    buy() {
        if (this.canBuy()) {
            App.game.wallet.loseAmount(this.calculateCost());
            this.levelUp();
        }
        else {
            Notifier.notify({
                message: 'You cannot afford to buy this upgrade yet',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    levelUp() {
        this.level = this.level + 1;
    }
    fromJSON(json) {
        var _a;
        if (json == null) {
            return;
        }
        this.level = (_a = json['level']) !== null && _a !== void 0 ? _a : this.defaults.level;
    }
    toJSON() {
        return {
            level: this.level,
        };
    }
    // Knockout getters/setters
    get level() {
        return this._level();
    }
    set level(value) {
        this._level(Math.min(value, this.maxLevel));
    }
}
///<reference path="upgrades/Upgrade.ts"/>
/**
 * Information about the player.
 * All player variables need to be saved.
 */
class Player {
    constructor(savedPlayer) {
        this.effectList = {};
        this.effectTimer = {};
        const saved = (savedPlayer != null);
        savedPlayer = savedPlayer || {};
        this._lastSeen = savedPlayer._lastSeen || 0;
        this._region = ko.observable(savedPlayer._region);
        if (MapHelper.validRoute(savedPlayer._route, savedPlayer._region)) {
            this._route = ko.observable(savedPlayer._route);
        }
        else {
            switch (savedPlayer._region) {
                case 0:
                    this._route = ko.observable(1);
                    break;
                case 1:
                    this._route = ko.observable(29);
                    break;
                case 2:
                    this._route = ko.observable(101);
                    break;
                case 3:
                    this._route = ko.observable(201);
                    break;
                default:
                    this._route = ko.observable(1);
                    this._region = ko.observable(GameConstants.Region.kanto);
            }
        }
        this._town = ko.observable(TownList['Pallet Town']);
        this._currentTown = ko.observable('');
        this._starter = savedPlayer._starter != undefined ? savedPlayer._starter : GameConstants.Starter.None;
        this._itemList = Save.initializeItemlist();
        if (savedPlayer._itemList) {
            for (const key in savedPlayer._itemList) {
                if (this._itemList[key]) {
                    this._itemList[key](savedPlayer._itemList[key]);
                }
            }
        }
        this._itemMultipliers = savedPlayer._itemMultipliers || Save.initializeMultipliers();
        // TODO(@Isha) move to underground classes.
        this.mineInventory = new ObservableArrayProxy(savedPlayer.mineInventory || []);
        for (const item of this.mineInventory) {
            item.amount = ko.observable(item.amount);
        }
        this.achievementsCompleted = savedPlayer.achievementsCompleted || {};
        const today = new Date();
        const lastSeen = new Date(this._lastSeen);
        this._lastSeen = Date.now();
        this.effectList = Save.initializeEffects(savedPlayer.effectList || {});
        this.effectTimer = Save.initializeEffectTimer(savedPlayer.effectTimer || {});
        this.highestRegion = ko.observable(savedPlayer.highestRegion || 0);
    }
    set itemList(value) {
        this._itemList = value;
    }
    get itemList() {
        return this._itemList;
    }
    get itemMultipliers() {
        return this._itemMultipliers;
    }
    get route() {
        return this._route;
    }
    set route(value) {
        this._route = value;
    }
    get region() {
        return this._region();
    }
    set region(value) {
        this._region(value);
    }
    get town() {
        return this._town;
    }
    set town(value) {
        this._town = value;
    }
    get currentTown() {
        return this._currentTown;
    }
    set currentTown(value) {
        this._currentTown = value;
    }
    get starter() {
        return this._starter;
    }
    set starter(value) {
        this._starter = value;
    }
    gainItem(itemName, amount) {
        this._itemList[itemName](this._itemList[itemName]() + amount);
    }
    loseItem(itemName, amount) {
        this._itemList[itemName](this._itemList[itemName]() - amount);
    }
    lowerItemMultipliers() {
        for (const obj in ItemList) {
            const item = ItemList[obj];
            item.decreasePriceMultiplier();
        }
    }
    // TODO(@Isha) move to underground classes.
    hasMineItems() {
        for (let i = 0; i < this.mineInventory.length; i++) {
            if (this.mineInventory[i].amount() > 0) {
                return true;
            }
        }
        return false;
    }
    // TODO(@Isha) move to underground classes.
    mineInventoryIndex(id) {
        for (let i = 0; i < player.mineInventory.length; i++) {
            if (player.mineInventory[i].id === id) {
                return i;
            }
        }
        return -1;
    }
    // TODO(@Isha) move to underground classes.
    getUndergroundItemAmount(id) {
        const index = this.mineInventoryIndex(id);
        if (index > -1) {
            return player.mineInventory[index].amount();
        }
        else {
            return 0;
        }
    }
    toJSON() {
        const keep = [
            '_route',
            '_region',
            '_starter',
            '_itemList',
            '_itemMultipliers',
            // TODO(@Isha) remove.
            'mineInventory',
            // TODO(@Isha) remove.
            '_mineLayersCleared',
            'achievementsCompleted',
            '_lastSeen',
            'gymDefeats',
            'achievementsCompleted',
            'effectList',
            'effectTimer',
            'highestRegion',
        ];
        const plainJS = ko.toJS(this);
        return Save.filter(plainJS, keep);
    }
}
class Save {
    static store(player) {
        const json = JSON.stringify(player);
        localStorage.setItem('player', json);
        localStorage.setItem('settings', Settings.save());
        localStorage.setItem('save', JSON.stringify(this.getSaveObject()));
        this.counter = 0;
        console.log('%cGame saved', 'color:#3498db;font-weight:900;');
    }
    static getSaveObject() {
        const saveObject = {};
        // TODO: Make the Underground a game Feature
        saveObject[Underground.saveKey] = Underground.save();
        Object.keys(App.game).filter(key => App.game[key].saveKey).forEach(key => {
            saveObject[App.game[key].saveKey] = App.game[key].toJSON();
        });
        return saveObject;
    }
    static load() {
        const saved = localStorage.getItem('player');
        const settings = localStorage.getItem('settings');
        Settings.load(JSON.parse(settings));
        const saveJSON = localStorage.getItem('save');
        if (saveJSON !== null) {
            const saveObject = JSON.parse(saveJSON);
            Underground.load(saveObject[Underground.saveKey]);
        }
        if (saved !== 'null') {
            return new Player(JSON.parse(saved));
        }
        else {
            return new Player();
        }
    }
    static download() {
        const backupSaveData = { player, save: this.getSaveObject() };
        try {
            const element = document.createElement('a');
            element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(btoa(JSON.stringify(backupSaveData)))}`);
            const datestr = GameConstants.formatDate(new Date());
            const filename = `[v${App.game.update.version}] PokeClickerSave_${datestr}.txt`;
            element.setAttribute('download', filename);
            element.style.display = 'none';
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
        }
        catch (err) {
            console.error('Error trying to download save', err);
            Notifier.notify({
                title: 'Failed to download save data',
                message: 'Please check the console for errors, and report them on our Discord.',
                type: NotificationConstants.NotificationOption.primary,
                timeout: 6e4,
            });
            try {
                localStorage.backupSave = JSON.stringify(backupSaveData);
            }
            catch (e) { }
        }
    }
    static reset() {
        const confirmDelete = prompt('Are you sure you want reset?\nIf so, type \'DELETE\'');
        if (confirmDelete == 'DELETE') {
            localStorage.removeItem('player');
            localStorage.removeItem('save');
            location.reload();
        }
    }
    /** Filters an object by property names
     * @param     object : any The object you want to filter
     * @param       keep : string[] An array of property names that should be kept
     * @returns {Object} : The original object with only the specified properties
     */
    static filter(object, keep) {
        const filtered = {};
        let prop;
        for (prop in object) {
            if (keep.includes(prop)) {
                filtered[prop] = object[prop];
            }
        }
        return filtered;
    }
    static initializeMultipliers() {
        const res = {};
        for (const obj in ItemList) {
            res[obj] = 1;
        }
        return res;
    }
    static initializeItemlist() {
        const res = {};
        for (const obj in ItemList) {
            res[obj] = ko.observable(0);
        }
        return res;
    }
    static initializeShards(saved) {
        let res;
        if (saved) {
            res = saved.map((type) => {
                return type.map((effectiveness) => {
                    return ko.observable(effectiveness);
                });
            });
        }
        else {
            res = [];
            for (const item in PokemonType) {
                if (!isNaN(Number(item))) {
                    res[item] = [];
                    res[item][GameConstants.TypeEffectiveness.Immune] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.NotVery] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.Normal] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.Very] = ko.observable(0);
                }
            }
        }
        return res;
    }
    static initializeEffects(saved) {
        const res = {};
        for (const obj in GameConstants.BattleItemType) {
            res[obj] = ko.observable(saved ? saved[obj] || 0 : 0);
        }
        return res;
    }
    static initializeEffectTimer(saved) {
        const res = {};
        for (const obj in GameConstants.BattleItemType) {
            res[obj] = ko.observable(saved ? saved[obj] || '00:00' : '00:00');
        }
        return res;
    }
    static loadFromFile(file) {
        const fileToRead = file;
        const fr = new FileReader();
        fr.readAsText(fileToRead);
        setTimeout(function () {
            try {
                const decoded = atob(fr.result);
                console.debug('decoded:', decoded);
                const json = JSON.parse(decoded);
                console.debug('json:', json);
                if (decoded && json && json.player && json.save) {
                    localStorage.setItem('player', JSON.stringify(json.player));
                    localStorage.setItem('save', JSON.stringify(json.save));
                    location.reload();
                }
                else {
                    Notifier.notify({
                        message: 'This is not a valid decoded savefile',
                        type: NotificationConstants.NotificationOption.danger,
                    });
                }
            }
            catch (err) {
                Notifier.notify({
                    message: 'This is not a valid savefile',
                    type: NotificationConstants.NotificationOption.danger,
                });
            }
        }, 1000);
    }
    static convert() {
        const base64 = $('#convertTextArea').val().toString();
        try {
            const json = atob(base64);
            const p = JSON.parse(json);
            Save.convertShinies(p.caughtPokemonList);
            $('#saveModal').modal('hide');
        }
        catch (e) {
            Notifier.notify({
                message: 'Invalid save data.',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    static convertShinies(list) {
        const converted = [];
        list = list.filter(p => p.shiny);
        for (const pokemon of list) {
            const id = +pokemon.id;
            const partyPokemon = App.game.party.getPokemon(id);
            if (partyPokemon) {
                converted.push(pokemon.name);
                partyPokemon.shiny = true;
            }
        }
        if (converted.length > 0) {
            Notifier.notify({
                message: `You have gained the following shiny Pokémon:</br>${converted.join(',</br>')}`,
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
            });
        }
        else {
            Notifier.notify({
                message: 'No new shiny Pokémon to import.',
                type: NotificationConstants.NotificationOption.info,
            });
        }
    }
}
Save.counter = 0;
document.addEventListener('DOMContentLoaded', function (event) {
    $('#saveModal').on('show.bs.modal', function () {
        $('#saveTextArea').text(JSON.stringify(player));
    });
});
$(() => {
    const columns = ['left-column', 'middle-top-sort-column', 'middle-bottom-sort-column', 'right-column'];
    // Enable sorting of items
    columns.forEach(column => {
        Sortable.create(document.getElementById(column), {
            animation: 100,
            group: 'main-sortable',
            draggable: '.card.sortable',
            handle: '.card-header',
            dataIdAttr: 'id',
            sort: true,
            delay: 500,
            delayOnTouchOnly: true,
            touchStartThreshold: 20,
            store: {
                set: sortable => {
                    const order = sortable.toArray();
                    localStorage.setItem(sortable.el.id, order.join('|'));
                    // Clear out whitespace
                    if (/^([\s\r\n\t]|<!--.*-->)+$/.test(sortable.el.innerHTML)) {
                        sortable.el.innerHTML = '';
                    }
                },
            },
            onSort: evt => {
                const currentSortable = evt.to[Object.keys(evt.to)[0]];
                const order = currentSortable.toArray();
                localStorage[currentSortable.el.id] = order.join('|');
            },
        });
    });
    // Sort the items between columns, in order
    columns.forEach(sortable => {
        const parent = document.getElementById(sortable);
        const itemOrder = localStorage.getItem(sortable);
        const itemOrderArr = itemOrder ? itemOrder.split('|') : [];
        let prevItem;
        itemOrderArr.forEach(item => {
            const child = document.getElementById(item);
            if (!prevItem) {
                parent.insertBefore(child, parent.firstChild);
            }
            else {
                const prevChild = document.getElementById(prevItem);
                prevChild.parentNode.insertBefore(child, prevChild.nextSibling);
            }
            prevItem = item;
        });
    });
    // Clear out whitespace
    columns.forEach(sortable => {
        const el = document.getElementById(sortable);
        if (/^([\s\r\n\t]|<!--.*-->)+$/.test(el.innerHTML)) {
            el.innerHTML = '';
        }
    });
});
class StartSequenceRunner {
    static start() {
        App.game.gameState = GameConstants.GameState.paused;
        $('#startSequenceModal').modal('show');
    }
    static pickStarter(s) {
        App.game.quests.getQuestLine('Tutorial Quests').beginQuest(0);
        this.starterPicked = s;
        $('#pickStarterModal').modal('hide');
        const dataPokemon = PokemonHelper.getPokemonByName(GameConstants.Starter[this.starterPicked]);
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        App.game.gameState = GameConstants.GameState.fighting;
        const battlePokemon = new BattlePokemon(dataPokemon.name, dataPokemon.id, dataPokemon.type1, dataPokemon.type2, 10, 1, 100, 0, 0, shiny);
        Battle.enemyPokemon(battlePokemon);
        // Show the help information text
        Information.show({
            steps: [
                {
                    element: document.getElementsByClassName('battle-view')[0],
                    intro: 'Click here to deal "Click Attack" damage to Pokémon.',
                },
            ],
        });
        // Set the function to call showCaughtMessage after pokemon is caught
        battlePokemon.isAlive = function () {
            if (battlePokemon.health() <= 0) {
                setTimeout(function () {
                    Information.hide();
                    player.starter = StartSequenceRunner.starterPicked;
                    StartSequenceRunner.showCaughtMessage();
                }, 1000);
                //reset the function so you don't call it too many times :)
                //What a beautiful piece of code
                battlePokemon.isAlive = function () {
                    return false;
                };
            }
            return this.health() > 0;
        };
    }
    static showCaughtMessage() {
        App.game.gameState = GameConstants.GameState.paused;
        $('#starterCaughtModal').modal('show');
        $('#pokeballSelector').css('display', 'block');
        $('#pokemonListContainer').css('display', 'block');
        $('#oakItemsContainer').css('display', 'block');
        $('#questDisplayContainer').css('display', 'block');
    }
}
StartSequenceRunner.starterPicked = GameConstants.Starter.None;
StartSequenceRunner.noStarterCount = 0;
document.addEventListener('DOMContentLoaded', function (event) {
    $('#startSequenceModal').on('hidden.bs.modal', function () {
        $('#pickStarterModal').modal('show');
    });
    $('#pickStarterModal').on('hidden.bs.modal', function () {
        if (StartSequenceRunner.starterPicked == GameConstants.Starter.None) {
            StartSequenceRunner.noStarterCount++;
            const startersCount = StartSequenceRunner.noStarterCount >= 5 ? 'four' : 'three';
            $('#pickStarterModalText').text(`I can't hold off all ${startersCount}! Please pick the pokémon you want to fight!`);
            $('#pickStarterModal').modal('show');
            if (StartSequenceRunner.noStarterCount == 5) {
                // Add Pikachu to the selections
                $('#starterSelection').append(`<div class="col">
                        <input class="image-starter" type="image"
                           src="assets/images/pokemon/25.png"
                           onclick="StartSequenceRunner.pickStarter(GameConstants.Starter.Pikachu)">
                    </div>`);
            }
        }
    });
    $('#starterCaughtModal').on('hidden.bs.modal', function () {
        Save.store(player);
        App.game.gameState = GameConstants.GameState.fighting;
        Information.show({
            steps: [
                {
                    element: document.getElementById('questDisplayContainer'),
                    intro: 'Complete the tutorial quests to continue.',
                },
            ],
        });
    });
});
class Update {
    constructor() {
        this.saveKey = 'update';
        // Loaded from package.json
        this.version = '0.5.7';
        this.saveVersion = '0.0.0';
        const saveData = this.getSaveData();
        if (saveData) {
            this.fromJSON(saveData.update, true);
        }
        // Start our update check
        this.checkForNewerVersionOnInterval();
    }
    checkForNewerVersionOnInterval() {
        // Lets check every 3 hours for a newer version
        const checkForNewVersionInterval = setInterval(() => {
            try {
                $.ajax({
                    cache: false,
                    url: './package.json',
                    dataType: 'json',
                    success: result => {
                        // If the website version is newer
                        if (this.isNewerVersion(result.version, this.version)) {
                            clearInterval(checkForNewVersionInterval);
                            Notifier.notify({
                                title: `[UPDATE] v${result.version}`,
                                message: 'A newer version of the game is available:<br/><br/><a class="btn btn-warning btn-block" href="#" onclick="location.reload(true);">Reload Page</a>',
                                timeout: GameConstants.DAY,
                            });
                        }
                    },
                });
            }
            catch (ಠ_ಠ) {
                console.error('[update] Unable to check for new version', ಠ_ಠ);
            }
        }, GameConstants.HOUR * 3);
    }
    // potentially newer version, check against version
    isNewerVersion(version, compareVersion) {
        return compareVersion.localeCompare(version, undefined, { numeric: true }) === -1;
    }
    // potentially older version, check against version
    isOlderVersion(version, compareVersion) {
        return compareVersion.localeCompare(version, undefined, { numeric: true }) === 1;
    }
    check() {
        // Must modify these object when updating
        const playerData = this.getPlayerData();
        const saveData = this.getSaveData();
        const settingsData = this.getSettingsData();
        const backupSaveData = { player: playerData, save: saveData };
        if (!playerData || !saveData || !settingsData) {
            return;
        }
        if (this.isOlderVersion(this.saveVersion, '0.4.0')) {
            try {
                // Update the save data as it is no longer a part of player data
                saveData.statistics = Object.assign(Object.assign({}, playerData.statistics || {}), { pokemonCaptured: playerData._caughtAmount || 0, pokemonDefeated: playerData._defeatedAmount || 0, totalShinyPokemonCaptured: playerData._shinyCatches || 0, totalPokemonCaptured: playerData.statistics.pokemonCaptured || 0, totalPokemonDefeated: playerData.statistics.pokemonDefeated || 0 });
                // Update save data
                this.setSaveData(saveData);
            }
            catch (ಠ_ಠ) {
                console.error('[update] v0.4.0 - Couldn\'t update statistics..', ಠ_ಠ);
            }
        }
        if (this.isOlderVersion(this.saveVersion, '0.4.4')) {
            try {
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { clickAttacks: saveData.statistics.clicks || 0, totalDungeonTokens: saveData.statistics.totalTokens || 0, undergroundItemsFound: saveData.statistics.digItems || 0, undergroundLayersMined: saveData.statistics.digDeeper || 0 });
                // Update save data
                this.setSaveData(saveData);
            }
            catch (ಠ_ಠ) {
                console.error('[update] v0.4.4 - Couldn\'t update statistics..', ಠ_ಠ);
            }
        }
        if (this.isOlderVersion(this.saveVersion, '0.4.15')) {
            try {
                playerData._itemList.Lucky_egg = playerData._itemList.xExp;
                delete playerData._itemList.xExp;
                delete localStorage.mine;
                // Update save data
                this.setPlayerData(playerData);
            }
            catch (ಠ_ಠ) {
                console.error('[update] v0.4.15 - Couldn\'t update..', ಠ_ಠ);
            }
        }
        if (this.isOlderVersion(this.saveVersion, '0.4.17')) {
            try {
                // Just incase statistics is not set
                saveData.statistics = saveData.statistics || {};
                // Rename from the old statistic name
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalPokemonHatched: saveData.statistics.hatchedEggs || 0 });
                // Update save data
                this.setSaveData(saveData);
            }
            catch (ಠ_ಠ) {
                console.error('[update] v0.4.17 - Couldn\'t update statistics..', ಠ_ಠ);
            }
        }
        if (this.isOlderVersion(this.saveVersion, '0.4.18')) {
            try {
                // Move quests from player data -> save data
                saveData.quests = {
                    xp: Math.floor(playerData._questXP || 0),
                    refreshes: playerData.questRefreshes || 0,
                    lastRefresh: playerData._lastSeen,
                    questList: new Array(10).fill({}).map((q, index) => ({ index, initial: null })),
                    questLines: [
                        {
                            state: playerData.tutorialComplete ? 2 : 1,
                            name: 'Tutorial Quests',
                            quest: playerData.tutorialProgress || 0,
                        },
                    ],
                };
                // Convert quest the player is currently doing
                (playerData.currentQuests || []).forEach(quest => {
                    saveData.quests.questList[quest.index || 0].initial = quest.initial || null;
                });
                // Convert quest the player has completed
                (playerData.completedQuestList || []).forEach((complete, index) => {
                    if (complete) {
                        saveData.quests.questList[index].notified = true;
                        saveData.quests.questList[index].claimed = true;
                        saveData.quests.questList[index].initial = 0;
                    }
                });
                // If player has defeated the Hoenn Champion, start the deoxys quest line
                saveData.badgeCase = saveData.badgeCase || [];
                // Not using game constants incase the value isn't 39 in the future
                if (saveData.badgeCase[39]) {
                    saveData.quests.questLines.push({ state: 1, name: 'Mystery of Deoxys', quest: 0 });
                }
                // Update save data
                this.setSaveData(saveData);
            }
            catch (ಠ_ಠ) {
                console.error('[update] v0.4.18 - Couldn\'t update quests data..', ಠ_ಠ);
            }
        }
        if (this.isOlderVersion(this.saveVersion, '0.5.0')) {
            try {
                // Give the players Soothe Bells in place of Time stones
                playerData._itemList = playerData._itemList || {};
                playerData._itemList.Soothe_bell = playerData._itemList.Time_stone || 0;
                console.debug('items', playerData._itemList);
                delete playerData._itemList.Time_stone;
                // Update player data
                this.setPlayerData(playerData);
            }
            catch (ಠ_ಠ) {
                console.error('[update] v0.5.0 - Couldn\'t update item list data..', ಠ_ಠ);
            }
        }
        if (this.isOlderVersion(this.saveVersion, '0.5.1')) {
            try {
                // Items removed from the Underground, if the player has these items in their current layer, reset their mine
                const mineData = JSON.parse(localStorage.mine);
                if (mineData.rewardNumbers.some(id => id >= 46)) {
                    delete localStorage.mine;
                }
            }
            catch (ಠ_ಠ) {
                console.error('[update] v0.5.1 - Couldn\'t reset player mine..', ಠ_ಠ);
            }
        }
        if (this.isOlderVersion(this.saveVersion, '0.5.2')) {
            try {
                // Calculate hatched amount (we can't calculate the shiny hatches though)
                const pokemonHatched = {};
                saveData.party.caughtPokemon.forEach(p => pokemonHatched[p.id] = p.attackBonus / 25);
                // Rename from the old statistic name, add our new statistics
                saveData.statistics = Object.assign(Object.assign({}, saveData.statistics), { totalBerriesHarvested: saveData.statistics.berriesHarvested.reduce((sum, b) => sum + b, 0) || 0, totalShardsGained: saveData.statistics.totalShards.reduce((sum, b) => sum + b, 0) || 0, shardsGained: saveData.statistics.totalShards || 0, pokemonHatched });
                // Update save data
                this.setSaveData(saveData);
            }
            catch (ಠ_ಠ) {
                console.error('[update] v0.5.2 - Couldn\'t update player statistics..', ಠ_ಠ);
            }
            try {
                // If the player has the Soul Badge already
                // Not using game constants incase the badge value isn't 5 in the future
                if (saveData.badgeCase[5]) {
                    saveData.quests.questLines.push({ state: 1, name: 'Mining Expedition', quest: 0 });
                }
                // Update save data
                this.setSaveData(saveData);
            }
            catch (ಠ_ಠ) {
                console.error('[update] v0.5.2 - Couldn\'t start Aerodactyl Quest line..', ಠ_ಠ);
            }
        }
        if (this.isOlderVersion(this.saveVersion, '0.5.5')) {
            try {
                //Correct statistics
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 22, 34); // Petalburg Woods
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 30, 35); // New Mauville
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 56, 50); // Hall of Origin
                saveData.statistics.dungeonsCleared = Update.moveIndex(saveData.statistics.dungeonsCleared, 33); // Sealed Chamber
                // Update save data
                this.setSaveData(saveData);
            }
            catch (ಠ_ಠ) {
                console.error('[update] v0.5.5 - Couldn\'t update player statistics..', ಠ_ಠ);
            }
        }
        if (this.isOlderVersion(this.saveVersion, '0.5.7')) {
            try {
                //Update shinies
                saveData.party.shinyPokemon.forEach(name => {
                    const id = pokemonMap[name].id;
                    if (id) {
                        const pokemon = saveData.party.caughtPokemon.find(p => p.id == id);
                        if (pokemon) {
                            pokemon.shiny = true;
                        }
                    }
                });
                // Update save data
                this.setSaveData(saveData);
            }
            catch (ಠ_ಠ) {
                console.error('[update] v0.5.7 - Couldn\'t update player shinies..', ಠ_ಠ);
            }
        }
        // Notify the player that the game has updated!
        if (this.saveVersion != this.version && this.saveVersion != '0.0.0') {
            try {
                const button = document.createElement('a');
                button.className = 'btn btn-block btn-danger';
                button.innerText = 'Click to Backup Save!';
                button.href = `data:text/plain;charset=utf-8,${encodeURIComponent(btoa(JSON.stringify(backupSaveData)))}`;
                button.setAttribute('download', `[v${this.saveVersion}] Poke Clicker Backup Save.txt`);
                // Add to body and click, triggering auto download
                if (!settingsData.disableAutoDownloadBackupSaveOnUpdate) {
                    button.style.display = 'none';
                    document.body.appendChild(button);
                    button.click();
                    document.body.removeChild(button);
                }
                button.style.display = '';
                Notifier.notify({
                    title: `[v${this.version}] Game has been updated!`,
                    message: `Check the <a class="text-light" href="#changelogModal" data-toggle="modal"><u>changelog</u></a> for details!<br/><br/>${button.outerHTML}`,
                    type: NotificationConstants.NotificationOption.primary,
                    timeout: 6e4,
                });
            }
            catch (err) {
                console.error('Error trying to convert backup save', err);
                Notifier.notify({
                    title: `[v${this.version}] Game has been updated!`,
                    message: 'Check the <a class="text-light" href="#changelogModal" data-toggle="modal"><u>changelog</u></a> for details!<br/><br/><i>Failed to download old save, Please check the console for errors, and report them on our Discord.</i>',
                    type: NotificationConstants.NotificationOption.primary,
                    timeout: 6e4,
                });
                try {
                    localStorage.backupSave = JSON.stringify(backupSaveData);
                }
                catch (e) { }
            }
        }
    }
    getPlayerData() {
        let playerData;
        try {
            playerData = JSON.parse(localStorage.player);
        }
        catch (err) {
            console.warn('Error getting player data', err);
        }
        finally {
            return playerData;
        }
    }
    setPlayerData(playerData) {
        try {
            localStorage.player = JSON.stringify(playerData);
        }
        catch (err) {
            console.error('Error setting player data', err);
        }
    }
    getSaveData() {
        let saveData;
        try {
            saveData = JSON.parse(localStorage.save);
        }
        catch (err) {
            console.warn('Error getting save data', err);
        }
        finally {
            return saveData;
        }
    }
    setSaveData(saveData) {
        try {
            localStorage.save = JSON.stringify(saveData);
        }
        catch (err) {
            console.error('Error setting save data', err);
        }
    }
    getSettingsData() {
        let settingsData;
        try {
            settingsData = JSON.parse(localStorage.settings);
        }
        catch (err) {
            console.warn('Error getting settings data', err);
        }
        finally {
            return settingsData;
        }
    }
    setSettingsData(settingsData) {
        try {
            localStorage.settings = JSON.stringify(settingsData);
        }
        catch (err) {
            console.error('Error setting settings data', err);
        }
    }
    fromJSON(json, initial = false) {
        if (!initial) {
            return;
        }
        if (!json) {
            json = { version: '0.0.0' };
        }
        this.saveVersion = json.version || '0.0.0';
        this.check();
    }
    toJSON() {
        return {
            version: this.version,
        };
    }
}
Update.moveIndex = (arr, to, from = Infinity, defaultVal = 0) => {
    let temp = arr.splice(from, 1);
    if (!temp.length) {
        temp = [defaultVal];
    }
    const end = arr.splice(to);
    arr = [...arr, ...temp, ...end];
    return arr;
};
// Define interface placeholders so that code doesn't crash when calling the new
// module implementations
/**
  * Knockout.js extenders
  */
$.extend(ko.extenders, {
    // Only numeric values allowed - usage: ko.observable(0).extend({ numeric: 0 });
    numeric: function (target, precision) {
        //create a writable computed observable to intercept writes to our observable
        const result = ko.pureComputed({
            read: target,
            write: function (newValue) {
                if (!isNaN(+newValue)) {
                    const current = target(), roundingMultiplier = Math.pow(10, precision), newValueAsNum = +newValue, valueToWrite = Math.round(newValueAsNum * roundingMultiplier) / roundingMultiplier;
                    //only write if it changed
                    if (valueToWrite !== current) {
                        target(valueToWrite);
                    }
                    else {
                        //if the rounded value is the same, but a different value was written, force a notification for the current field
                        if (newValue !== current) {
                            target.notifySubscribers(valueToWrite);
                        }
                    }
                }
            },
        }).extend({ notify: 'always' });
        //initialize with current value to make sure it is rounded appropriately
        result(target());
        //return the new computed observable
        return result;
    },
});
/**
 * TODO(@Isha) refactor this to no longer be global but App properties.
 * Will be done after the major player refactor.
 */
let player;
/**
 * Start the application when all html elements are loaded.
 */
document.addEventListener('DOMContentLoaded', function () {
    App.start();
});
class Achievement {
    constructor(name, description, property, bonus, region, unlocked = false) {
        this.name = name;
        this.description = description;
        this.property = property;
        this.bonus = bonus;
        this.region = region;
        this.unlocked = unlocked;
        this.isCompleted = ko.pureComputed(() => {
            return this.unlocked || this.property.isCompleted();
        });
        this.getProgressText = ko.pureComputed(() => {
            return `${this.getProgress()}/${this.property.requiredValue}`;
        });
    }
    check() {
        if (this.isCompleted()) {
            Notifier.notify({
                title: `[Achievement] ${this.name}`,
                message: this.description,
                type: NotificationConstants.NotificationOption.warning,
                timeout: 1e4,
                sound: NotificationConstants.NotificationSound.achievement,
            });
            player.achievementsCompleted[this.name] = true;
            this.unlocked = true;
        }
    }
    getProgress() {
        return this.isCompleted() ? this.property.requiredValue : this.property.getProgress();
    }
    getProgressPercentage() {
        return this.isCompleted() ? '100.0' : this.property.getProgressPercentage();
    }
    getBonus() {
        const max = AchievementHandler.maxBonus()[this.region];
        return (this.bonus / max * 100).toFixed(2);
    }
}
class AchievementHandler {
    static navigateRight() {
        if (AchievementHandler.navigateIndex() < AchievementHandler.numberOfTabs()) {
            AchievementHandler.navigateIndex(AchievementHandler.navigateIndex() + 1);
        }
    }
    static navigateLeft() {
        if (AchievementHandler.navigateIndex() > 0) {
            AchievementHandler.navigateIndex(AchievementHandler.navigateIndex() - 1);
        }
    }
    static isNavigateDirectionDisabled(navigateBackward) {
        return navigateBackward
            ? this.navigateIndex() === 0
            : this.navigateIndex() + 1 === this.numberOfTabs();
    }
    static calculateNumberOfTabs() {
        this.numberOfTabs(Math.max(1, Math.ceil(this.achievementListFiltered().length / 10)));
    }
    static getAchievementListWithIndex() {
        return this.achievementListFiltered().slice(this.navigateIndex() * 10, (this.navigateIndex() * 10) + 10);
    }
    static filterAchievementList() {
        this.achievementListFiltered(this.achievementList.filter((a) => (a.region <= player.highestRegion() &&
            (this.filter.status() == 'all' || a.unlocked == JSON.parse(this.filter.status())) &&
            (this.filter.type() == 'all' || a.property.constructor.name == this.filter.type()) &&
            (this.filter.region() == 'all' || a.region == +this.filter.region()))));
        this.resetPages();
    }
    static resetPages() {
        this.calculateNumberOfTabs();
        this.navigateIndex(0);
    }
    static checkAchievements() {
        for (let i = 0; i < AchievementHandler.achievementList.length; i++) {
            if (!AchievementHandler.achievementList[i].unlocked) {
                AchievementHandler.achievementList[i].check();
            }
        }
    }
    static addAchievement(name, description, property, bonus, region = GameConstants.Region.none) {
        const unlocked = player.achievementsCompleted[name];
        AchievementHandler.achievementList.push(new Achievement(name, description, property, bonus, region, unlocked));
    }
    static calculateMaxBonus() {
        GameHelper.enumNumbers(GameConstants.Region).forEach(region => {
            AchievementHandler.maxBonus()[region] = AchievementHandler.achievementList.filter(a => a.region == region).reduce((sum, a) => sum + a.bonus, 0);
        });
    }
    static calculateAchievementTypes() {
        const types = [];
        AchievementHandler.achievementList.forEach(a => { var _a; return types.push((_a = a.property) === null || _a === void 0 ? void 0 : _a.constructor.name); });
        AchievementHandler.achievementTypes([...new Set(types)]);
    }
    static bonusUnlocked() {
        let sum = 0;
        GameHelper.enumNumbers(GameConstants.Region).forEach(region => {
            sum += AchievementHandler.achievementList.filter(a => a.region == region && a.isCompleted()).reduce((sum, a) => sum + a.bonus, 0);
        });
        return sum;
    }
    static achievementBonus() {
        let sum = 0;
        GameHelper.enumNumbers(GameConstants.Region).forEach(region => {
            const total = AchievementHandler.achievementList.filter(a => a.region == region && a.isCompleted()).reduce((sum, a) => sum + a.bonus, 0) / AchievementHandler.maxBonus()[region];
            if (!isNaN(total)) {
                sum += total;
            }
        });
        return sum;
    }
    static getMoneyMultiplier() {
        return 1 + this.achievementBonus();
    }
    static achievementBonusPercent() {
        return `${(100 * AchievementHandler.achievementBonus()).toFixed(2)}%`;
    }
    static findByName(name) {
        return AchievementHandler.achievementList.find((achievement) => achievement.name === name);
    }
    static initialize() {
        /*
         * GENERAL
         */
        AchievementHandler.addAchievement('My First Hundo', 'Obtain 100 Pokédollars', new MoneyRequirement(100), 0.05);
        AchievementHandler.addAchievement('I Should Buy a PokéMart', 'Obtain 1,000 Pokédollars', new MoneyRequirement(1000), 0.10);
        AchievementHandler.addAchievement('A Small Fortune', 'Obtain 10,000 Pokédollars', new MoneyRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Annual Wage', 'Obtain 100,000 Pokédollars', new MoneyRequirement(100000), 0.20);
        AchievementHandler.addAchievement("Pfft, I Don't Need a Bike Voucher", 'Obtain 1,000,000 Pokédollars', new MoneyRequirement(1000000), 0.25);
        AchievementHandler.addAchievement('A billion Poképennies', 'Obtain 10,000,000 Pokédollars', new MoneyRequirement(10000000), 0.5);
        AchievementHandler.addAchievement('Dungeon Time', 'Obtain 100 Dungeon Tokens', new TokenRequirement(100), 0.05);
        AchievementHandler.addAchievement('Token Collector', 'Obtain 1,000 Dungeon Tokens', new TokenRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Dungeon Grinder', 'Obtain 10,000 Dungeon Tokens', new TokenRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Dungeon Master', 'Obtain 100,000 Dungeon Tokens', new TokenRequirement(100000), 0.20);
        AchievementHandler.addAchievement('Dungeon Legend', 'Obtain 1,000,000 Dungeon Tokens', new TokenRequirement(1000000), 0.25);
        AchievementHandler.addAchievement('Basic Trainer', 'Have 100 Attack', new AttackRequirement(100), 0.05);
        AchievementHandler.addAchievement('Improving', 'Have 1,000 Attack', new AttackRequirement(1000), 0.10);
        AchievementHandler.addAchievement('An Unrelenting Force', 'Have 5,000 Attack', new AttackRequirement(5000), 0.15);
        AchievementHandler.addAchievement('FUS DOH RAH', 'Have 10,000 Attack', new AttackRequirement(10000), 0.20);
        AchievementHandler.addAchievement('Ok, I have enough attack already...', 'Have 25,000 Attack', new AttackRequirement(25000), 0.25);
        AchievementHandler.addAchievement('Silver attack button!', 'Have 100,000 Attack', new AttackRequirement(100000), 0.30);
        AchievementHandler.addAchievement('Pesky roamings, I need to oneshot routes for them...', 'Have 250,000 Attack', new AttackRequirement(250000), 0.35);
        AchievementHandler.addAchievement('You pressed F12 by any chance?', 'Have 500,000 Attack', new AttackRequirement(500000), 0.40);
        AchievementHandler.addAchievement('Left Left Right Right A B A B - Hey, 1 million!', 'Have 1,000,000 Attack', new AttackRequirement(1000000), 0.40);
        AchievementHandler.addAchievement('Bling', 'Obtain 100 Diamonds', new DiamondRequirement(100), 0.05);
        AchievementHandler.addAchievement('Bling x10!', 'Obtain 1000 Diamonds', new DiamondRequirement(1000), 0.15);
        AchievementHandler.addAchievement("If you like it, you should've put a ring on it.", 'Obtain 10,000 Diamonds', new DiamondRequirement(10000), 0.25);
        AchievementHandler.addAchievement('Is my thumb green yet?', 'Dig up 1 item', new UndergroundItemsFoundRequirement(1), 0.01);
        AchievementHandler.addAchievement('My shovel is starting to crack', 'Dig up 10 items', new UndergroundItemsFoundRequirement(10), 0.01);
        AchievementHandler.addAchievement("Why can't I make a diamond shovel?", 'Dig up 100 items', new UndergroundItemsFoundRequirement(100), 0.01);
        AchievementHandler.addAchievement('This is definitely not Minecraft', 'Dig up 1,000 items', new UndergroundItemsFoundRequirement(1000), 0.01);
        AchievementHandler.addAchievement('I wonder how much is down there...', 'Dig up 10,000 items', new UndergroundItemsFoundRequirement(10000), 0.01);
        AchievementHandler.addAchievement('The earth is like unions', 'Dig deeper 1 time', new UndergroundLayersMinedRequirement(1), 0.01);
        AchievementHandler.addAchievement('This takes foreverrrrrrr', 'Dig deeper 10 times', new UndergroundLayersMinedRequirement(10), 0.01);
        AchievementHandler.addAchievement("DigDug ain't got nothin on me", 'Dig deeper 100 times', new UndergroundLayersMinedRequirement(100), 0.01);
        AchievementHandler.addAchievement("Both my thumbs are green! This can't be healthy", 'Dig deeper 1000 times', new UndergroundLayersMinedRequirement(1000), 0.01);
        AchievementHandler.addAchievement('Is that how I use this?', 'Level 1 Oak Item to the maximum level', new MaxLevelOakItemRequirement(1), 0.05);
        AchievementHandler.addAchievement("I've got my hands full with all of these", 'Level 3 Oak Items to the maximum level', new MaxLevelOakItemRequirement(3), 0.1);
        AchievementHandler.addAchievement('Prepared for anything!', 'Level 8 Oak Items to the maximum level', new MaxLevelOakItemRequirement(8), 0.15);
        AchievementHandler.addAchievement('First Team', 'Capture 100 Pokémon', new CapturedRequirement(100), 0.05);
        AchievementHandler.addAchievement('Filling the PC', 'Capture 1,000 Pokémon', new CapturedRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Pokémon Army', 'Capture 10,000 Pokémon', new CapturedRequirement(10000), 0.15);
        AchievementHandler.addAchievement('Pokémon Collector', 'Capture 100,000 Pokémon', new CapturedRequirement(100000), 0.25);
        AchievementHandler.addAchievement('You get a Pokémon, you get a Pokémon, everyone gets a Pokémon!', 'Capture 1,000,000 Pokémon', new CapturedRequirement(1000000), 0.50);
        AchievementHandler.addAchievement('A Long Road Ahead', 'Defeat 100 Pokémon', new DefeatedRequirement(100), 0.05);
        AchievementHandler.addAchievement('Highway to Pallet Town', 'Defeat 1,000 Pokémon', new DefeatedRequirement(1000), 0.10);
        AchievementHandler.addAchievement('Overleveled', 'Defeat 10,000 Pokémon', new DefeatedRequirement(10000), 0.15);
        AchievementHandler.addAchievement('The Cake is a Lie, but the Grind is real', 'Defeat 100,000 Pokémon', new DefeatedRequirement(100000), 0.25);
        AchievementHandler.addAchievement('Are there any left?', 'Defeat 1,000,000 Pokémon', new DefeatedRequirement(1000000), 0.50);
        AchievementHandler.addAchievement("Startin' Out", 'Capture your first Pokémon', new CaughtPokemonRequirement(1), 0.01);
        AchievementHandler.addAchievement('Like Ants in a PC', 'Capture 10 unique Pokémons', new CaughtPokemonRequirement(10), 0.02);
        AchievementHandler.addAchievement('Better Than Season 1 Ash', 'Capture 20 unique Pokémons', new CaughtPokemonRequirement(20), 0.03);
        AchievementHandler.addAchievement('More Pokémon than Patrick', 'Capture 30 unique Pokémons', new CaughtPokemonRequirement(30), 0.04);
        AchievementHandler.addAchievement('Rick and Fourty', 'Capture 40 unique Pokémons', new CaughtPokemonRequirement(40), 0.05);
        AchievementHandler.addAchievement('50 Shades of Pikachu', 'Capture 50 unique Pokémons', new CaughtPokemonRequirement(50), 0.10);
        AchievementHandler.addAchievement('Keeping Oak Really Busy', 'Capture 75 unique Pokémons', new CaughtPokemonRequirement(75), 0.15);
        AchievementHandler.addAchievement('Surpassing Ash', 'Capture 88 unique Pokémons', new CaughtPokemonRequirement(88), 0.05);
        AchievementHandler.addAchievement('I Wanna be The Very Best', 'Capture 100 unique Pokémons', new CaughtPokemonRequirement(100), 0.20);
        AchievementHandler.addAchievement('I Should Probably Take a Break', 'Complete the Kanto Pokédex!', new CaughtUniquePokemonsByRegionRequirement(GameConstants.Region.kanto), 0.50);
        AchievementHandler.addAchievement("I'd rather be shiny", 'Capture your first Shiny', new ShinyPokemonRequirement(1), 0.03);
        AchievementHandler.addAchievement('These pokémon must be sick', 'Capture 10 unique Shinies', new ShinyPokemonRequirement(10), 0.06);
        AchievementHandler.addAchievement('Why Am I Doing This?', 'Capture 20 unique Shinies', new ShinyPokemonRequirement(20), 0.09);
        AchievementHandler.addAchievement('Why Am I Still Doing This?!', 'Capture 30 unique Shinies', new ShinyPokemonRequirement(30), 0.12);
        AchievementHandler.addAchievement('Okay fine, I can do a few more', 'Capture 40 unique Shinies', new ShinyPokemonRequirement(40), 0.15);
        AchievementHandler.addAchievement('Where Did All The Shiny Pokémon Go?', 'Capture 50 unique Shinies', new ShinyPokemonRequirement(50), 0.30);
        AchievementHandler.addAchievement('Nvm, found some more', 'Capture 75 unique Shinies', new ShinyPokemonRequirement(75), 0.45);
        AchievementHandler.addAchievement('Just keep swimming just keep swimming -- oooo shiny!', 'Capture 100 unique Shinies', new ShinyPokemonRequirement(100), 0.60);
        AchievementHandler.addAchievement("I don't know if I can handle the next batch of shinies.", 'Capture 151 unique Shinies!', new ShinyPokemonRequirement(151), 1.50);
        AchievementHandler.addAchievement('Pokémon Nursery', 'Hatch 1 egg', new HatchRequirement(1), 0.01);
        AchievementHandler.addAchievement('A Lot of Running', 'Hatch 10 eggs', new HatchRequirement(10), 0.01);
        AchievementHandler.addAchievement('Marathon Runner', 'Hatch 100 eggs', new HatchRequirement(100), 0.01);
        AchievementHandler.addAchievement('Egg Factory', 'Hatch 1,000 eggs', new HatchRequirement(1000), 0.01);
        AchievementHandler.addAchievement('Offical Easter Bunny', 'Hatch 10,000 eggs', new HatchRequirement(10000), 0.01);
        AchievementHandler.addAchievement('Why is my Voltorb Upside Down?', 'Obtain your first Pokéball', new PokeballRequirement(1, GameConstants.Pokeball.Pokeball), 0.01);
        AchievementHandler.addAchievement('Starting a Collection', 'Obtain 10 Pokéballs', new PokeballRequirement(10, GameConstants.Pokeball.Pokeball), 0.03);
        AchievementHandler.addAchievement('Stocking Up', 'Obtain 100 Pokéballs', new PokeballRequirement(100, GameConstants.Pokeball.Pokeball), 0.05);
        AchievementHandler.addAchievement('Fully Stocked', 'Obtain 1,000 Pokéballs', new PokeballRequirement(1000, GameConstants.Pokeball.Pokeball), 0.10);
        AchievementHandler.addAchievement('Maybe just a few more for the bunker', 'Obtain 10,000 Pokéballs', new PokeballRequirement(10000, GameConstants.Pokeball.Pokeball), 0.15);
        AchievementHandler.addAchievement('Doomsday Bunker stocked with Pokeballs!', 'Obtain 100,000 Pokéballs', new PokeballRequirement(100000, GameConstants.Pokeball.Pokeball), 0.20);
        AchievementHandler.addAchievement('ooooo A blue one!', 'Obtain your first Greatball', new PokeballRequirement(1, GameConstants.Pokeball.Greatball), 0.03);
        AchievementHandler.addAchievement('Greatball 2', 'Obtain 10 Greatballs', new PokeballRequirement(10, GameConstants.Pokeball.Greatball), 0.05);
        AchievementHandler.addAchievement('Greatball 3', 'Obtain 100 Greatballs', new PokeballRequirement(100, GameConstants.Pokeball.Greatball), 0.10);
        AchievementHandler.addAchievement('Greatball 4', 'Obtain 1,000 Greatballs', new PokeballRequirement(1000, GameConstants.Pokeball.Greatball), 0.15);
        AchievementHandler.addAchievement('Greatball 5', 'Obtain 10,000 Greatballs', new PokeballRequirement(10000, GameConstants.Pokeball.Greatball), 0.20);
        AchievementHandler.addAchievement('Greatball 6', 'Obtain 100,000 Greatballs', new PokeballRequirement(100000, GameConstants.Pokeball.Greatball), 0.30);
        AchievementHandler.addAchievement('Ultraball 1', 'Obtain your first Ultraball', new PokeballRequirement(1, GameConstants.Pokeball.Ultraball), 0.05);
        AchievementHandler.addAchievement('Ultraball 2', 'Obtain 10 Ultraballs', new PokeballRequirement(10, GameConstants.Pokeball.Ultraball), 0.10);
        AchievementHandler.addAchievement('Ultraball 3', 'Obtain 100 Ultraballs', new PokeballRequirement(100, GameConstants.Pokeball.Ultraball), 0.15);
        AchievementHandler.addAchievement('Ultraball 4', 'Obtain 1,000 Ultraballs', new PokeballRequirement(1000, GameConstants.Pokeball.Ultraball), 0.20);
        AchievementHandler.addAchievement('Ultraball 5', 'Obtain 10,000 Ultraballs', new PokeballRequirement(10000, GameConstants.Pokeball.Ultraball), 0.30);
        AchievementHandler.addAchievement('Ultraball 6', 'Obtain 100,000 Ultraballs', new PokeballRequirement(100000, GameConstants.Pokeball.Ultraball), 0.40);
        AchievementHandler.addAchievement('Masterball 1', 'Obtain your first Masterball', new PokeballRequirement(1, GameConstants.Pokeball.Masterball), 0.20);
        AchievementHandler.addAchievement('Masterball 2', 'Obtain 10 Masterballs', new PokeballRequirement(10, GameConstants.Pokeball.Masterball), 0.30);
        AchievementHandler.addAchievement('Masterball 3', 'Obtain 100 Masterballs', new PokeballRequirement(100, GameConstants.Pokeball.Masterball), 0.40);
        AchievementHandler.addAchievement('A Few Clicks In', 'Click 10 Times', new ClickRequirement(10, 1), 0.02);
        AchievementHandler.addAchievement('Clicking Pro', 'Click 100 Times', new ClickRequirement(100, 1), 0.05);
        AchievementHandler.addAchievement('Ultra Clicker', 'Click 1,000 Times', new ClickRequirement(1000, 1), 0.10);
        AchievementHandler.addAchievement('Need a new mouse yet?', 'Click 10,000 Times', new ClickRequirement(10000, 1), 0.25);
        /*
         * REGIONAL
         */
        GameHelper.enumNumbers(GameConstants.Region).filter(r => r != GameConstants.Region.none).forEach(region => {
            var _a, _b;
            // Routes
            if (GameConstants.RegionRoute[region]) {
                for (let i = GameConstants.RegionRoute[region][0]; i <= GameConstants.RegionRoute[region][1]; i++) {
                    AchievementHandler.addAchievement(`Route ${i} traveler`, `Defeat 100 Pokémon on route ${i}`, new RouteKillRequirement(100, i), 1, region);
                    AchievementHandler.addAchievement(`Route ${i} explorer`, `Defeat 1,000 Pokémon on route ${i}`, new RouteKillRequirement(1000, i), 2, region);
                    AchievementHandler.addAchievement(`Route ${i} conqueror`, `Defeat 10,000 Pokémon on route ${i}`, new RouteKillRequirement(10000, i), 3, region);
                }
            }
            // Gyms
            (_a = GameConstants.RegionGyms[region]) === null || _a === void 0 ? void 0 : _a.forEach(gym => {
                const gymTitle = gym.includes('Elite') || gym.includes('Champion') ? gym : `${gym} Gym`;
                AchievementHandler.addAchievement(`${gym} Gym regular`, `Clear ${gymTitle} 10 times`, new ClearGymRequirement(10, GameConstants.getGymIndex(gym)), 1, region);
                AchievementHandler.addAchievement(`${gym} Gym ruler`, `Clear ${gymTitle} 100 times`, new ClearGymRequirement(100, GameConstants.getGymIndex(gym)), 2, region);
                AchievementHandler.addAchievement(`${gym} Gym owner`, `Clear ${gymTitle} 1,000 times`, new ClearGymRequirement(1000, GameConstants.getGymIndex(gym)), 3, region);
            });
            // Dungeons
            (_b = GameConstants.RegionDungeons[region]) === null || _b === void 0 ? void 0 : _b.forEach(dungeon => {
                AchievementHandler.addAchievement(`${dungeon} explorer`, `Clear ${dungeon} 10 times`, new ClearDungeonRequirement(10, GameConstants.getDungeonIndex(dungeon)), 1, region);
                AchievementHandler.addAchievement(`${dungeon} expert`, `Clear ${dungeon} 100 times`, new ClearDungeonRequirement(100, GameConstants.getDungeonIndex(dungeon)), 2, region);
                AchievementHandler.addAchievement(`${dungeon} hermit`, `Clear ${dungeon} 1,000 times`, new ClearDungeonRequirement(1000, GameConstants.getDungeonIndex(dungeon)), 3, region);
            });
        });
        AchievementHandler.calculateMaxBonus();
        AchievementHandler.calculateAchievementTypes();
        this.achievementListFiltered(this.achievementList.filter(a => a.region <= player.highestRegion()));
        this.resetPages();
        Object.keys(this.filter).forEach(e => this.filter[e].subscribe(() => this.filterAchievementList()));
    }
}
AchievementHandler.achievementList = [];
AchievementHandler.achievementTypes = ko.observableArray([]);
AchievementHandler.navigateIndex = ko.observable(0);
AchievementHandler.maxBonus = ko.observableArray([]);
AchievementHandler.achievementListFiltered = ko.observableArray([]);
AchievementHandler.numberOfTabs = ko.observable(0);
AchievementHandler.filter = {
    status: ko.observable('all'),
    type: ko.observable('all'),
    region: ko.observable('all'),
};
class AchievementTracker {
    constructor() {
        this.name = 'AchievementTracker';
        this.saveKey = 'achievementTracker';
        this.defaults = {
            'trackedAchievement': null,
        };
        this.trackedAchievement = ko.observable(this.defaults.trackedAchievement);
    }
    initialize() {
    }
    canAccess() {
        return App.game.party.caughtPokemon.length >= 110;
    }
    update(delta) {
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        if (!!json.trackedAchievementName) {
            const achievement = AchievementHandler.findByName(json.trackedAchievementName);
            if (!!achievement) {
                this.trackedAchievement(achievement);
            }
        }
    }
    toJSON() {
        return {
            trackedAchievementName: this.hasTrackedAchievement() ? this.trackedAchievement().name : null,
        };
    }
    trackAchievement(achievement) {
        this.trackedAchievement(achievement);
    }
    hasTrackedAchievement() {
        return this.trackedAchievement() !== null;
    }
}
class Requirement {
    constructor(requiredValue, type) {
        this.requiredValue = requiredValue;
        this.type = type;
    }
    getProgressPercentage() {
        return (this.getProgress() / this.requiredValue * 100).toFixed(1);
    }
    isCompleted() {
        switch (this.type) {
            case GameConstants.AchievementOption.less:
                return this.getProgress() < this.requiredValue;
            case GameConstants.AchievementOption.equal:
                return this.getProgress() == this.requiredValue;
            case GameConstants.AchievementOption.more:
                return this.getProgress() >= this.requiredValue;
        }
    }
}
///<reference path="Requirement.ts"/>
class AttackRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        // Calculate real total attack regardless of current region
        const currentAttack = App.game.party.calculatePokemonAttack(PokemonType.None, PokemonType.None, true);
        return Math.min(currentAttack, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Attack needed.`;
    }
}
///<reference path="Requirement.ts"/>
class CapturedRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(App.game.statistics.totalPokemonCaptured(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Pokémon need to be captured.`;
    }
}
///<reference path="Requirement.ts"/>
class CaughtUniquePokemonsByRegionRequirement extends Requirement {
    constructor(region, type = GameConstants.AchievementOption.more) {
        super(PokemonHelper.calcUniquePokemonsByRegion(region), type);
        this.region = region;
    }
    getProgress() {
        return Math.min(new Set(App.game.party.caughtPokemon.filter(p => p.id > 0 && PokemonHelper.calcNativeRegion(p.name) === this.region).map(p => Math.floor(p.id))).size, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} unique Pokémon need to be caught.`;
    }
}
///<reference path="Requirement.ts"/>
class CaughtPokemonRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(App.game.party.caughtPokemon.filter(p => p.id > 0).length, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} unique Pokémon need to be caught.`;
    }
}
///<reference path="Requirement.ts"/>
class ClearDungeonRequirement extends Requirement {
    constructor(value, dungeonIndex, type = GameConstants.AchievementOption.more) {
        super(value, type);
        this.dungeonIndex = dungeonIndex;
    }
    getProgress() {
        return Math.min(App.game.statistics.dungeonsCleared[this.dungeonIndex](), this.requiredValue);
    }
    hint() {
        if (this.requiredValue != 1) {
            return `${GameConstants.RegionDungeons.flat()[this.dungeonIndex]} needs to be completed ${this.requiredValue} times.`;
        }
        else {
            return `${GameConstants.RegionDungeons.flat()[this.dungeonIndex]} needs to be completed.`;
        }
    }
}
///<reference path="Requirement.ts"/>
class ClearGymRequirement extends Requirement {
    constructor(value, gymIndex, type = GameConstants.AchievementOption.more) {
        super(value, type);
        this.gymIndex = gymIndex;
    }
    getProgress() {
        return Math.min(App.game.statistics.gymsDefeated[this.gymIndex](), this.requiredValue);
    }
    hint() {
        if (this.requiredValue != 1) {
            return `Requires the ${GameConstants.RegionDungeons.flat()[this.gymIndex]} Gym to be defeated ${this.requiredValue} times.`;
        }
        else {
            return `Requires the ${GameConstants.RegionDungeons.flat()[this.gymIndex]} Gym to be completed.`;
        }
    }
}
///<reference path="Requirement.ts"/>
class ClickRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(App.game.statistics.clickAttacks(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} click attacks need to be completed.`;
    }
}
///<reference path="Requirement.ts"/>
class DefeatedRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(App.game.statistics.totalPokemonDefeated(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Pokémon need to be defeated.`;
    }
}
///<reference path="Requirement.ts"/>
class DiamondRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(App.game.statistics.totalDiamonds(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Diamonds need to be obtained.`;
    }
}
var BadgeTypes;
(function (BadgeTypes) {
    BadgeTypes[BadgeTypes["None"] = 0] = "None";
    // Kanto
    BadgeTypes[BadgeTypes["Boulder"] = 1] = "Boulder";
    BadgeTypes[BadgeTypes["Cascade"] = 2] = "Cascade";
    BadgeTypes[BadgeTypes["Thunder"] = 3] = "Thunder";
    BadgeTypes[BadgeTypes["Rainbow"] = 4] = "Rainbow";
    BadgeTypes[BadgeTypes["Soul"] = 5] = "Soul";
    BadgeTypes[BadgeTypes["Marsh"] = 6] = "Marsh";
    BadgeTypes[BadgeTypes["Volcano"] = 7] = "Volcano";
    BadgeTypes[BadgeTypes["Earth"] = 8] = "Earth";
    BadgeTypes[BadgeTypes["Elite_Lorelei"] = 9] = "Elite_Lorelei";
    BadgeTypes[BadgeTypes["Elite_Bruno"] = 10] = "Elite_Bruno";
    BadgeTypes[BadgeTypes["Elite_Agatha"] = 11] = "Elite_Agatha";
    BadgeTypes[BadgeTypes["Elite_Lance"] = 12] = "Elite_Lance";
    BadgeTypes[BadgeTypes["Elite_KantoChampion"] = 13] = "Elite_KantoChampion";
    // Johto
    BadgeTypes[BadgeTypes["Zephyr"] = 14] = "Zephyr";
    BadgeTypes[BadgeTypes["Hive"] = 15] = "Hive";
    BadgeTypes[BadgeTypes["Plain"] = 16] = "Plain";
    BadgeTypes[BadgeTypes["Fog"] = 17] = "Fog";
    BadgeTypes[BadgeTypes["Storm"] = 18] = "Storm";
    BadgeTypes[BadgeTypes["Mineral"] = 19] = "Mineral";
    BadgeTypes[BadgeTypes["Glacier"] = 20] = "Glacier";
    BadgeTypes[BadgeTypes["Rising"] = 21] = "Rising";
    BadgeTypes[BadgeTypes["Elite_Will"] = 22] = "Elite_Will";
    BadgeTypes[BadgeTypes["Elite_Koga"] = 23] = "Elite_Koga";
    BadgeTypes[BadgeTypes["Elite_Bruno2"] = 24] = "Elite_Bruno2";
    BadgeTypes[BadgeTypes["Elite_Karen"] = 25] = "Elite_Karen";
    BadgeTypes[BadgeTypes["Elite_JohtoChampion"] = 26] = "Elite_JohtoChampion";
    // Hoenn
    BadgeTypes[BadgeTypes["Stone"] = 27] = "Stone";
    BadgeTypes[BadgeTypes["Knuckle"] = 28] = "Knuckle";
    BadgeTypes[BadgeTypes["Dynamo"] = 29] = "Dynamo";
    BadgeTypes[BadgeTypes["Heat"] = 30] = "Heat";
    BadgeTypes[BadgeTypes["Balance"] = 31] = "Balance";
    BadgeTypes[BadgeTypes["Feather"] = 32] = "Feather";
    BadgeTypes[BadgeTypes["Mind"] = 33] = "Mind";
    BadgeTypes[BadgeTypes["Rain"] = 34] = "Rain";
    BadgeTypes[BadgeTypes["Elite_Sidney"] = 35] = "Elite_Sidney";
    BadgeTypes[BadgeTypes["Elite_Phoebe"] = 36] = "Elite_Phoebe";
    BadgeTypes[BadgeTypes["Elite_Glacia"] = 37] = "Elite_Glacia";
    BadgeTypes[BadgeTypes["Elite_Drake"] = 38] = "Elite_Drake";
    BadgeTypes[BadgeTypes["Elite_HoennChampion"] = 39] = "Elite_HoennChampion";
    //Sinnoh
    BadgeTypes[BadgeTypes["Coal"] = 40] = "Coal";
    BadgeTypes[BadgeTypes["Forest"] = 41] = "Forest";
    BadgeTypes[BadgeTypes["Relic"] = 42] = "Relic";
    BadgeTypes[BadgeTypes["Cobble"] = 43] = "Cobble";
    BadgeTypes[BadgeTypes["Fen"] = 44] = "Fen";
    BadgeTypes[BadgeTypes["Mine"] = 45] = "Mine";
    BadgeTypes[BadgeTypes["Icicle"] = 46] = "Icicle";
    BadgeTypes[BadgeTypes["Beacon"] = 47] = "Beacon";
    BadgeTypes[BadgeTypes["Elite_Aaron"] = 48] = "Elite_Aaron";
    BadgeTypes[BadgeTypes["Elite_Bertha"] = 49] = "Elite_Bertha";
    BadgeTypes[BadgeTypes["Elite_Flint"] = 50] = "Elite_Flint";
    BadgeTypes[BadgeTypes["Elite_Lucian"] = 51] = "Elite_Lucian";
    BadgeTypes[BadgeTypes["Elite_SinnohChampion"] = 52] = "Elite_SinnohChampion";
    //Unova
    BadgeTypes[BadgeTypes["Basic"] = 53] = "Basic";
    BadgeTypes[BadgeTypes["Toxic"] = 54] = "Toxic";
    BadgeTypes[BadgeTypes["Insect"] = 55] = "Insect";
    BadgeTypes[BadgeTypes["Bolt"] = 56] = "Bolt";
    BadgeTypes[BadgeTypes["Quake"] = 57] = "Quake";
    BadgeTypes[BadgeTypes["Jet"] = 58] = "Jet";
    BadgeTypes[BadgeTypes["Legend"] = 59] = "Legend";
    BadgeTypes[BadgeTypes["Wave"] = 60] = "Wave";
    BadgeTypes[BadgeTypes["Elite_Shauntal"] = 61] = "Elite_Shauntal";
    BadgeTypes[BadgeTypes["Elite_Marshal"] = 62] = "Elite_Marshal";
    BadgeTypes[BadgeTypes["Elite_Grimsley"] = 63] = "Elite_Grimsley";
    BadgeTypes[BadgeTypes["Elite_Caitlin"] = 64] = "Elite_Caitlin";
    BadgeTypes[BadgeTypes["Elite_UnovaChampion"] = 65] = "Elite_UnovaChampion";
    //Kalos
    BadgeTypes[BadgeTypes["Bug"] = 66] = "Bug";
    BadgeTypes[BadgeTypes["Cliff"] = 67] = "Cliff";
    BadgeTypes[BadgeTypes["Rumble"] = 68] = "Rumble";
    BadgeTypes[BadgeTypes["Plant"] = 69] = "Plant";
    BadgeTypes[BadgeTypes["Voltage"] = 70] = "Voltage";
    BadgeTypes[BadgeTypes["Fairy"] = 71] = "Fairy";
    BadgeTypes[BadgeTypes["Psychic"] = 72] = "Psychic";
    BadgeTypes[BadgeTypes["Iceberg"] = 73] = "Iceberg";
    BadgeTypes[BadgeTypes["Elite_Malva"] = 74] = "Elite_Malva";
    BadgeTypes[BadgeTypes["Elite_Siebold"] = 75] = "Elite_Siebold";
    BadgeTypes[BadgeTypes["Elite_Wikstrom"] = 76] = "Elite_Wikstrom";
    BadgeTypes[BadgeTypes["Elite_Drasna"] = 77] = "Elite_Drasna";
    BadgeTypes[BadgeTypes["Elite_KalosChampion"] = 78] = "Elite_KalosChampion";
})(BadgeTypes || (BadgeTypes = {}));
///<reference path="../badgeCase/BadgeTypes.ts"/>
///<reference path="ClearGymRequirement.ts"/>
class GymBadgeRequirement extends Requirement {
    constructor(badge, type = GameConstants.AchievementOption.more) {
        super(1, type);
        this.badge = badge;
    }
    getProgress() {
        return +App.game.badgeCase.hasBadge(this.badge);
    }
    hint() {
        return `Requires the ${GameConstants.camelCaseToString(BadgeTypes[this.badge])} badge.`;
    }
}
///<reference path="Requirement.ts"/>
class HatchRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(App.game.statistics.totalPokemonHatched(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} eggs need to be hatched.`;
    }
}
///<reference path="Requirement.ts"/>
class MoneyRequirement extends Requirement {
    constructor(requiredValue, type = GameConstants.AchievementOption.more) {
        super(requiredValue, type);
    }
    getProgress() {
        return Math.min(App.game.statistics.totalMoney(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Pokédollars need to be obtained.`;
    }
}
///<reference path="Requirement.ts"/>
class MultiRequirement {
    constructor(requirements) {
        this.requirements = requirements;
    }
    isCompleted() {
        return this.requirements.every(requirement => {
            return requirement.isCompleted();
        });
    }
    hint() {
        const output = [];
        this.requirements.forEach(requirement => {
            if (!requirement.isCompleted()) {
                output.push(requirement.hint().replace(/\./g, ''));
            }
        });
        return `${output.join(' and ')}.`;
    }
}
///<reference path="Requirement.ts"/>
class MaxLevelOakItemRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(App.game.oakItems.itemList.filter((item) => item.isMaxLevel()).length, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Oak Items leveled to the maximum level.`;
    }
}
///<reference path="Requirement.ts"/>
class ObtainedPokemonRequirement extends Requirement {
    constructor(pokemon, value = 1, type = GameConstants.AchievementOption.more) {
        super(value, type);
        this.pokemonID = pokemon.id;
    }
    getProgress() {
        var _a, _b;
        return Math.min((_b = (_a = App.game) === null || _a === void 0 ? void 0 : _a.statistics) === null || _b === void 0 ? void 0 : _b.pokemonCaptured[this.pokemonID](), this.requiredValue);
    }
    hint() {
        return `${pokemonMap[this.pokemonID].name} needs to be caught.`;
    }
}
///<reference path="Requirement.ts"/>
class OneFromManyRequirement {
    constructor(requirements) {
        this.requirements = requirements;
    }
    isCompleted() {
        return this.requirements.some(requirement => {
            return requirement.isCompleted();
        });
    }
    hint() {
        const output = [];
        this.requirements.forEach(requirement => {
            if (!requirement.isCompleted()) {
                output.push(requirement.hint().replace(/\./g, ''));
            }
        });
        return `${output.join(' or ')}.`;
    }
}
///<reference path="Requirement.ts"/>
class PokeballRequirement extends Requirement {
    constructor(value, pokeball, type = GameConstants.AchievementOption.more) {
        super(value, type);
        this.pokeball = pokeball;
    }
    getProgress() {
        return Math.min(App.game.statistics.pokeballsBought[this.pokeball](), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} ${GameConstants.Pokeball[this.pokeball]} need to be obtained.`;
    }
}
///<reference path="Requirement.ts"/>
class RouteKillRequirement extends Requirement {
    constructor(value, route, type = GameConstants.AchievementOption.more) {
        super(value, type);
        this.route = route;
    }
    getProgress() {
        return Math.min(App.game.statistics.routeKills[this.route](), this.requiredValue);
    }
    hint() {
        if (this.requiredValue != GameConstants.ROUTE_KILLS_NEEDED) {
            return `${this.requiredValue} Pokémon need to be defeated on Route ${this.route}.`;
        }
        else {
            return `Route ${this.route} still needs to be completed.`;
        }
    }
}
///<reference path="Requirement.ts"/>
class ShinyPokemonRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(App.game.party.caughtPokemon.filter(p => p.shiny).length, this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Shiny Pokémon need to be obtained .`;
    }
}
///<reference path="Requirement.ts"/>
class TokenRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(App.game.statistics.totalDungeonTokens(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} Dungeon Tokens need to be obtained.`;
    }
}
///<reference path="Requirement.ts"/>
class UndergroundItemsFoundRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(App.game.statistics.undergroundItemsFound(), this.requiredValue);
    }
    hint() {
        return `${this.requiredValue} items need to be found in the Underground.`;
    }
}
///<reference path="Requirement.ts"/>
class UndergroundLayersMinedRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(App.game.statistics.undergroundLayersMined(), this.requiredValue);
    }
    hint() {
        const suffix = (this.requiredValue > 1) ? 's' : '';
        return `${this.requiredValue} layer${suffix} need to be mined in the Underground.`;
    }
}
///<reference path="./BadgeTypes.ts"/>
class BadgeCaseController {
    static getDisplayableBadges() {
        const region = player.highestRegion();
        const highestAvailableBadge = gymList[GameConstants.RegionGyms[region][GameConstants.RegionGyms[region].length - 1]].badgeReward;
        return Object.keys(BadgeTypes).filter(b => !b.startsWith('Elite') && b != 'None' && BadgeTypes[b] <= highestAvailableBadge);
    }
}
class BattleFrontier {
    constructor() { }
    static canAccess() {
        const deoxysQuest = App.game.quests.getQuestLine('Mystery of Deoxys');
        return deoxysQuest.state() == QuestLineState.ended || deoxysQuest.curQuest() >= 3;
    }
    static enter() {
        if (!this.canAccess()) {
            return Notifier.notify({
                title: '[Battle Frontier]',
                message: 'You must progress further in the "Mystery of Deoxys" quest before you can participate',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
        App.game.gameState = GameConstants.GameState.battleFrontier;
    }
    static start() {
        BattleFrontierRunner.start();
    }
    static leave() {
        // Put the user back in the town
        App.game.gameState = GameConstants.GameState.town;
    }
}
///<reference path="../Battle.ts"/>
class BattleFrontierBattle extends Battle {
    // Override pokemon attack method so we can ignore the region multiplier
    static pokemonAttack() {
        var _a;
        // attack twice as fast if we have defeated this stage
        this.alternateAttack = !this.alternateAttack;
        if (this.alternateAttack && BattleFrontierRunner.stage() > App.game.statistics.battleFrontierHighestStageCompleted()) {
            return;
        }
        // Limit pokemon attack speed, Only allow 1 attack per 450ms
        const now = Date.now();
        if (this.lastPokemonAttack > now - 450) {
            return;
        }
        this.lastPokemonAttack = now;
        if (!((_a = this.enemyPokemon()) === null || _a === void 0 ? void 0 : _a.isAlive())) {
            return;
        }
        this.enemyPokemon().damage(App.game.party.calculatePokemonAttack(this.enemyPokemon().type1, this.enemyPokemon().type2, true));
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Award the player with exp, shards and go to the next pokemon
     */
    static defeatPokemon() {
        // This needs to stay as none so the stage number isn't adjusted
        App.game.breeding.progressEggsBattle(BattleFrontierRunner.stage(), GameConstants.Region.none);
        this.enemyPokemon().defeat(true);
        // Next pokemon
        GameHelper.incrementObservable(this.pokemonIndex);
        if (this.pokemonIndex() >= 3) {
            // Move on to next stage, reset timer
            BattleFrontierRunner.nextStage();
            this.pokemonIndex(0);
        }
        // If player still challenging Battle Frontier, keep generating Pokemon
        if (BattleFrontierRunner.started()) {
            // Create the next Pokemon to fight
            this.generateNewEnemy();
        }
        else {
            this.enemyPokemon(null);
        }
    }
    static generateNewEnemy() {
        const enemy = pokemonMap.random(GameConstants.TotalPokemonsPerRegion[player.highestRegion()]);
        // This needs to stay as none so the stage number isn't adjusted
        const health = PokemonFactory.routeHealth(BattleFrontierRunner.stage() + 10, GameConstants.Region.none);
        const level = Math.min(100, BattleFrontierRunner.stage());
        // Don't award money per pokemon defeated, award money at the end
        const money = 0;
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        // Give 1 extra shard per pokemon defeated after every 80 stages
        const shards = Math.ceil(BattleFrontierRunner.stage() / 80);
        const enemyPokemon = new BattlePokemon(enemy.name, enemy.id, enemy.type[0], enemy.type[1], health, level, 0, enemy.exp, money, shiny, shards);
        this.enemyPokemon(enemyPokemon);
    }
}
BattleFrontierBattle.alternateAttack = false;
BattleFrontierBattle.pokemonIndex = ko.observable(0);
BattleFrontierBattle.totalPokemons = ko.observable(3);
// Looks like we don't need this, unless we want to put a random trainer name or similar
BattleFrontierBattle.trainer = ko.observable(0);
BattleFrontierBattle.counter = 0;
class BattleFrontierMilestone {
    constructor(stage, description, rewardFunction, image = null) {
        this.stage = stage;
        this.description = description;
        this.rewardFunction = rewardFunction;
        this.image = image;
    }
    gain() {
        this.rewardFunction();
    }
}
class BattleFrontierMilestoneItem extends BattleFrontierMilestone {
    constructor(stage, itemName, amount) {
        const description = `${amount} × ${GameConstants.humanifyString(itemName)}`;
        const image = `assets/images/items/${itemName.replace(/[^\w.-\\(\\)]/g, '_')}.png`;
        super(stage, description, () => { }, image);
        this.itemName = itemName;
        this.amount = amount;
    }
    gain() {
        if (ItemList[this.itemName]) {
            ItemList[this.itemName].gain(this.amount);
        }
    }
}
///<reference path="BattleFrontierMilestone.ts"/>
///<reference path="BattleFrontierMilestoneItem.ts"/>
class BattleFrontierMilestones {
    static addMilestone(milestone) {
        this.milestoneRewards.push(milestone);
        // Sort the milestones by lowest to highest stage incase they are added out of order
        this.milestoneRewards.sort((a, b) => a.stage - b.stage);
    }
    static nextMileStone() {
        // Get the next possible reward
        return this.milestoneRewards.find(r => r.stage > App.game.statistics.battleFrontierHighestStageCompleted());
    }
    static availableMilestones() {
        return BattleFrontierMilestones.milestoneRewards.filter(r => r.stage > App.game.statistics.battleFrontierHighestStageCompleted());
    }
    static nextMileStoneStage() {
        // Return the stage number the next reward is unlocked at
        const reward = this.nextMileStone();
        if (reward) {
            return reward.stage;
        }
        else {
            return Infinity;
        }
    }
    static nextMileStoneRewardDescription() {
        // Return the description of the next reward
        const reward = this.nextMileStone();
        if (reward) {
            return reward.description;
        }
        else {
            return 'Nothing';
        }
    }
    static gainReward(defeatedStage) {
        const reward = this.nextMileStone();
        if (reward && reward.stage == defeatedStage) {
            Notifier.notify({
                title: '[Battle Frontier]',
                message: `You've successfully defeated stage ${defeatedStage} and earned:<br/><span>${reward.description}</span>!`,
                type: NotificationConstants.NotificationOption.warning,
                timeout: 1e4,
            });
            reward.gain();
        }
    }
}
BattleFrontierMilestones.milestoneRewards = [];
// TODO: update rewards
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(5, 'Pokeball', 25));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(10, 'Pokeball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(20, 'Greatball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(30, 'Ultraball', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(35, 'xClick', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(40, 'xAttack', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(50, 'SmallRestore', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestone(100, 'Deoxys', () => {
    App.game.party.gainPokemonById(pokemonMap.Deoxys.id);
}, 'assets/images/items/Premierball.png'));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(110, 'Water_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(120, 'Leaf_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(130, 'Thunder_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(140, 'Fire_stone', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(150, 'MediumRestore', 200));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(160, 'Lucky_egg', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(170, 'Lucky_incense', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(180, 'Item_magnet', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(190, 'Mystery_egg', 10));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(200, 'LargeRestore', 100));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(210, 'Water_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(220, 'Leaf_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(230, 'Thunder_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(240, 'Moon_stone', 40));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(250, 'Ultraball', 6400));
BattleFrontierMilestones.addMilestone(new BattleFrontierMilestoneItem(300, 'Trade_stone', 100));
class BattleFrontierRunner {
    constructor() { }
    static tick() {
        if (!this.started()) {
            return;
        }
        if (this.timeLeft() < 0) {
            this.battleLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.GYM_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / GameConstants.GYM_TIME * 100));
    }
    static start() {
        this.started(true);
        this.stage(1);
        BattleFrontierBattle.pokemonIndex(0);
        BattleFrontierBattle.generateNewEnemy();
        BattleFrontierRunner.timeLeft(GameConstants.GYM_TIME);
        BattleFrontierRunner.timeLeftPercentage(100);
        App.game.gameState = GameConstants.GameState.battleFrontier;
    }
    static nextStage() {
        if (App.game.statistics.battleFrontierHighestStageCompleted() < this.stage()) {
            // Gain any rewards we should have earned for defeating this stage
            BattleFrontierMilestones.gainReward(this.stage());
            // Update our highest stage
            App.game.statistics.battleFrontierHighestStageCompleted(this.stage());
        }
        // Move on to the next stage
        GameHelper.incrementObservable(this.stage);
        GameHelper.incrementObservable(App.game.statistics.battleFrontierTotalStagesCompleted);
        BattleFrontierRunner.timeLeft(GameConstants.GYM_TIME);
        BattleFrontierRunner.timeLeftPercentage(100);
    }
    static end() {
        BattleFrontierBattle.enemyPokemon(null);
        this.stage(1);
        this.started(false);
    }
    static battleLost() {
        // Current stage - 1 as the player didn't beat the current stage
        const stageBeaten = this.stage() - 1;
        // Give Battle Points and Money based on how far the user got
        const battleMultiplier = Math.max(stageBeaten / 100, 1);
        const battlePointsEarned = Math.round(stageBeaten * battleMultiplier);
        const moneyEarned = stageBeaten * 100 * battleMultiplier;
        Notifier.notify({
            title: 'Battle Frontier',
            message: `You managed to beat stage ${stageBeaten}.<br/>You received ${battlePointsEarned} BP`,
            type: NotificationConstants.NotificationOption.success,
            timeout: 5 * GameConstants.MINUTE,
        });
        // Award battle points
        App.game.wallet.gainBattlePoints(battlePointsEarned);
        App.game.wallet.gainMoney(moneyEarned);
        const reward = BattleFrontierMilestones.nextMileStone();
        this.end();
    }
    static battleQuit() {
        if (!confirm('Are you sure you want to leave?\n\nYou will not receive any Battle Points for the stages already completed.')) {
            return;
        }
        // Don't give any points, user quit the challenge
        Notifier.notify({
            title: 'Battle Frontier',
            message: `You made it to stage ${this.stage()}`,
            type: NotificationConstants.NotificationOption.info,
            timeout: 5 * GameConstants.MINUTE,
        });
        this.end();
    }
}
BattleFrontierRunner.timeLeft = ko.observable(GameConstants.GYM_TIME);
BattleFrontierRunner.timeLeftPercentage = ko.observable(100);
BattleFrontierRunner.stage = ko.observable(1); // Start at stage 1
BattleFrontierRunner.counter = 0;
BattleFrontierRunner.started = ko.observable(false);
BattleFrontierRunner.timeLeftSeconds = ko.pureComputed(function () {
    return (Math.ceil(BattleFrontierRunner.timeLeft() / 10) / 10).toFixed(1);
});
BattleFrontierRunner.pokemonLeftImages = ko.pureComputed(function () {
    let str = '';
    for (let i = 0; i < 3; i++) {
        str += `<img class="pokeball-smallest" src="assets/images/pokeball/Pokeball-small.png"${BattleFrontierBattle.pokemonIndex() > i ? ' style="filter: saturate(0);"' : ''}>`;
    }
    return str;
});
///<reference path="../../declarations/DataStore/common/Feature.d.ts"/>
var Currency = GameConstants.Currency;
class Breeding {
    constructor() {
        this.name = 'Breeding';
        this.saveKey = 'breeding';
        this.defaults = {
            'eggList': [ko.observable(new Egg()), ko.observable(new Egg()), ko.observable(new Egg()), ko.observable(new Egg())],
            'eggSlots': 1,
        };
        this.hatchList = {};
        this._eggList = this.defaults.eggList;
        this._eggSlots = ko.observable(this.defaults.eggSlots);
        this._eggList.forEach((egg) => {
            egg.extend({ deferred: true });
        });
    }
    initialize() {
        this.hatchList[EggType.Fire] = [
            ['Charmander', 'Vulpix', 'Growlithe', 'Ponyta'],
            ['Cyndaquil', 'Slugma', 'Houndour', 'Magby'],
            ['Torchic', 'Numel'],
            ['Chimchar'],
            ['Tepig', 'Pansear'],
            ['Fennekin'],
            ['Litten'],
            ['Scorbunny'],
        ];
        this.hatchList[EggType.Water] = [
            ['Squirtle', 'Lapras', 'Staryu', 'Psyduck'],
            ['Totodile', 'Wooper', 'Marill', 'Qwilfish'],
            ['Mudkip', 'Feebas', 'Clamperl'],
            ['Piplup', 'Finneon', 'Buizel'],
            ['Oshawott', 'Panpour'],
            ['Froakie'],
            ['Popplio'],
            ['Sobble'],
        ];
        this.hatchList[EggType.Grass] = [
            ['Bulbasaur', 'Oddish', 'Tangela', 'Bellsprout'],
            ['Chikorita', 'Hoppip', 'Sunkern'],
            ['Treecko', 'Tropius', 'Roselia'],
            ['Turtwig', 'Carnivine', 'Budew'],
            ['Snivy', 'Pansage'],
            ['Chespin'],
            ['Rowlet'],
            ['Grookey'],
        ];
        this.hatchList[EggType.Fighting] = [
            ['Hitmonlee', 'Hitmonchan', 'Machop', 'Mankey'],
            ['Tyrogue'],
            ['Makuhita', 'Meditite'],
            ['Riolu'],
            ['Throh', 'Sawk'],
            [],
            [],
            [],
        ];
        this.hatchList[EggType.Electric] = [
            ['Magnemite', 'Pikachu', 'Voltorb', 'Electabuzz'],
            ['Chinchou', 'Mareep', 'Elekid'],
            ['Plusle', 'Minun', 'Electrike'],
            ['Pachirisu', 'Shinx'],
            ['Blitzle'],
            [],
            [],
            [],
        ];
        this.hatchList[EggType.Dragon] = [
            ['Dratini', 'Dragonair', 'Dragonite'],
            [],
            ['Bagon', 'Shelgon', 'Salamence'],
            ['Gible', 'Gabite', 'Garchomp'],
            ['Deino', 'Zwellous', 'Hydreigon'],
            [],
            [],
            [],
        ];
        BreedingController.initialize();
    }
    update(delta) {
    }
    canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Mystery_egg);
    }
    fromJSON(json) {
        var _a;
        if (json == null) {
            return;
        }
        this.eggSlots = (_a = json['eggSlots']) !== null && _a !== void 0 ? _a : this.defaults.eggSlots;
        if (json['eggList'] == null) {
            this._eggList = this.defaults.eggList;
        }
        else {
            const saveEggList = json['eggList'];
            for (let i = 0; i < this._eggList.length; i++) {
                if (saveEggList[i] != null) {
                    const egg = new Egg(null, null, null);
                    egg.fromJSON(saveEggList[i]);
                    this._eggList[i](egg);
                }
            }
        }
    }
    toJSON() {
        const breedingSave = {};
        breedingSave['eggList'] = this.eggList.map(function (egg) {
            return egg() === null ? new Egg() : egg().toJSON();
        });
        breedingSave['eggSlots'] = this.eggSlots;
        return breedingSave;
    }
    canBreedPokemon() {
        return App.game.party.hasMaxLevelPokemon() && this.hasFreeEggSlot();
    }
    hasFreeEggSlot() {
        let counter = 0;
        for (const egg of this._eggList) {
            if (!egg().isNone()) {
                counter++;
            }
        }
        return counter < this._eggSlots();
    }
    gainEgg(e) {
        if (e.isNone()) {
            return false;
        }
        for (let i = 0; i < this._eggList.length; i++) {
            if (this._eggList[i]().isNone()) {
                this._eggList[i](e);
                return true;
            }
        }
        console.error(`Error: Could not place ${EggType[e.type]} Egg`);
        return false;
    }
    gainRandomEgg() {
        return this.gainEgg(this.createRandomEgg());
    }
    progressEggsBattle(route, region) {
        route = MapHelper.normalizeRoute(route, region);
        return this.progressEggs(+Math.sqrt(route).toFixed(2));
    }
    progressEggs(amount) {
        amount *= App.game.oakItems.calculateBonus(OakItems.OakItem.Blaze_Cassette);
        amount = Math.round(amount);
        for (const egg of this._eggList) {
            egg().addSteps(amount);
        }
    }
    gainPokemonEgg(pokemon) {
        if (!this.hasFreeEggSlot()) {
            Notifier.notify({
                message: "You don't have any free egg slots",
                type: NotificationConstants.NotificationOption.warning,
            });
            return false;
        }
        const egg = this.createEgg(pokemon.name);
        pokemon.breeding = true;
        return this.gainEgg(egg);
    }
    hatchPokemonEgg(index) {
        const egg = this._eggList[index]();
        const hatched = egg.hatch();
        if (hatched) {
            this._eggList[index](new Egg());
            this.moveEggs();
        }
    }
    moveEggs() {
        const tempEggList = App.game.breeding._eggList.filter(egg => egg().type != EggType.None);
        this._eggList.forEach((egg, index) => {
            egg(tempEggList[index] ? tempEggList[index]() : new Egg());
        });
    }
    createEgg(pokemonName, type = EggType.Pokemon) {
        const dataPokemon = PokemonHelper.getPokemonByName(pokemonName);
        return new Egg(type, this.getSteps(dataPokemon.eggCycles), pokemonName);
    }
    createTypedEgg(type) {
        const hatchList = this.hatchList[type];
        const hatchable = hatchList.slice(0, player.highestRegion() + 1).filter(list => list.length);
        // highest region has 1/ratio chance, next highest has 1/(ratio ^ 2), etc.
        // Leftover is given to Kanto, making Kanto and Johto equal chance
        const ratio = 2;
        const possibleHatches = GameConstants.expRandomElement(hatchable, ratio);
        const pokemon = GameConstants.randomElement(possibleHatches);
        return this.createEgg(pokemon, type);
    }
    createRandomEgg() {
        const type = Math.floor(Math.random() * Object.keys(this.hatchList).length);
        const egg = this.createTypedEgg(type);
        egg.type = EggType.Mystery;
        return egg;
    }
    createFossilEgg(fossil) {
        const pokemonName = GameConstants.FossilToPokemon[fossil];
        const pokemonNativeRegion = PokemonHelper.calcNativeRegion(pokemonName);
        if (pokemonNativeRegion > player.highestRegion()) {
            Notifier.notify({
                message: 'You must progress further before you can uncover this fossil Pokemon!',
                type: NotificationConstants.NotificationOption.warning,
                timeout: 5e3,
            });
            return new Egg();
        }
        return this.createEgg(pokemonName, EggType.Fossil);
    }
    getSteps(eggCycles) {
        if (eggCycles === undefined) {
            return 500;
        }
        else {
            return eggCycles * 40;
        }
    }
    getEggSlotCost(slot) {
        return 500 * slot;
    }
    calculateBaseForm(pokemonName) {
        const devolution = pokemonDevolutionMap[pokemonName];
        // Base form of Pokemon depends on which regions players unlocked
        if (!devolution || PokemonHelper.calcNativeRegion(devolution) > player.highestRegion()) {
            // No devolutions at all
            // No further devolutions in current unlocked regions
            return pokemonName;
        }
        else {
            // Recurse onto its devolution
            return this.calculateBaseForm(devolution);
        }
    }
    buyEggSlot() {
        const cost = this.nextEggSlotCost();
        if (App.game.wallet.hasAmount(cost)) {
            App.game.wallet.loseAmount(cost);
            this.gainEggSlot();
        }
    }
    nextEggSlotCost() {
        return new Amount(this.getEggSlotCost(this.eggSlots + 1), Currency.questPoint);
    }
    // Knockout getters/setters
    get eggSlots() {
        return this._eggSlots();
    }
    set eggSlots(value) {
        this._eggSlots(value);
    }
    gainEggSlot() {
        if (this.eggSlots === this.eggList.length) {
            console.error('Cannot gain another eggslot.');
            return;
        }
        this.eggSlots += 1;
    }
    get eggList() {
        return this._eggList;
    }
    set eggList(value) {
        this._eggList = value;
    }
    getAllCaughtStatus() {
        return GameHelper.enumNumbers(EggType).reduce((status, type) => {
            return this.hatchList[type]
                ? Math.min(status, this.getTypeCaughtStatus(type))
                : status;
        }, CaughtStatus.CaughtShiny);
    }
    getTypeCaughtStatus(type) {
        const hatchList = this.hatchList[type];
        if (!hatchList) {
            return CaughtStatus.NotCaught;
        }
        const hatchable = hatchList.slice(0, player.highestRegion() + 1).flat();
        return hatchable.reduce((status, pname) => {
            return Math.min(status, PartyController.getCaughtStatusByName(pname));
        }, CaughtStatus.CaughtShiny);
    }
}
var CaughtStatus;
(function (CaughtStatus) {
    CaughtStatus[CaughtStatus["NotCaught"] = 0] = "NotCaught";
    CaughtStatus[CaughtStatus["Caught"] = 1] = "Caught";
    CaughtStatus[CaughtStatus["CaughtShiny"] = 2] = "CaughtShiny";
})(CaughtStatus || (CaughtStatus = {}));
///<reference path="../party/CaughtStatus.ts"/>
class BreedingController {
    static initialize() {
        Object.keys(BreedingController.filter).forEach(e => BreedingController.filter[e].subscribe(() => BreedingController.filterBreedableList()));
        App.game.party._caughtPokemon.subscribe(() => BreedingController.filterBreedableList());
    }
    static openBreedingModal() {
        if (App.game.breeding.canAccess()) {
            $('#breedingModal').modal('show');
        }
        else {
            Notifier.notify({
                message: 'You do not have access to the Day Care yet.<br/><i>Clear route 5 first</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static getEggImage(egg) {
        let eggType = EggType[egg.type].toLowerCase();
        if (eggType == 'pokemon') {
            const dataPokemon = PokemonHelper.getPokemonByName(egg.pokemon);
            eggType = String(PokemonType[dataPokemon.type1]).toLowerCase();
        }
        else if (eggType == 'fossil') {
            eggType = GameConstants.PokemonToFossil[egg.pokemon];
        }
        return `assets/images/breeding/${eggType}.png`;
    }
    static getEggCssClass(egg) {
        const animationType = Settings.getSetting('eggAnimation').observableValue();
        if (animationType === 'none') {
            return '';
        }
        if (egg.progress() >= 100) {
            return 'hatching';
        }
        return (animationType === 'almost' && egg.stepsRemaining() <= 50) ? 'hatchingSoon' : '';
    }
    static getEggSpots(pokemonName) {
        const pokemon = pokemonMap[pokemonName];
        const seed = pokemon.id * pokemon.type.reduce((a, b) => a * (b + 1), 1);
        SeededRand.seed(seed);
        SeededRand.seed(SeededRand.intBetween(0, 1000));
        return SeededRand.fromArray(this.spotTypes);
    }
    static filterBreedableList() {
        this.breedableList(App.game.party.caughtPokemon.filter((partyPokemon) => {
            // Only breedable Pokemon
            if (partyPokemon.breeding || partyPokemon.level < 100) {
                return false;
            }
            if (!BreedingController.filter.search().test(partyPokemon.name)) {
                return false;
            }
            // Check based on shiny status
            if (BreedingController.filter.shinyStatus() >= 0) {
                if (+partyPokemon.shiny !== BreedingController.filter.shinyStatus()) {
                    return false;
                }
            }
            // Check based on native region
            if (BreedingController.filter.region() > -2) {
                if (PokemonHelper.calcNativeRegion(partyPokemon.name) !== BreedingController.filter.region()) {
                    return false;
                }
            }
            // Check if either of the types match
            const type1 = BreedingController.filter.type1() > -2 ? BreedingController.filter.type1() : null;
            const type2 = BreedingController.filter.type2() > -2 ? BreedingController.filter.type2() : null;
            if (type1 !== null || type2 !== null) {
                const { type: types } = pokemonMap[partyPokemon.name];
                if ([type1, type2].includes(PokemonType.None)) {
                    const type = (type1 == PokemonType.None) ? type2 : type1;
                    if (!BreedingController.isPureType(partyPokemon, type)) {
                        return false;
                    }
                }
                else if ((type1 !== null && !types.includes(type1)) || (type2 !== null && !types.includes(type2))) {
                    return false;
                }
            }
            return true;
        }));
    }
    static isPureType(pokemon, type) {
        const pokemonData = pokemonMap[pokemon.name];
        return ((type == null || pokemonData.type[0] === type) && (pokemonData.type[1] == undefined || pokemonData.type[1] == PokemonType.None));
    }
    static getDisplayValue(pokemon) {
        const pokemonData = pokemonMap[pokemon.name];
        switch (this.displayValue()) {
            case 'attack': return `Attack: ${pokemon.attack.toLocaleString('en-US')}`;
            case 'attackBonus': return `Attack Bonus: ${Math.floor(pokemon.baseAttack * (GameConstants.BREEDING_ATTACK_BONUS / 100)).toLocaleString('en-US')}`;
            case 'baseAttack': return `Base Attack: ${pokemon.baseAttack.toLocaleString('en-US')}`;
            case 'eggSteps': return `Egg Steps: ${App.game.breeding.getSteps(pokemonData.eggCycles).toLocaleString('en-US')}`;
        }
    }
}
BreedingController.spotTypes = [
    `<g class="egg-spot">
          <path d="M33.5 104.3c4.4 4.9 9.3 7.3 6.7 9.6-2.6 2.4-8.3.4-12.7-4.4-4.5-4.9-6-10.8-3.4-13.2 2.6-2.3 5 3.2 9.4 8zm59.7 0c-4.5 4.9-9.4 7.3-6.8 9.6 2.6 2.4 8.4.4 12.8-4.4 4.4-4.9 6-10.8 3.3-13.2-2.6-2.3-4.9 3.2-9.3 8zm-1.6-14.8c-6.2 13.5-19 21-28.6 16.6-9.5-4.4-5-12.4 1.2-26 6.3-13.5 12-27.6 21.5-23.2 9.5 4.4 12.2 19 6 32.6zM74.29 37.558C66.497 46.286 70.6 55.4 62.4 55.4c-8.2 0-14.6-6.6-14.6-14.7S54.3 26 62.4 26c5.593.02 15.797 6.422 11.89 11.558z"/>
          <circle cx="35" cy="38" r="3"/>
          <circle cx="46" cy="23" r="1"/>
          <circle cx="40" cy="56" r="2"/>
          <circle cx="67" cy="113" r="2"/>
          <circle cx="59" cy="111" r="2"/>
          <circle cx="83" cy="30" r="3"/>
          <circle cx="93" cy="45" r="3"/>
          <circle cx="44" cy="91" r="4"/>
        </g>`,
    '<path class="egg-spot" fill-rule="evenodd" d="M46.23 117.564l-11.834-9.568-6.735 1.996-2.792-3.385-1.678-3.128 2.058-5.37-8.622-12.541 15.198.785 9.263-12.074 3.95 14.696 14.345 5.078-12.757 8.298zM94.642 78.967L87.3 82.332l-1.462 8.113-5.387-6.125-7.972 1.081 4.012-7.15-3.465-7.445 7.867 1.706 5.83-5.682.85 8.204zM64.436 58.62l-1.438 3.7 2.234 3.282-3.963-.223-2.431 3.139-1.013-3.839-3.736-1.342 3.338-2.15.121-3.967 3.076 2.51zM72.93 124.108l-12.863-7.728 15.24-6.015L78.995 94.4l10.43 12.637 12.201-1.068c-1.781 5.64-18.87 17.67-28.696 18.14zM23.89 37.914l8.54 4.054 8.181-4.736-1.217 9.375 7.032 6.317-9.291 1.74-3.835 8.64-4.526-8.3-9.402-.978 6.495-6.868zM80.06 61.697L76.364 38.23l-21.428-10.26 21.178-10.767L77.63 6.191c14.44 11.002 20.165 23.604 27.66 39.708l-8.85-1.41z"/>',
    '<path class="egg-spot" d="M40.95 26.323l5.938 11.344 5.318-11.344 5.943 11.344 5.314-11.344 5.947 11.344 5.31-11.344 5.95 11.344 5.306-11.344 5.956 11.344 5.3-11.344C93.314 22.008 77.276 1.254 62.799 1.35c-14.462.096-28.375 19.679-33.106 24.972l5.934 11.344zM85.875 115.645L79.937 104.3l-5.318 11.344-5.943-11.344-5.313 11.344-5.948-11.344-5.309 11.344-5.952-11.344-5.304 11.344-5.957-11.344-3.883 8.31 22.214 12.35 19.498-.032 23.073-11.84-4.597-8.788zM14.966 70.986l15.998-12 15.998 12 15.998-12 15.998 12 15.998-12 15.998 12 .064 15.418-16-12-16 12-16-12-16 12-16-12-16 12z"/>',
    '<path class="egg-spot" fill-rule="evenodd" d="M25.319 37.719s23.67-2.3 36.36-2.304c12.688-.003 39.727 2.239 39.727 2.239l5.453 14.088s-30.455-1.188-45.019-1.177c-14.564.01-42.364 1.242-42.364 1.242zM16.49 65.635s29.952 1.066 45.587 1.08c15.635.012 47.726-1.08 47.726-1.08l1.666 14.412s-33.12 2.575-49.154 2.575c-16.036 0-47.059-2.575-47.059-2.575zM18.827 94.849s28.351 2.626 43.196 2.637c14.845.01 45.875-2.572 45.875-2.572l-9.141 14.4s-25.023 3.322-36.917 3.329c-11.895.007-34.261-3.394-34.261-3.394zM40.886 13.262s13.83-1.689 21.343-1.7c7.513-.01 23.734 1.635 23.734 1.635l9.106 12.087s-22-1.805-32.625-1.794c-10.625.01-31.125 1.86-31.125 1.86z"/>',
    `<g class="egg-spot" transform="matrix(.23639 0 0 .224 -1.683 1.746)">
          <ellipse cx="235.48" cy="166.231" rx="14.106" ry="11.187"/>
          <ellipse cx="259.807" cy="181.801" rx="6.322" ry="5.355"/>
          <ellipse cx="200.449" cy="66.977" rx="8.268" ry="7.295"/>
          <ellipse cx="221.857" cy="79.144" rx="5.355" ry="2.919"/>
          <ellipse cx="328.405" cy="81.573" rx="8.758" ry="10.22"/>
          <ellipse cx="399.925" cy="198.343" rx="8.273" ry="7.301"/>
          <path d="M215.529 262.077c8.599 0 15.569-5.881 15.569-13.134 0-4.235-2.412-7.956-6.096-10.361-2.631-1.714-5.887-2.779-9.474-2.779-2.307 0-4.48.447-6.444 1.212-5.374 2.068-9.119 6.616-9.119 11.928-.006 7.252 6.965 13.134 15.564 13.134z"/>
          <ellipse cx="234.507" cy="275.7" rx="7.295" ry="6.812"/>
          <ellipse cx="325.487" cy="272.291" rx="12.65" ry="13.133"/>
          <ellipse cx="356.136" cy="280.075" rx="5.355" ry="4.376"/>
          <ellipse cx="306.024" cy="354.519" rx="13.623" ry="11.677"/>
          <ellipse cx="336.19" cy="376.41" rx="4.865" ry="6.328"/>
          <ellipse cx="244.238" cy="370.088" rx="7.295" ry="4.865"/>
          <ellipse cx="229.635" cy="400.254" rx="14.106" ry="12.65"/>
          <ellipse cx="121.146" cy="333.595" rx="6.812" ry="8.274"/>
          <ellipse cx="93.41" cy="333.595" rx="10.214" ry="14.106"/>
          <ellipse cx="218.448" cy="493.663" rx="14.596" ry="11.677"/>
          <ellipse cx="247.157" cy="509.722" rx="6.328" ry="5.349"/>
          <ellipse cx="335.7" cy="478.095" rx="10.221" ry="10.704"/>
          <path d="M272.53 552.049c116.903-2.87 202.886-90.113 207.546-204.955 2.416-59.518-16.62-146.823-53.094-216.254C401.308 81.977 347.556 0 276.025 0c-71.531 0-125.283 81.977-150.956 130.839-36.475 69.425-60.944 155.615-57.69 215.094 6.214 113.614 86.339 209.032 205.15 206.116zm-50.15-4.936c-.852-.22-1.727-.379-2.57-.605 5.868.855 11.976 2.037 18.365 2.57-5.47-.459-10.704-1.219-15.796-1.965zm123.297-10.408c-21.721 5.258-45.635 14.338-72.85 14.338 27.252 0 51.192-9.092 72.936-14.367a.321.321 0 00-.086.029zm17.765-6.816c-26.225 8.391-56.087 18.797-90.634 18.797-11.065 0-22.577-.6-34.51-1.604 11.933 1.004 23.444 1.488 34.51 1.488 35.557 0 66.204-10.769 92.948-19.625-.753.342-1.554.606-2.314.944zm-87.029 15.658c-10.667 0-21.108-.783-31.279-2.27 69.291-1.897 126.082-26.944 169.27-56.278-35.643 32.853-83.755 58.548-137.99 58.548zm-76.2-508.09c21.586 15.972 49.489 25.922 68.7 25.922 28.218 0 51.095-11.604 60.466-18.299 6.07-4.333 9.384-15.542 7.677-19.122 13.213 9.284 28.287 24.993 43.146 43.69-1.033 13.395-13.456 30.249-32.341 35.757a197.78 197.78 0 01-27.932 6.138c-27.615-1.273-69.175-8.256-107.841-24.866-10.349-4.449-27.368-12.98-38.47-19.98 9.28-11.175 17.924-21.897 26.596-29.24zm-35.315 40.31c.594-.79 1.188-1.615 1.781-2.386.637-.826 1.267-1.61 1.897-2.417 1.01-1.291 2.02-2.588 3.023-3.825 40.38 25.47 94.927 40.054 130.411 44.032 6.426.722 12.418 1.193 17.846 1.438 3.225.147 6.303.233 9.1.233 2.791 0 5.332-.074 7.65-.208a82.138 82.138 0 005.422-.465c6.279-.783 11.316-1.114 15.252-1.114 20.434 0 10.984 8.898-9.412 8.898a277.836 277.836 0 01-37.314 2.54c-52.265 0-106.567-18.083-147.406-44.381.588-.796 1.17-1.567 1.75-2.344zm-37.095 60.851c.569.092 7.346 1.83 7.934 1.83 6.444 0 10.512-8.12 10.512-15.103 0-2.907-6.768-7.607-8.292-9.743 3.231-5.63 7.228-9.327 10.44-14.394 41.23 29.302 100.744 54.387 167.403 54.387 31.023 0 68.843-8.126 105.777-19.271 9.92 19.205 18.121 42.515 25.89 63.28-37.149 11.304-95.962 25.049-158.618 27.864-63.342-14.816-124.934-42.624-169.677-69.21 3.155-6.811 5.259-13.086 8.63-19.64zm-28.952 69.78c.679-1.927 1.334-3.85 2.038-5.77.71-1.94 1.457-3.874 2.185-5.808 4.553-12.081 9.48-24.064 14.792-35.747 42.896 25.435 100.992 51.713 159.866 66.774a526.97 526.97 0 0021.99 5.147 504.921 504.921 0 0022.938 4.266c24.002 3.893 48.709 6.108 73.898 6.108 20.043 0 40.369-1.389 60.863-4.394 5.803 19.572 10.387 38.862 13.508 57.099-31.494 10.992-92.578 29.059-164.824 33.826-36.897-5.275-71.108-15.6-102.442-30.912 37.546 12.73 80.044 19.994 129.45 22.59.936.049 1.818.072 2.625.072 3.012 0 5.416-.324 7.16-.961 3.562-1.303 3.947-3.77 3.947-4.768 0-5.984-11.504-9.217-22.332-9.217-1.621 0-137.785-3.39-226.127-96.994.153-.441.312-.875.465-1.31zm-4.174 12.229c.208-.631.404-1.261.618-1.897.177-.532.336-1.06.514-1.591a509.278 509.278 0 011.512-4.413c84.309 88.055 211.649 97.032 227.192 97.032 18.539 0 26.482 8.824 11.225 8.824-.764 0-1.584-.023-2.467-.066-60.924-3.207-109.773-13.691-150.533-30.748a294.285 294.285 0 01-8.366-3.635 312.484 312.484 0 01-12.748-6.162c-24.413-12.461-50.851-29.614-70.196-47.234 1.034-3.366 2.135-6.732 3.249-10.11zM76.323 346.514c0-16.535-6.44-35.287-2.806-55.172.098-.525.184-1.047.282-1.572-8.058-1.359.288-1.604.288-1.604 3.22-16.873 11.037-36.578 16.44-54.43 25.968 23.415 59.353 43.69 91.507 57.153 30.674 17.854 66.904 32.033 109.665 39.762 2.252.41 4.498.826 6.787 1.201 2.484.402 5.031.74 7.559 1.102 18.744 2.654 38.611 4.174 59.822 4.174 33.115 0 69.314-3.514 108.9-11.336.348 4.15.586 8.195.734 12.148-41.365 50.361-81.941 83.637-144.17 102.584-84.823-2.504-185.466-20.049-254.396-79.113-.361-4.921-.612-9.872-.612-14.897zm53.581 82.933s-5.539 32.393 74.542 32.393c8.789 0 18.611-.393 29.578-1.256 37.864-2.986 69.646-8.646 97.228-17.006 1.525-.459 3.055-.918 4.555-1.396 1.475-.471 2.912-.967 4.363-1.449 58.066-19.5 97.039-51.941 135.459-98.146.025 1.303.1 2.656.1 3.934 0 32.027-7.705 61.965-21.385 88.307-.281.539-.557 1.076-.844 1.615-.287.545-.562 1.102-.857 1.646-7 12.863-15.471 24.799-25.184 35.668-48.996 38.732-116.632 66.636-193.64 66.636-1.48 0-2.999-.072-4.492-.084-40.839-9.223-76.839-35.965-103.381-65.041-5.314-24.291 3.958-45.821 3.958-45.821z"/>
        </g>`,
    `<g class="egg-spot" transform="matrix(.23247 0 0 .22628 -1.175 1.165)">
          <ellipse cx="235.48" cy="166.231" rx="14.106" ry="11.187"/>
          <ellipse cx="259.807" cy="181.801" rx="6.322" ry="5.355"/>
          <ellipse cx="200.449" cy="66.977" rx="8.268" ry="7.295"/>
          <ellipse cx="221.857" cy="79.144" rx="5.355" ry="2.919"/>
          <ellipse cx="328.405" cy="81.573" rx="8.758" ry="10.22"/>
          <ellipse cx="399.925" cy="198.343" rx="8.273" ry="7.301"/>
          <path d="M215.529 262.077c8.599 0 15.569-5.881 15.569-13.134 0-4.235-2.412-7.956-6.096-10.361-2.631-1.714-5.887-2.779-9.474-2.779-2.307 0-4.48.447-6.444 1.212-5.374 2.068-9.119 6.616-9.119 11.928-.006 7.252 6.965 13.134 15.564 13.134z"/>
          <ellipse cx="234.507" cy="275.7" rx="7.295" ry="6.812"/>
          <ellipse cx="325.487" cy="272.291" rx="12.65" ry="13.133"/>
          <ellipse cx="356.136" cy="280.075" rx="5.355" ry="4.376"/>
          <ellipse cx="306.024" cy="354.519" rx="13.623" ry="11.677"/>
          <ellipse cx="336.19" cy="376.41" rx="4.865" ry="6.328"/>
          <ellipse cx="244.238" cy="370.088" rx="7.295" ry="4.865"/>
          <ellipse cx="229.635" cy="400.254" rx="14.106" ry="12.65"/>
          <ellipse cx="121.146" cy="333.595" rx="6.812" ry="8.274"/>
          <ellipse cx="93.41" cy="333.595" rx="10.214" ry="14.106"/>
          <ellipse cx="218.448" cy="493.663" rx="14.596" ry="11.677"/>
          <ellipse cx="247.157" cy="509.722" rx="6.328" ry="5.349"/>
          <ellipse cx="335.7" cy="478.095" rx="10.221" ry="10.704"/>
          <path d="M274.533 549.808c118.845 0 206.087-107.5 211.94-203.176 3.639-59.455-23.017-146.361-59.491-215.792C401.308 81.977 347.556 0 276.025 0c-71.531 0-125.283 81.977-150.956 130.839-36.475 69.425-60.982 155.532-57.577 215.007 5.032 87.901 88.197 203.962 207.04 203.962zm-52.542-8.433c-.851-.221-1.726-.379-2.57-.605 5.869.855 11.977 2.037 18.366 2.57-5.471-.459-10.704-1.219-15.796-1.965zm123.686-4.67c-21.721 5.258-46.023 8.6-73.238 8.6 27.252 0 51.58-3.354 73.324-8.629a.321.321 0 00-.086.029zm17.765-6.816c-26.225 8.391-56.475 13.059-91.022 13.059-11.065 0-22.577-.6-34.511-1.604 11.934 1.004 23.445 1.488 34.511 1.488 35.557 0 66.592-5.031 93.336-13.887-.753.342-1.554.606-2.314.944zm-87.417 17.344c-10.667 0-21.797-6.556-31.968-8.044 69.291-1.896 127.159-22.856 170.347-52.19-35.643 32.853-84.143 60.234-138.379 60.234zM202.857 38.629c21.585 15.973 46.845 24.75 66.056 24.75 28.218 0 51.095-11.604 60.466-18.299 6.07-4.333 11.471-14.077 9.764-17.657 13.213 9.284 27.51 22.534 42.37 41.23-1.034 13.396-14.767 31.244-33.652 36.752a197.78 197.78 0 01-27.932 6.138c-27.615-1.273-69.175-8.256-107.841-24.866-10.349-4.449-25.113-13.446-36.215-20.447 9.279-11.175 18.312-20.257 26.984-27.6zm-35.704 38.672c.594-.79 1.188-1.616 1.78-2.387.638-.826 1.268-1.609 1.898-2.417 1.01-1.29 2.02-2.588 3.023-3.825 40.379 25.471 92.672 40.521 128.156 44.499 6.426.722 12.418 1.193 17.846 1.438 3.225.147 6.303.233 9.1.233 2.791 0 5.332-.074 7.65-.208a82.138 82.138 0 005.422-.465c6.279-.783 11.316-1.114 15.252-1.114 20.434 0 10.984 8.898-9.412 8.898a277.836 277.836 0 01-37.314 2.54c-52.265 0-104.312-18.55-145.151-44.848.588-.796 1.169-1.567 1.75-2.344zM130.77 137.09c.57.092 1.132.19 1.72.19 6.444 0 11.677-5.66 11.677-12.644 0-2.907-.942-5.557-2.466-7.693 3.231-5.63 6.289-11.134 9.502-16.2 41.23 29.301 97.938 54.853 164.597 54.853 31.023 0 72.264-5.68 109.198-16.826 9.92 19.205 18.898 39.646 26.666 60.411-37.148 11.304-86.848 38.148-162.653 26.954-63.342-14.816-123.618-42.577-168.361-69.163 3.155-6.81 6.748-13.328 10.12-19.882zm-31.09 71.524c.678-1.928 1.333-3.85 2.037-5.77.71-1.94 1.457-3.875 2.185-5.809 4.553-12.08 10.13-25.565 15.442-37.248 42.896 25.435 99.514 53 158.388 68.061a526.97 526.97 0 0021.99 5.147 504.921 504.921 0 0022.938 4.266c24.002 3.893 48.709 6.108 73.898 6.108 20.043 0 47.024-2.556 67.518-5.561 5.803 19.572 10.387 38.862 13.508 57.099-31.494 10.992-99.233 30.226-171.479 34.993-36.897-5.275-71.108-15.6-102.442-30.912 37.546 12.73 80.044 19.994 129.45 22.59.936.049 1.818.072 2.625.072 3.012 0 5.416-.324 7.16-.961 3.562-1.303 3.947-3.77 3.947-4.768 0-5.984-11.504-9.217-22.332-9.217-1.621 0-136.957-3.175-225.299-96.78.153-.44.312-.875.465-1.31zm-4.175 12.228c.208-.63.404-1.26.618-1.897.177-.532.336-1.059.514-1.59a509.278 509.278 0 011.512-4.414c84.31 88.055 210.821 96.818 226.364 96.818 18.539 0 26.482 8.824 11.225 8.824-.764 0-1.584-.023-2.467-.066-60.924-3.207-109.773-13.691-150.533-30.748a294.285 294.285 0 01-8.366-3.635 312.484 312.484 0 01-12.748-6.162c-24.413-12.461-50.023-29.4-69.368-47.02 1.034-3.366 2.135-6.732 3.25-10.11zM76.323 346.514c-.26-38.552 4.085-75.637 15.033-112.564 25.967 23.415 58.524 43.476 90.678 56.939 30.674 17.854 66.904 32.033 109.665 39.762 2.252.41 4.498.826 6.787 1.201 2.484.402 5.031.74 7.559 1.102 18.744 2.654 38.611 4.174 59.822 4.174 33.115 0 73.79-3.514 113.377-11.336.348 4.15-.677 8.195-.529 12.148-41.365 50.361-85.155 83.637-147.384 102.584-84.823-2.504-185.466-20.049-254.396-79.113-.361-4.921-.612-9.872-.612-14.897zM204.446 461.84c8.789 0 18.611-.393 29.578-1.256 37.864-2.986 69.646-8.646 97.228-17.006 1.525-.459 3.055-.918 4.555-1.396 1.475-.471 2.912-.967 4.363-1.449 58.066-19.5 100.253-51.941 138.673-98.146.025 1.303.1 2.656.1 3.934 0 32.027-10.919 61.965-24.599 88.307-.281.539-.557 1.076-.844 1.615-.287.545-.562 1.102-.857 1.646-7 12.863-15.471 24.799-25.184 35.668-48.996 38.732-117.709 62.549-194.717 62.549-1.48 0-2.999-.072-4.492-.084-40.839-9.223-75.762-31.878-102.304-60.954-2.38-29.645 73.993-13.431 78.5-13.428z"/>
        </g>`,
    `<g class="egg-spot">
          <path d="M38.755 40.315s2.728 2.396.637 4.348c-2.093 1.952-4.273-1.065-3.455-3.993.818-2.927 1.455-4.435 1.455-4.435-6.002 1.952-2.092 14.639 2.546 9.228 4.639-5.414-1.183-5.148-1.183-5.148zM79.225 38.807c-2.183-1.331-5.73.266-6.91 3.815-1.183 3.55 1.545 7.72 5.365 5.945-4.548 0-3.911-7.452-.455-8.073 3.455-.621 1.546 1.774.455 3.195 3.819-.623 3.728-3.55 1.545-4.882zM52.852 57.794c-4.82 2.396-3.912 8.963 1.727 8.874.728.089 1.727 0-.091-.976-1.82-.977-5.456-4.172-.182-5.591 5.275-1.42 4.457.976 3.82 2.395-.636 1.421-.274 2.485-.274 2.485 4.094-3.636-.18-9.58-5-7.187zM35.21 105.708c2.91-2.04 4.637-.355 4.637-.355-1.364-4.527-6.639-3.463-7.184.887-.546 4.348 3.91 5.766 5.911 4.791 2.001-.976.728-.976-.636-.798-1.365.178-5.64-2.483-2.729-4.525zM84.83 100.197c-2.002.975-.729.975.636.798 1.363-.177 5.638 2.485 2.728 4.525-2.911 2.04-4.638.355-4.638.355 1.365 4.524 6.639 3.46 7.184-.888.545-4.346-3.91-5.767-5.91-4.79z"/>
          <path d="M63.245 2.434c-16.684 0-28.671 16.657-34.66 27.777-8.507 15.8-15.209 35.886-13.673 49.356 2.077 18.224 10.936 32.017 25.464 40.416.695.353 1.399.692 2.115 1.011.165.071.332.14.497.21.441.19.885.375 1.333.554 5.916 2.355 11.978 3.834 18.834 3.834s13.193-1.663 19.109-4.018c.448-.178.892-.364 1.333-.554.166-.07.333-.138.497-.21 16.87-7.367 27.395-23.951 27.67-41.612.212-13.555-4.799-33.189-13.307-48.988C92.467 19.09 79.93 2.434 63.245 2.434zm-1.571 4.787s-.364.088-1.456.088c-1.09 0-2.82 1.685-1.273 4.346 1.546 2.664 4.91.534 5.093-.798.18-1.331 1.182-.444 1.363 0 .183 2.928-5 5.59-7.639.975-2.636-4.613 2.366-7.718 3.912-4.611zm2.364 115.435c-4.365.443-4.274-4.436-.365-4.88 0 0-.636 1.953-.91 2.485-.273.532 1.273.978 1.273.978s4.367.973.002 1.417zm22.43-5.062c-9.392-.498-17.257-8.627-26.29-8.534-13.479.137-8.88 7.755-16.67 10.212-12.938-5.582-22.557-16.812-27.685-30.06.24.048.496.068.77.052C21.2 88.983 22.48 72.136 30.825 74.1c8.347 1.965.289 21.058 17.267 25.41 16.98 4.353 25.18-10.95 36.548-9.966 7.428.642 17.128 4.1 22.959 3.443-3.55 10.57-11.135 19.28-21.13 24.606zm-55.169-47.11c-2.91.709-5.274-.178-7.003-2.485-1.727-2.306 1.546-4.614 3.002-4.88 1.456-.266 1.09.621-.636 2.485-1.73 1.863-.185 4.88 4.637 4.88zm38.923 19.342c-.818.71-4.911 1.684-6.73-1.952-1.82-3.638 4.178-8.757 7.001-4.348.91 1.419 0 1.153-1.727 0s-3.82.976-3.82 3.283 3.002 3.815 5.276 3.017zm28.231-33.413c-7.914 3.65 11.08 18.812-1.583 22.323-12.663 3.51-8.2-13.337-16.98-15.162-8.777-1.824-15.828 17.27-27.915 14.32-12.088-2.948-3.022-17.689-9.497-22.463-6.475-4.773-6.475 2.667-13.094 2.106-3.236-.275-7.606-3.04-9.156-6.738 2.247-6.614 5.077-13.241 8.335-19.29.582-1.082 1.165-2.11 1.746-3.113.222-.062.438-.108.674-.2 6.475-2.528 9.914-15.163 18.98-12.496s-6.046 12.917-3.743 24.288c2.302 11.372 19.715 11.23 20.146-1.124.433-12.353-.72-23.444 6.187-23.866 6.906-.42 6.763 19.234 16.98 19.234 2.988 0 5.066-3.063 6.41-4.695 6.118 11.368 11.94 26.766 13.959 38.291-4.123-3.049-5.137-14.327-11.449-11.415z"/>
        </g>`,
    '<path class="egg-spot" d="M63.187.81c-16.35 0-28.638 17.91-34.506 29.08-8.338 15.87-15.439 35.786-14.545 49.374 1.585 24.082 21.885 46.908 49.051 46.908s48.447-20.638 48.447-46.984c0-13.617-5.603-33.43-13.94-49.299C91.825 18.72 79.538.81 63.187.81zM43.395 119.606c-8.1-6.974-22.392-21.252-27.463-42.637.15-3.515.64-7.385 1.43-11.456 5.82 35.759 43.511 53.595 45.002 58.597.012.038.03.166.037.202a2.366 2.366 0 00-.037-.158c-6.804-.112-13.203-1.912-18.916-4.503-.018-.017-.035-.03-.053-.045zm18.842 5.528h-.025c.014-.023.023-.05.034-.074l.039-.009c-.016.027-.031.056-.048.083zm15.6-3.056c-.027.022.165-.18.138-.157-3.628 1.153-7.616 1.95-11.614 2.205-.853.516-1.757.504-2.566.504-.55 0-1.054.256-1.466.367.012-.03.021-.062.031-.095.266-.07.577-.164.905-.27h.529c.808 0 1.712-.01 2.566-.527-1.05.067-2.104.025-3.175.025 1.07 0 2.126-.046 3.175-.113 3.35-2.024 5.867-6.731-1.72-13.988C53.75 99.61 25.183 86.386 19.335 57.154c1.945-7.1 5.007-15.489 8.222-22.33.474 13.783 6.85 30.937 20.844 43.844 23.427 21.603 38.053 36.2 29.437 43.41zm20.856-13.38c-2.655 3.047-6.636 6.11-10.063 8.35 4.215-4.44 6.055-12.33-3.546-22.698-14.001-15.122-44.24-35.282-48.722-58.802-.778-4.081-1.945-8.936-1.88-12.562C38.33 16.87 42.092 12.46 45.608 9.32c-2.034 6.805-.331 16.317 6.153 25.668 14.412 20.787 54.015 48.988 46.931 73.71zm12.181-28.905c0 5.667-2.418 10.897-4.343 15.835 1.655-13.69-8.246-27.115-28.73-50.28C61.483 26.892 53.8 13.244 55.201 4.086c2.129-.912 4.052-1.39 5.711-1.606 1.33 7.816 8.03 20.74 25.57 36.987 10.764 9.97 19.361 18.978 23.042 27.21.818 4.506 1.35 9.363 1.35 13.116zM84.522 23.227C75.65 13.732 70.421 7.511 67.518 2.86 77.088 5.35 86.306 10.386 96.8 30.36c1.493 2.841 3.572 7.47 4.868 10.505-4.263-5.295-11.59-11.692-17.147-17.639z"/>',
    '<path class="egg-spot" d="M63.3 1.17c-16.811 0-29.443 18.438-35.476 29.428-8.57 15.612-13.581 34.995-13.581 48.393 0 25.923 21.13 46.336 49.059 46.336 27.928 0 47.805-20.306 47.805-46.23 0-13.397-3.757-32.888-12.328-48.499C92.744 19.608 80.111 1.17 63.3 1.17zm0 1.395c6.121 0 13.698 4.2 18.553 8.237-14.646 5.785-30.725 5.456-39.9 2.528C47.42 7.986 55.968 2.565 63.3 2.565zm47.085 64.241c.663 3.545 1.089 6.91 1.231 9.97a44.156 44.156 0 010 4.575 43.287 43.287 0 01-1.029 7.455c-.57.238-1.135.464-1.7.691a41.637 41.637 0 01-8.002 15.886c-17.289 8.375-52.141 18.235-83.214-16.063a97.862 97.862 0 01-2.018-2.297 43.634 43.634 0 01-.728-7.917c0-.755.021-1.534.06-2.331.053-1.15.155-2.347.283-3.575l.165.13c-.114 1.18-.103 2.337-.103 3.446 0 .796-.06 1.576-.06 2.33 0 .755.06 1.502.06 2.245 0 1.934.156 3.825.496 5.674.67.786 1.257 1.552 1.93 2.297-.821-3.27-1.355-6.688-1.355-10.222 0-1.53-.45-3.042-.298-4.721 15.25 11.905 45.384 34.125 92.785 15.118.565-.227.956-.453 1.526-.691.548-2.409.856-4.897.856-7.455 0-.743.06-1.49.06-2.244 0-.754-.06-1.535-.06-2.33 0-3.042-.392-6.384-1.046-9.904.052-.023.11-.046.16-.067zm.606.532c-.03.01-.05.022-.08.033.001.011.003.02.006.032-11.602 4.596-53.088 16.484-95.096-1.188a102.18 102.18 0 011.3-5.71c27.63 7.305 55.476 9.174 89.87-8.396 1.748 5.208 3.109 10.377 4 15.229zM24.594 39.5a117.77 117.77 0 013.348-6.75c16.27 3.792 40.06 4.126 67.047-6.31a102.394 102.394 0 013.213 5.45c2.267 4.13 4.323 8.536 6.13 13.02-13.997 4.945-45.311 10.116-79.738-5.41z"/>',
    `<g class="egg-spot">
          <path d="M42.381 32.138c-1.862-.684-4.343 1.02-5.541 3.807-1.2 2.786-.661 5.6 1.2 6.284 1.86.684 4.343-1.02 5.542-3.807 1.198-2.786.661-5.6-1.2-6.284zM56.099 36.168c-2.133-.303-4.292 2.04-4.823 5.23-.53 3.19.767 6.023 2.899 6.326 2.132.303 4.291-2.039 4.822-5.229.531-3.19-.767-6.023-2.898-6.327zM86.034 32.138c-1.862.684-2.4 3.498-1.201 6.284 1.199 2.787 3.68 4.491 5.542 3.807 1.862-.684 2.4-3.498 1.201-6.284-1.199-2.787-3.68-4.491-5.542-3.807zM72.317 36.168c-2.131.304-3.43 3.135-2.898 6.327.531 3.19 2.69 5.532 4.822 5.229 2.133-.303 3.43-3.135 2.898-6.327-.53-3.191-2.69-5.532-4.822-5.229zM41.069 79.936c-1.976-.217-3.96 2.03-4.434 5.02-.473 2.991.744 5.59 2.719 5.807 1.974.217 3.96-2.03 4.433-5.02.474-2.99-.742-5.59-2.718-5.807zM27.883 71.405c-1.983-.135-3.869 2.194-4.212 5.202-.344 3.007.984 5.553 2.967 5.688 1.983.134 3.868-2.195 4.212-5.202.344-3.008-.986-5.554-2.967-5.688zM56.453 84.26c-2.153.084-3.842 2.773-3.775 6.006.068 3.233 1.868 5.785 4.02 5.7 2.154-.085 3.843-2.773 3.775-6.006-.067-3.233-1.867-5.786-4.02-5.7zM87.459 79.936c-1.975.217-3.192 2.818-2.719 5.807.474 2.989 2.46 5.237 4.434 5.02 1.976-.217 3.193-2.818 2.718-5.807-.473-2.99-2.457-5.237-4.433-5.02zM97.678 77.093c.344 3.007 2.229 5.336 4.212 5.202 1.983-.135 3.311-2.68 2.967-5.688-.344-3.008-2.23-5.337-4.212-5.202-1.982.134-3.31 2.68-2.967 5.688zM72.075 84.26c-2.153-.086-3.953 2.467-4.02 5.7-.068 3.233 1.62 5.921 3.774 6.006 2.153.085 3.953-2.467 4.02-5.7.069-3.233-1.621-5.923-3.774-6.007z"/>
          <path d="M63.527 1.075c-16.46 0-28.827 18.564-34.733 29.63a121.073 121.073 0 00-3.753 7.718c-.098.082-.189.223-.255.491l-.045.179c-6.096 13.884-9.971 29.262-9.971 40.435 0 26.102 21.416 46.63 48.757 46.546 24.775-.075 48.53-21.578 48.757-46.546.122-13.488-5.486-33.258-13.874-48.974C92.506 19.487 79.987 1.075 63.527 1.075zm.151 1.475c8.983 0 18.427 7.344 24.427 14.699-5.366 4.738-15.089 8.438-24.519 8.557-9.625.12-18.953-4.651-23.986-9.825 5.94-7.135 15.306-13.43 24.078-13.43zm-.151 121.446c-19.364 0-36.096-12.163-43.23-27.998 7.829 9.72 24.715 19.52 43.279 19.52 18.324 0 34.684-8.959 42.636-18.541-6.923 15.631-23.475 27.02-42.685 27.02zm38.72-61.7l4.153-8.472c.828 2.69 1.67 5.738 2.283 8.35-1.024 1.095-1.74 3.398-1.111 5.579.431 1.494 1.427 3.034 2.456 3.972.358 2.765.888 5.69.888 8.105 0 2.825-1.26 5.274-1.774 7.937-6.299 10.95-24.583 22.795-45.566 22.795-21.08 0-39.988-12.181-46.22-23.174-.494-2.616-1.066-5.09-1.066-7.86 0-2.465.197-5.147.57-7.974 1.037-.998 2.082-2.457 2.469-3.801.634-2.199-.097-4.592-1.14-5.68.817-3.487 1.39-7.455 2.588-11.056l5.832 11.279c.255.74 1.09 1.203 1.865 1.03l6.654-1.476c.776-.172 1.749.225 2.173.886l5.502 8.572a1.404 1.404 0 001.963.407l6.716-4.452c.66-.437 1.67-.365 2.258.162l9.448 8.472c.587.527 1.544.53 2.136.009l9.614-8.488c.591-.522 1.607-.593 2.27-.16l6.805 4.464c.661.434 1.544.25 1.97-.41l5.543-8.576c.427-.66 1.401-1.056 2.176-.884l6.678 1.478c.774.168 1.61-.293 1.867-1.034zm-3.808-9.601c-.26.74-1.102 1.225-1.885 1.084l-5.323-.96c-.782-.14-1.741.293-2.145.967l-3.702 6.215a1.47 1.47 0 01-1.977.517l-5.877-3.314c-.69-.39-1.733-.284-2.329.233l-9.799 8.491c-.595.517-1.56.513-2.151-.01l-9.586-8.47c-.591-.522-1.63-.63-2.32-.242l-5.877 3.315a1.47 1.47 0 01-1.977-.519l-3.703-6.215c-.401-.674-1.361-1.107-2.144-.966l-5.323.96c-.782.14-1.626-.345-1.885-1.084l-5.444-11.778c1.3-3.074 2.788-6.235 4.296-9.125.951-.747 2.414-1.285 2.958-2.184.69-1.14.56-2.948.627-4.167a87.66 87.66 0 014.47-6.606c4.794 6.135 15.033 11.683 26.24 11.683 10.768 0 21.55-4.456 26.875-10.219 1.226 1.679 2.134 3.594 3.168 5.239-.112 1.374.277 3.272 1.124 4.672.789 1.302 2.11 2.514 3.326 3.172a124.128 124.128 0 014.346 9.419z"/>
        </g>`,
    `<g class="egg-spot" transform="matrix(.23542 0 0 .22728 -.969 1.67)">
          <ellipse cx="269.74" cy="104.67" rx="11.897" ry="16.169"/>
          <ellipse cx="109.885" cy="255.069" rx="10.067" ry="10.374"/>
          <ellipse cx="173.031" cy="270.932" rx="10.979" ry="12.203"/>
          <circle cx="256.318" cy="279.782" r="13.728"/>
          <ellipse cx="328.926" cy="275.204" rx="11.285" ry="12.204"/>
          <ellipse cx="385.365" cy="263.301" rx="10.985" ry="10.679"/>
          <ellipse cx="443.633" cy="247.138" rx="10.68" ry="12.815"/>
          <ellipse cx="116.599" cy="426.215" rx="11.897" ry="15.557"/>
          <ellipse cx="218.185" cy="446.956" rx="13.421" ry="15.558"/>
          <ellipse cx="343.571" cy="439.33" rx="11.897" ry="15.258"/>
          <ellipse cx="443.333" cy="417.672" rx="7.932" ry="11.291"/>
          <path d="M273.057 0c-70.778 0-122.373 76.64-147.771 124.982-29.056 60.924-62.074 159.143-59.872 218.029 4.08 109.096 90.066 203.115 207.649 203.115 117.584 0 204.702-115.153 206.515-204.054 1.202-58.917-27.641-146.779-57.15-212.628C397.018 81.102 343.834 0 273.057 0zM129.543 128.091c4.976-9.474 11.077-20.276 18.165-31.45-.24 1.186-.404 2.422-.404 3.726 0 7.417 4.094 13.427 9.149 13.427 5.055 0 9.149-6.01 9.149-13.427s-4.094-13.42-9.15-13.42c-1.021 0-1.988.3-2.906.758 7.289-10.826 15.465-21.75 24.456-31.965 6.07 10.251 19.063 34.946 25.544 35.809 9.149 1.224 53.69-43.317 69.554-42.705 15.863.606 45.147 39.045 56.744 36.61 11.592-2.442 8.489-45.436 14.59-49.096.478-.288 1.322-.367 2.319-.361 13.115 11.157 25 24.547 35.472 38.427-1.12-.532-2.338-.845-3.616-.845-5.393 0-9.762 5.19-9.762 11.592 0 6.4 4.369 11.59 9.762 11.59 5.392 0 9.76-5.188 9.76-11.59 0-.961-.127-1.88-.311-2.772 11.842 16.708 21.615 33.586 28.966 47.583 1.542 2.938 3.035 5.942 4.535 8.94-1.824 6.892-4.37 12.339-8.177 12.76-10.985 1.225-53.642-24.117-64.622-22.287-10.98 1.83-64.063 57.351-75.661 57.962-11.591.606-59.187-54.303-72.002-55.527-12.815-1.218-50.643 45.766-61.622 44.548-4.737-.526-15.612-15.877-20.966-25.852 3.544-7.637 7.203-15.147 11.034-22.435zm342.379 208.564c.067 2.29.17 4.615.17 6.83 0 48.084-19.089 90.753-48.343 124.003-9.302-7.771-19.284-15.061-24.345-15.35-10.979-.605-57.963 58.576-70.166 60.404-12.209 1.83-44.541-42.1-54.915-42.1-10.373 0-50.031 42.713-61.01 43.324-10.986.605-57.357-59.799-66.506-61.01-4.798-.643-14.443 6.768-23.868 15.367-25.379-28.578-43.165-64.488-47.382-104.734 6.867-8.715 15.876-17.407 20.607-17.407 9.762 0 50.031 61.016 65.894 62.234 15.863 1.217 40.882-50.645 54.915-50.037 14.033.611 64.676 55.525 78.097 56.139 13.428.605 53.69-57.969 62.234-61.018 8.543-3.047 45.147 42.1 56.133 41.488 10.979-.611 39.657-65.895 46.977-67.111 2.73-.458 7.983 4.045 11.508 8.978zm-4.634-64.883c-151.226 66.99-317.58 37.062-390.5 5.71C81.41 254.867 88.098 231 96.44 207.26c34.223 13.317 97.021 30.722 175.443 30.722 78.097 0 140.277-20.323 174.708-36.835 8.67 23.733 15.685 47.742 20.698 70.625z"/>
        </g>`,
    '<path class="egg-spot" d="M61.892 123.597c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zM107.53 98.87c-5.809 5.263-12.104 9.592-19.742 12.159-1.843.618-2.627-2.31-.8-2.926 8.99-3.02 16.267-8.508 22.483-15.45a45.794 45.794 0 01-1.94 6.217zm2.594-29.112c.75 4.411 1.16 8.57 1.16 12.273 0 1.306-.066 2.592-.168 3.868-8.319 12.886-22.583 21.18-39.21 21.264-4.843.024-4.84-7.56 0-7.585 18.545-.095 33.88-12.313 38.218-29.82zm-7.511-26.22a144.69 144.69 0 012.95 8.16c-16.047 17.408-41.682 21.95-63.335 10.126-4.262-2.327-.47-8.875 3.791-6.548 19.716 10.766 43.202 5.612 56.594-11.738zm-12.18 33.292c-3.004 0-3.004-6.068 0-6.068 4.506 0 4.506 6.068 0 6.068zm-10.515 5.057c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zm-13.52 1.516c-3.004 0-3.004-6.067 0-6.067 4.507 0 4.507 6.067 0 6.067zm13.52-38.93c4.506 0 4.506 6.066 0 6.066-3.004 0-3.004-6.067 0-6.067zm.374-36.032a51.532 51.532 0 014.284 4.256c-2.857 2.724-6.423 4.643-10.363 5.415-3.785.742-5.399-5.105-1.597-5.85 2.965-.58 5.569-1.878 7.676-3.821zm-.374 20.863c-4.506 0-4.506-6.066 0-6.066 3.004 0 3.004 6.066 0 6.066zM50.761 5.183c.696.196 1.399.37 2.111.513 3.207.639 16.318 2.212 19.47-2.56.85.392 1.68.827 2.486 1.304-2.084 3.173-6.677 4.57-10.83 4.925-5.653.482-11.02-.308-16.122-2.08a36.332 36.332 0 012.885-2.102zM61.892 19.95c-4.506 0-4.506-6.067 0-6.067 3.005 0 3.005 6.067 0 6.067zM39.51 15.902c8.533 6.87 18.806 9.936 29.71 8.974 2.788-.246 2.765 4.306 0 4.55-11.863 1.047-23.088-2.501-32.37-9.953a78.876 78.876 0 012.66-3.57zm-5.613 8.049c14.332 10.682 32.796 13.816 49.991 8.403 2.782-.876 3.963 3.517 1.2 4.388-18.404 5.794-38.091 2.339-53.491-8.898a105.886 105.886 0 012.3-3.893zm-4.62 8.25C40.312 40.972 53.68 45.351 67.91 44.904c3.877-.121 3.865 5.946 0 6.067-15.125.475-29.417-4.173-41.3-13.203.85-1.897 1.745-3.751 2.667-5.569zm-9.47 24.081c8.081 10.025 21.692 14.659 34.08 17.295 1.895.403 1.253 3.367-.646 2.964-12.477-2.655-25.89-7.346-34.403-16.76.307-1.17.63-2.337.968-3.499zm-4.165 22.003C28.32 86.51 42.837 92.115 57.92 93.318c17.233 1.374 36.935-.255 44.503-18.59.734-1.778 3.643-1 2.898.807-6.955 16.85-23.091 21.609-39.99 21.202-17.816-.43-34.804-5.602-49.82-14.959.005-1.122.056-2.295.132-3.493zm27.813 32.91c2.59.438 2.67 3.27 1.269 4.844 2.773.652 5.578 1.201 8.4 1.726 2.046.38 1.176 3.587-.858 3.208-8.042-1.496-14.683-3.464-21.82-7.866-.427-.262-.82-.53-1.227-.796-4.75-5.365-10.392-11.288-12.237-18.466 6.58 8.788 15.15 15.434 26.473 17.35z"/>',
    '<path class="egg-spot" d="M105.568 53.032c.12.79.139 1.573.057 2.346-.148 1.372-.596 2.605-1.33 3.624-1.087 1.507-2.505 2.24-4.068 2.427a4.075 4.075 0 01-1.973-.26c-1.248-.478-2.195-1.325-2.966-2.466a7.18 7.18 0 01-1.224-3.64c-.04-.742.068-1.44.362-2.104.539-1.21 1.67-2.096 3.045-2.155.838-.034 1.648.238 2.376.867.496.427.871.97 1.138 1.596.093.22.16.445.175.683.05.748-.392 1.397-1.042 1.496-.614.094-1.24-.322-1.52-.986-.038-.09-.075-.183-.122-.267-.145-.265-.359-.396-.625-.4a.949.949 0 00-.45.101c-.425.217-.652.574-.65 1.105 0 .413.077.812.236 1.198.346.84.877 1.452 1.62 1.862.344.188.706.286 1.09.283.202-.001.396-.044.592-.097a3.297 3.297 0 001.312-.681c.656-.562 1.074-1.347 1.26-2.298.196-1.003.111-2.037-.22-3.06a6.478 6.478 0 00-.847-1.711c-.713-1.022-1.626-1.74-2.689-2.087-1.3-.422-2.504-.342-3.608.097-.32.128-.623.29-.906.483-.51.345-.932.777-1.31 1.256-.83 1.053-1.29 2.232-1.428 3.583-.118 1.146.013 2.238.323 3.348a9.94 9.94 0 00.61 1.626c.73 1.521 1.69 2.772 3.076 3.729a7.606 7.606 0 003.699 1.348c.569.052 1.147.02 1.728-.087a6.924 6.924 0 002.496-.99c1.89-1.209 3.316-3.157 3.958-5.76.05-.208.086-.42.124-.631.447 1.579.862 3.166 1.245 4.76-.377.694-.792 1.36-1.278 1.963-1.192 1.478-2.597 2.536-4.106 3.2-1.16.51-2.32.751-3.467.766a8.222 8.222 0 01-1.26-.08 9.1 9.1 0 01-1.18-.243c-.743-.207-1.446-.5-2.116-.864-1.57-.85-2.814-2.008-3.855-3.432a14.198 14.198 0 01-2.325-4.903 12.596 12.596 0 01-.284-1.438 12.575 12.575 0 01-.12-1.536 10.844 10.844 0 01.532-3.568 9.976 9.976 0 011.687-3.125c.694-.873 1.527-1.59 2.574-2.094a6.948 6.948 0 011.458-.509 7.574 7.574 0 012.823-.101 7.926 7.926 0 013.371 1.341c1.598 1.106 2.804 2.688 3.513 4.6.233.61.39 1.242.488 1.885zM48.65 7.772c.266-.6.718-1.236 1.346-1.87 3.46-2.352 6.607-3.61 9.276-4.227a23.43 23.43 0 018.17.136c2.372.462 4.368 1.268 5.86 2.248 2.758 1.841 3.191 3.704 1.836 4.426-.833.475-2.168.562-4.04.475-1.276-.057-2.645-.194-4.111-.33a18.632 18.632 0 01-1.534-.197c-1.596-.288-2.852-.796-2.824-1.423.025-.586 1.347-1.114 3.186-1.036.246.012.494.026.734.034.746.025 1.219-.057 1.436-.268.126-.125.162-.269.09-.429-.217-.486-.992-.935-2.457-1.191a14.09 14.09 0 00-3.482-.161c-2.54.202-4.403.91-5.56 1.79-.537.409-.799.814-.813 1.189-.008.198.09.37.203.54.276.415.753.758 1.454 1.05 1.17.488 2.722.77 4.563 1.075 1.941.323 3.92.631 5.982 1.029 1.236.238 2.437.493 3.619.75 2.304.502 4.264.991 5.955 1.14 2.058.188 3.45-.02 4.178-.962.208-.273.338-.61.378-1.008.034-.332-.005-.709-.102-1.112 1.994 1.807 4.058 3.992 6.169 6.63-.22.68-.583 1.198-1.059 1.544-.415.304-.907.473-1.468.539-.966.115-2.086-.076-3.387-.442-1.503-.42-3.151-1.048-5.067-1.759-2.84-1.046-5.779-2.005-9.07-2.695a61.427 61.427 0 00-3.181-.578 69.678 69.678 0 00-3.906-.476c-2.302-.218-4.432-.311-6.396-.484-2.89-.24-4.855-.654-5.865-1.861-.434-.516-.494-1.219-.113-2.085zm-5.43 3.907c.073.38.198.726.376 1.03.29.498.742.856 1.3 1.12.83.39 1.867.561 3.104.61 2.932.115 6.292-.201 10.177-.08a61.17 61.17 0 015.552.41c.879.108 1.754.24 2.626.397 1.103.198 2.189.43 3.27.718 1.391.374 2.758.832 4.092 1.37 1.052.424 2.067.893 3.047 1.332.645.288 1.28.594 1.907.918 2.325 1.193 4.318 2.495 6.15 3.4 1.693.841 3.127 1.226 4.433.96a3.874 3.874 0 001.219-.47c.429-.252.816-.615 1.155-1.098.171-.247.328-.53.47-.838a102.238 102.238 0 014.147 6.774c-.33.893-.707 1.689-1.122 2.343-.57.918-1.197 1.562-1.841 1.977-1.986.747-3.914.22-5.51-.773-1.49-1.131-2.963-2.8-4.696-4.584-1.41-1.462-2.94-2.888-4.64-4.116a35.453 35.453 0 00-4.584-2.8 26.92 26.92 0 00-5.41-2.058c-.802-.21-1.612-.39-2.428-.54a38.275 38.275 0 00-3.081-.438 41.428 41.428 0 00-2.88-.187c-3.51-.104-6.83.255-10.105.907-2.386.474-4.531 1.06-6.482 1.377-1.495.242-2.789.279-3.878-.116a3.492 3.492 0 01-1.092-.636 3.673 3.673 0 01-.579-.654c1.803-2.408 3.574-4.473 5.304-6.255zM34.52 22.85c.125.138.259.268.4.389.35.298.733.514 1.12.706a5.096 5.096 0 002.037.52 6.888 6.888 0 001.749-.143c.974-.198 1.998-.59 3.119-1.092 1.553-.698 3.204-1.565 5.01-2.321a30.323 30.323 0 014.813-1.598 19.387 19.387 0 011.793-.35c.762-.105 1.276.077 1.52.483.313.547-.075 1.271-.77 1.8a2.354 2.354 0 00-.106.088c-.202.108-.398.22-.594.34-.016.002-.033.004-.047.01a3.611 3.611 0 01-.586.193c-.712.182-1.412.404-2.098.664-2.026.767-3.961 1.904-5.772 3.298-2.13 1.628-3.949 3.5-5.729 4.962-1.427 1.171-2.778 1.73-4.171 1.974-1.07.114-1.127.101-1.7.052-.264-.068-.534-.006-.797-.078-.464-.122-.928-.29-1.382-.613-.698-.496-1.369-1.221-1.973-2.224a106.056 106.056 0 014.164-7.06zM19.112 58.372c.272-.277.508-.614.705-1.023.174-.365.284-.755.326-1.155a1.3 1.3 0 00-.19-.85c.294-1.004.493-2.058.81-3.054.69.463 1.308 1.29 1.54 2.202.175.697.192 1.403.08 2.131a7.898 7.898 0 01-.247 1.112 7.455 7.455 0 01-1.16 2.327c-.768 1.026-1.649 1.736-2.744 2.042-.014.005-.029.003-.044.006.288-1.25.596-2.497.924-3.738zm-1.46 6.214a5.663 5.663 0 002.44-.818c1.26-.76 2.196-1.868 2.966-3.275.268-.491.497-1.002.683-1.528.377-1.056.6-2.12.624-3.27.028-1.358-.233-2.586-.817-3.74-.265-.525-.572-1.01-.963-1.42a5.056 5.056 0 00-.774-.654c-.057-.037-.117-.061-.175-.095.323-.945.655-1.887.998-2.825.268.147.61.337.85.524.822.64 1.443 1.462 1.932 2.42.532 1.042.89 2.14 1.083 3.322.2 1.219.21 2.402.068 3.603-.06.506-.148 1.008-.262 1.505-.109.472-.235.934-.39 1.386-.58 1.699-1.36 3.17-2.462 4.54-1.021 1.269-2.185 2.245-3.589 2.876-.6.269-1.219.464-1.862.57a6.2 6.2 0 01-.95.076c.176-1.049.378-2.116.6-3.197zm-1.355 8.803c.105-1.076.243-2.182.403-3.307.186.005.373.011.557.005.356-.014.712-.037 1.06-.087 2.067-.3 3.76-1.343 5.277-2.88 1.153-1.166 2.045-2.475 2.794-3.939.3-.589.569-1.194.803-1.811.244-.637.455-1.285.633-1.942a17.2 17.2 0 00.636-4.745c-.013-1.88-.297-3.675-1.021-5.44a9.662 9.662 0 00-1.263-2.213 8.576 8.576 0 00-.864-.966 9.362 9.362 0 00-.886-.751 9.394 9.394 0 00-.953-.621c.37-.96.75-1.914 1.14-2.865.352.184.775.432 1.093.658.196.14.376.298.565.447.04.032.085.064.127.095.301.29.602.582.903.87.03.04.06.08.094.116.266.27.493.57.716.874.346.475.651.977.913 1.5 1.196 2.408 1.623 4.892 1.707 7.49a21.403 21.403 0 01-.564 5.602 22.643 22.643 0 01-.462 1.673 22.314 22.314 0 01-1.956 4.46c-1.524 2.609-3.508 5.033-6.165 6.55a9.555 9.555 0 01-1.816.785 8.612 8.612 0 01-1.111.27c-.215.036-.43.07-.646.108-.038.005-.074.02-.11.03l-1.002.071c-.101-.007-.202-.021-.302-.021-.1 0-.2-.012-.3-.016zm17.34 40.672c-.02.022-.06.023-.08.042a45.521 45.521 0 01-6.603-6.128c.71.118 1.511.492 2.443 1.086.83.528 1.651 1.17 2.51 1.88.3.25.587.506.852.794.829.898 1.274 1.859.877 2.326zm9.526 5.068c-.025.194-.09.375-.172.55a48.278 48.278 0 01-5.208-2.72c.004-.02.012-.034.014-.053.097-.452.039-.958-.184-1.531-.37-.955-1.093-1.93-2.015-3.006-.974-1.136-2.019-2.225-3.131-3.358a79.192 79.192 0 00-1.995-1.974c-1.303-1.238-2.478-2.276-3.677-2.946-1.31-.735-2.415-1.002-3.389-.72a43.48 43.48 0 01-3.08-5.364c.36-.237.736-.422 1.134-.502.483-.098.978-.08 1.487.032.877.19 1.756.641 2.68 1.286 1.067.745 2.117 1.694 3.247 2.84 1.674 1.691 3.262 3.443 5.046 5.282.574.588 1.142 1.176 1.719 1.76.71.718 1.412 1.42 2.107 2.122 1.24 1.251 2.393 2.413 3.374 3.606 1.452 1.746 2.235 3.236 2.043 4.696zm10.29 2.402a5.025 5.025 0 01-.666 1.313 50.407 50.407 0 01-5.63-1.535c.178-.283.315-.589.406-.908.15-.521.133-1.06.004-1.605-.192-.807-.623-1.605-1.238-2.423-1.464-1.944-3.44-3.72-5.597-5.792-1.022-.98-2.044-1.95-3.077-2.96-.485-.473-.966-.95-1.443-1.43a77.103 77.103 0 01-1.787-1.846 65.996 65.996 0 01-2.206-2.51c-.568-.676-1.116-1.354-1.684-1.988-.374-.417-.745-.837-1.112-1.26-1.368-1.57-2.598-3.04-3.906-4.162-1.21-1.038-2.402-1.673-3.669-1.83a4.928 4.928 0 00-1.255.002c-.47.06-.937.207-1.401.448a4.91 4.91 0 00-.726.469 43.185 43.185 0 01-1.604-5.854c.433-.397.873-.74 1.311-1.013.723-.458 1.43-.72 2.108-.831.437-.071.87-.114 1.27-.032.054.012.111-.001.168-.002l1.31.345c.05.028.1.061.153.087.234.114.475.205.704.339.49.289.954.656 1.402 1.083 1.163 1.112 2.165 2.602 3.224 4.272.865 1.365 1.732 2.783 2.692 4.153a149.963 149.963 0 002.499 3.46 42.515 42.515 0 002.893 3.49c.438.472.883.933 1.335 1.389a81.2 81.2 0 001.716 1.682 90.53 90.53 0 001.636 1.512c2.016 1.82 4.043 3.452 6.16 5.124 1.544 1.216 2.99 2.349 4.162 3.566.899.933 1.566 1.877 1.874 2.907.114.382.168.772.164 1.17-.006.397-.07.791-.19 1.17zm10.806.326c-.251.685-.657 1.405-1.178 2.132a53.151 53.151 0 01-5.868-.399c.647-.992.95-1.99.957-2.908a5.972 5.972 0 00-.128-1.218 6.009 6.009 0 00-.69-1.851 7.364 7.364 0 00-.946-1.303c-.6-.664-1.343-1.267-2.201-1.849-1.196-.809-2.551-1.54-3.937-2.329a54.613 54.613 0 01-3.5-2.13 21.21 21.21 0 01-1.188-.841c-.485-.376-.659-.798-.545-1.234.16-.579.824-.89 1.537-.847l.113.003c.178.045.357.087.537.125.011.009.019.017.032.021.158.062.3.142.44.233.499.327 1.01.637 1.533.928 1.541.865 3.226 1.602 4.981 2.28 2.057.8 4.08 1.48 5.826 2.375 1.399.715 2.538 1.55 3.354 2.604.07.088.161.165.243.246l.583.986c.009.047.01.096.026.137.088.24.177.48.262.719.15.422.237.876.264 1.358.045.842-.107 1.766-.507 2.762zm19.873-35.936c-.082.902-.213 1.8-.393 2.69-.547 2.703-1.504 5.215-2.922 7.5-2.477 3.985-5.803 6.712-9.974 8.166a16.44 16.44 0 01-2.805.703c-.612.098-1.225.247-1.844.26-.082.002-.164.092-.244.092H63.9c-.087 0-.172-.086-.258-.092-.388-.031-.778-.081-1.164-.128a17.877 17.877 0 01-2.464-.493 16.808 16.808 0 01-5.847-2.875c-1.462-1.11-2.734-2.45-3.863-3.962a16.113 16.113 0 01-2.286-4.268 24.412 24.412 0 01-1.38-7.482 20.572 20.572 0 01.63-5.487c.809-3.12 2.255-5.825 4.342-8.106 1.524-1.664 3.277-2.946 5.262-3.84a14.113 14.113 0 014.742-1.215 14.015 14.015 0 013.595.202 14.84 14.84 0 013.286 1.03c2.484 1.104 4.546 2.826 6.149 5.197 1.726 2.553 2.674 5.433 2.88 8.61.056.847.037 1.693-.04 2.537a16.14 16.14 0 01-.447 2.617c-.523 2.018-1.4 3.822-2.66 5.396a13.154 13.154 0 01-4.369 3.532c-1.541.784-3.155 1.213-4.852 1.252a11.192 11.192 0 01-5.802-1.483 10.33 10.33 0 01-3.352-3.027c-1.347-1.903-2.052-4.078-2.225-6.475-.055-.77-.036-1.54.041-2.308a13.13 13.13 0 01.575-2.76c.52-1.593 1.306-2.996 2.423-4.16 1.645-1.72 3.622-2.58 5.865-2.724a6.11 6.11 0 012.835.5c1.793.768 3.147 2.1 4.092 3.945a8.965 8.965 0 01.834 5.738c-.208 1.117-.645 2.105-1.35 2.942-1.294 1.534-3.305 2.23-5.169 1.768-1.138-.282-2.075-.93-2.78-1.968-.48-.705-.765-1.504-.905-2.37a2.62 2.62 0 01-.006-.912c.178-.96.963-1.69 1.9-1.67.885.018 1.654.728 1.823 1.701.024.131.044.264.08.392.108.398.352.637.716.725.216.054.442.054.658.002.666-.162 1.115-.588 1.287-1.332.133-.58.142-1.166.018-1.75-.267-1.27-.916-2.244-1.908-2.938a3.175 3.175 0 00-1.508-.569 3.542 3.542 0 00-.853.036 4.98 4.98 0 00-1.956.678c-1.014.615-1.743 1.525-2.243 2.667-.529 1.204-.74 2.48-.688 3.814.03.8.16 1.578.4 2.33.467 1.467 1.256 2.667 2.438 3.528 1.441 1.05 3.035 1.516 4.757 1.472a7.224 7.224 0 001.491-.198c.887-.211 1.715-.589 2.506-1.074 1.736-1.064 3.033-2.585 3.83-4.605.674-1.708.884-3.498.728-5.345a12.402 12.402 0 00-.539-2.725c-.81-2.558-2.22-4.606-4.29-6.066-1.67-1.18-3.511-1.8-5.483-1.963a9.843 9.843 0 00-2.47.117 10.695 10.695 0 00-3.458 1.218c-2.588 1.45-4.5 3.636-5.767 6.515a14.91 14.91 0 00-1.153 4.299c-.084.703-.12 1.41-.11 2.118.013.896.1 1.784.241 2.666.183 1.148.454 2.268.837 3.353.303.857.67 1.68 1.16 2.43.322.493.67.97 1.04 1.431 1.379 1.712 3.004 3.048 4.911 3.958 1.765.84 3.617 1.244 5.53 1.33.632.028 1.264.02 1.895-.02a14.461 14.461 0 002.096-.291c1.362-.289 2.67-.78 3.88-1.458 2.708-1.517 4.806-3.749 6.31-6.662 1.337-2.594 2-5.4 2.097-8.376a22.672 22.672 0 00-.197-3.821 21.065 21.065 0 00-.812-3.613c-.936-2.912-2.412-5.438-4.481-7.521-2.732-2.753-5.962-4.288-9.621-4.738a23.378 23.378 0 00-1.864-.14 20.186 20.186 0 00-3.047.096c-.785.085-1.56.216-2.329.41a14.465 14.465 0 00-3.532 1.393c-1.566.872-2.938 2.03-4.155 3.42-1.05 1.2-1.952 2.524-2.74 3.941-.286.513-.55 1.041-.822 1.563-.348.666-.868 1.04-1.564 1.09-.924.067-1.736-.622-1.953-1.58-.014-.045-.048-.095-.048-.145v-.746c0-.016.025-.032.028-.049.042-.226.124-.437.225-.64.355-.72.734-1.427 1.137-2.122 1.17-2.01 2.524-3.847 4.143-5.437 1.898-1.866 4.045-3.26 6.452-4.162 3.056-.938 6.07-1.64 8.43-1.44.388.029.778.157 1.166.186.682.048 1.36.19 2.034.309 1.175.21 2.327.551 3.454.978 5.168 1.958 9.34 6.044 11.738 11.477 1.32 2.994 2.014 6.173 2.144 9.496a26.51 26.51 0 01-.09 3.515zm24.524-16.533c-1.764 1.572-3.66 2.566-5.556 3.037a11.568 11.568 0 01-4.341.23c-.117-.015-.239-.016-.357-.026l-1.167-.232c-.04-.016-.082-.036-.126-.05l-.746-.21a11.642 11.642 0 01-1.27-.444 12.552 12.552 0 01-2.036-1.07c-2.93-1.934-4.958-4.659-6.422-7.493a20.984 20.984 0 01-1.739-4.745 19.406 19.406 0 01-.484-3.106c-.1-1.405-.053-2.806.19-4.283.425-2.565 1.237-4.964 2.943-7.163.378-.484.8-.934 1.26-1.344.301-.267.604-.529.951-.754.045-.03.083-.067.124-.1l1.17-.72.163-.073c.238-.117.471-.244.718-.351.545-.236 1.11-.425 1.688-.566 1.538-.378 3.24-.432 5.085-.053 1.297.267 2.603.754 3.885 1.423a139.234 139.234 0 011.85 4.652 8.684 8.684 0 00-1.12-1c-.413-.3-.842-.578-1.287-.832-1.64-.93-3.32-1.41-4.937-1.45a8.988 8.988 0 00-4.015.836c-.39.179-.769.38-1.134.603a9.258 9.258 0 00-2.897 2.815c-1.072 1.638-1.631 3.372-1.882 5.238-.224 1.663-.147 3.22.154 4.814.128.686.295 1.364.5 2.031.2.656.44 1.3.718 1.929.698 1.573 1.58 3.016 2.788 4.36 1.59 1.768 3.448 3.077 5.838 3.705.403.106.819.186 1.234.257.681.115 1.375.182 2.089.178a10.054 10.054 0 001.679-.14 9.438 9.438 0 002.725-.908c1.26-.642 2.436-1.592 3.48-2.809.481-.56.919-1.171 1.323-1.815.27 1.27.52 2.53.731 3.763a16.752 16.752 0 01-1.77 1.866z"/>',
];
BreedingController.filter = {
    search: ko.observable(new RegExp('', 'i')),
    shinyStatus: ko.observable(-1).extend({ numeric: 0 }),
    // All = -2
    type1: ko.observable(-2).extend({ numeric: 0 }),
    type2: ko.observable(-2).extend({ numeric: 0 }),
    region: ko.observable(-2).extend({ numeric: 0 }),
};
BreedingController.breedableList = ko.observable([]);
// Value displayed at bottom of image
BreedingController.displayValue = ko.observable('attack');
class Egg {
    constructor(type = EggType.None, totalSteps = 0, pokemon = '', steps = 0, shinySteps = 0, notified = false) {
        this.saveKey = 'egg';
        this.defaults = {};
        this.totalSteps = totalSteps;
        this.steps = ko.observable(steps);
        this.shinySteps = shinySteps;
        this.pokemon = pokemon;
        this.type = type;
        this.notified = notified;
        this.init();
    }
    init() {
        this.progress = ko.pureComputed(function () {
            return this.steps() / this.totalSteps * 100;
        }, this);
        this.progressText = ko.pureComputed(function () {
            return `${this.steps()} / ${this.totalSteps}`;
        }, this);
        this.stepsRemaining = ko.pureComputed(function () {
            return this.totalSteps - this.steps();
        }, this);
        if (this.pokemon) {
            const dataPokemon = PokemonHelper.getPokemonByName(this.pokemon);
            this.pokemonType1 = dataPokemon.type1;
            this.pokemonType2 = dataPokemon.type2 === PokemonType.None ? dataPokemon.type1 : dataPokemon.type2;
        }
        else {
            this.pokemonType1 = PokemonType['Normal'];
            this.pokemonType2 = PokemonType['Normal'];
        }
    }
    isNone() {
        return this.type === EggType.None;
    }
    addSteps(amount) {
        if (this.isNone() || this.notified) {
            return;
        }
        if (!+amount) {
            amount = 1;
        }
        this.steps(this.steps() + amount);
        if (App.game.oakItems.isActive(OakItems.OakItem.Shiny_Charm)) {
            this.shinySteps += amount;
        }
        if (this.canHatch()) {
            if (this.type == EggType.Pokemon) {
                Notifier.notify({
                    message: `${this.pokemon} is ready to hatch!`,
                    type: NotificationConstants.NotificationOption.success,
                    sound: NotificationConstants.NotificationSound.ready_to_hatch,
                    setting: NotificationConstants.NotificationSetting.ready_to_hatch,
                });
            }
            else {
                Notifier.notify({
                    message: 'An egg is ready to hatch!',
                    type: NotificationConstants.NotificationOption.success,
                    sound: NotificationConstants.NotificationSound.ready_to_hatch,
                    setting: NotificationConstants.NotificationSetting.ready_to_hatch,
                });
            }
            this.notified = true;
        }
    }
    canHatch() {
        return !this.isNone() && this.steps() >= this.totalSteps;
    }
    hatch() {
        if (!this.canHatch()) {
            return false;
        }
        const shinyChance = GameConstants.SHINY_CHANCE_BREEDING - (0.5 * GameConstants.SHINY_CHANCE_BREEDING * Math.min(1, this.shinySteps / this.steps()));
        const shiny = PokemonFactory.generateShiny(shinyChance);
        const partyPokemon = App.game.party.caughtPokemon.find(p => p.name == this.pokemon);
        // If the party pokemon exist, increase it's damage output
        if (partyPokemon) {
            if (partyPokemon.evolutions !== undefined) {
                partyPokemon.evolutions.forEach(evo => evo instanceof LevelEvolution ? evo.triggered = false : undefined);
            }
            partyPokemon.exp = 0;
            partyPokemon.level = 1;
            partyPokemon.breeding = false;
            partyPokemon.level = partyPokemon.calculateLevelFromExp();
            partyPokemon.attackBonus += GameConstants.BREEDING_ATTACK_BONUS;
            partyPokemon.attack = partyPokemon.calculateAttack();
            partyPokemon.checkForLevelEvolution();
        }
        const pokemonID = PokemonHelper.getPokemonByName(this.pokemon).id;
        App.game.party.gainPokemonById(pokemonID, shiny);
        if (shiny) {
            Notifier.notify({
                message: `✨ You hatched a shiny ${this.pokemon}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.shiny_long,
                setting: NotificationConstants.NotificationSetting.hatched_shiny,
            });
            App.game.logbook.newLog(LogBookTypes.SHINY, `You hatched a shiny ${this.pokemon}!`);
            GameHelper.incrementObservable(App.game.statistics.shinyPokemonHatched[pokemonID]);
            GameHelper.incrementObservable(App.game.statistics.totalShinyPokemonHatched);
        }
        else {
            Notifier.notify({
                message: `You hatched ${GameHelper.anOrA(this.pokemon)} ${this.pokemon}!`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.hatched,
            });
        }
        // Capture base form if not already caught. This helps players get Gen2 Pokemon that are base form of Gen1
        const baseForm = App.game.breeding.calculateBaseForm(this.pokemon);
        if (this.pokemon != baseForm && !App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(baseForm).id)) {
            Notifier.notify({
                message: `You also found ${GameHelper.anOrA(baseForm)} ${baseForm} nearby!`,
                type: NotificationConstants.NotificationOption.success,
            });
            App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(baseForm).id);
        }
        // Update statistics
        GameHelper.incrementObservable(App.game.statistics.pokemonHatched[pokemonID]);
        GameHelper.incrementObservable(App.game.statistics.totalPokemonHatched);
        App.game.oakItems.use(OakItems.OakItem.Blaze_Cassette);
        return true;
    }
    toJSON() {
        return {
            totalSteps: this.totalSteps,
            steps: this.steps(),
            shinySteps: this.shinySteps,
            pokemon: this.pokemon,
            type: this.type,
            notified: this.notified,
        };
    }
    fromJSON(json) {
        this.totalSteps = json['totalSteps'];
        this.steps = ko.observable(json['steps']);
        this.shinySteps = json['shinySteps'];
        this.pokemon = json['pokemon'];
        this.type = json['type'];
        this.notified = json['notified'];
        this.init();
    }
}
var EggType;
(function (EggType) {
    EggType[EggType["None"] = -1] = "None";
    EggType[EggType["Fire"] = 0] = "Fire";
    EggType[EggType["Water"] = 1] = "Water";
    EggType[EggType["Grass"] = 2] = "Grass";
    EggType[EggType["Fighting"] = 3] = "Fighting";
    EggType[EggType["Electric"] = 4] = "Electric";
    EggType[EggType["Dragon"] = 5] = "Dragon";
    EggType[EggType["Pokemon"] = 6] = "Pokemon";
    EggType[EggType["Mystery"] = 7] = "Mystery";
    EggType[EggType["Fossil"] = 8] = "Fossil";
})(EggType || (EggType = {}));
class RedeemableCode {
    constructor(name, hash, isRedeemed, rewardFunction) {
        this.name = name;
        this.hash = hash;
        this.isRedeemed = isRedeemed;
        this.rewardFunction = rewardFunction;
    }
    redeem() {
        if (this.isRedeemed) {
            Notifier.notify({
                message: 'You have already redeemed this code',
                type: NotificationConstants.NotificationOption.danger,
            });
            return;
        }
        // If nothing returned, assume it was redeemed fine
        if (this.rewardFunction() == undefined) {
            this.isRedeemed = true;
        }
    }
}
class RedeemableCodeController {
    static enterCode() {
        const el = document.getElementById('redeemable-code-input');
        const code = el.value;
        el.value = '';
        App.game.redeemableCodes.enterCode(code);
    }
}
class RedeemableCodes {
    constructor() {
        this.saveKey = 'redeemableCodes';
        this.codeList = [
            new RedeemableCode('farming-quick-start', -83143881, false, function () {
                // Give the player 10k farming points, 100 Cheri berries
                App.game.wallet.gainFarmPoints(10000);
                App.game.farming.gainBerry(BerryType.Cheri, 100);
                // Notify that the code was activated successfully
                Notifier.notify({
                    title: 'Code activated!',
                    message: 'You gained 10,000 farmpoints and 100 Cheri berries',
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 1e4,
                });
            }),
            new RedeemableCode('shiny-charmer', -318017456, false, function () {
                // Select a random Pokemon to give the player as a shiny
                const pokemon = pokemonMap.random(GameConstants.TotalPokemonsPerRegion[player.highestRegion()]);
                App.game.party.gainPokemonById(pokemon.id, true, true);
                // Notify that the code was activated successfully
                Notifier.notify({
                    title: 'Code activated!',
                    message: `✨ You found a shiny ${pokemon.name}! ✨`,
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 1e4,
                });
            }),
            new RedeemableCode('complete-kanto', 750807787, false, function () {
                // Complete all routes
                for (let route = GameConstants.RegionRoute[GameConstants.Region.kanto][0]; route <= GameConstants.RegionRoute[GameConstants.Region.kanto][1]; route++) {
                    GameHelper.incrementObservable(App.game.statistics.routeKills[route], 10);
                }
                // Complete all gyms
                GameConstants.KantoGyms.forEach(gym => {
                    GameHelper.incrementObservable(App.game.statistics.gymsDefeated[GameConstants.getGymIndex(gym)]);
                    // Give badge
                    if (!App.game.badgeCase.hasBadge(gymList[gym].badgeReward)) {
                        App.game.badgeCase.gainBadge(gymList[gym].badgeReward);
                    }
                });
                // Complete all dungeons
                GameConstants.KantoDungeons.forEach(dungeon => {
                    GameHelper.incrementObservable(App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(dungeon)]);
                });
                // Catch all Pokemon
                for (let id = 1; id <= GameConstants.TotalPokemonsPerRegion[GameConstants.Region.kanto]; id++) {
                    App.game.party.gainPokemonById(id, false, true);
                }
                // Notify that the code was activated successfully
                Notifier.notify({
                    title: 'Code activated!',
                    message: 'You have unlocked all of the Kanto region',
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 1e4,
                });
            }),
        ];
    }
    isDiscordCode(code) {
        return /^\w{4}-\w{4}-\w{4}$/.test(code);
    }
    enterCode(code) {
        // If this is a Discord code, send it to the Discord class to check
        if (App.game.discord.enabled && this.isDiscordCode(code)) {
            return App.game.discord.enterCode(code);
        }
        const hash = this.hash(code);
        const redeemableCode = this.codeList.find(c => {
            return c.hash === hash;
        });
        if (!redeemableCode) {
            return Notifier.notify({
                message: `Invalid code ${code}`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        if (redeemableCode) {
            redeemableCode.redeem();
        }
    }
    /**
     * Insecure hash, but should keep some of the nosy people out.
     * @param text
     */
    hash(text) {
        let hash = 0, i, chr;
        if (text.length === 0) {
            return hash;
        }
        for (i = 0; i < text.length; i++) {
            chr = text.charCodeAt(i);
            hash = ((hash << 5) - hash) + chr;
            hash |= 0; // Convert to 32bit integer
        }
        return hash;
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        json.forEach(name => {
            const foundCode = this.codeList.find(code => {
                return code.name === name;
            });
            if (foundCode) {
                foundCode.isRedeemed = true;
            }
        });
    }
    toJSON() {
        return this.codeList.reduce(function (res, code) {
            if (code.isRedeemed) {
                res.push(code.name);
            }
            return res;
        }, []);
    }
}
class Discord {
    constructor() {
        this.saveKey = 'discord';
        this.defaults = {
            ID: null,
            username: null,
        };
        // These will be updated from our config values
        this.clientID = '733927271726841887';
        this.uri = 'https://discord.pokeclicker.com/code_login';
        this.ID = ko.observable(null);
        this.username = ko.observable(null);
        this.codes = [
            new DiscordPokemonCode(pokemonMap['Unown (D)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (I)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (S)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (C)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (O)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Unown (R)'], 700, 'Alternate form of Unown'),
            new DiscordPokemonCode(pokemonMap['Surfing Pikachu'], 1500, 'It\'s a Pikachu on a surfboard!'),
        ];
        // Check if code provided by Discord, which means the user has logged in, and we need to get their details
        const search = new URLSearchParams(location.search);
        const code = search.get('code');
        if (code) {
            $.ajax({
                data: { code },
                type: 'get',
                url: this.uri,
                crossDomain: true,
                dataType: 'json',
                success: data => {
                    if (data && data.id) {
                        this.ID(data.id);
                        this.username(`${data.username}#${data.discriminator}`);
                        Notifier.notify({
                            title: `Welcome ${this.username()}`,
                            message: 'Successfully logged in to Discord!',
                            type: NotificationConstants.NotificationOption.success,
                            timeout: GameConstants.MINUTE,
                        });
                    }
                },
                complete: () => {
                    // Remove the code from the URI, no longer needed
                    window.history.replaceState('', '', `${location.origin + location.pathname}`);
                },
            });
        }
    }
    get enabled() {
        // This was done like this so es/tslint doesn't throw errors
        try {
            return !!JSON.parse('true');
        }
        catch (e) {
            return false;
        }
    }
    login() {
        location.href = `https://discord.com/oauth2/authorize?client_id=${this.clientID}&redirect_uri=${location.origin + location.pathname}&response_type=code&scope=identify&prompt=consent`;
    }
    logout() {
        this.ID(this.defaults.id);
        this.username(this.defaults.username);
    }
    calcCode(code) {
        const discordID = +App.game.discord.ID() || false;
        if (!discordID) {
            return;
        }
        // reverse the string (for names that are similar - forms)
        const codeSeed = code.name.split('').reverse()
            // map to the character code
            .map(l => l.charCodeAt(0))
            // multiply the numbers (should be random enough)
            .reduce((s, b) => s * (b / 10), 1);
        SeededRand.seed(discordID + codeSeed);
        const arr = [];
        for (let i = 0; i < 14; i++) {
            let int;
            while (int == undefined || int.length != 1) {
                int = SeededRand.intBetween(0, 35).toString(36);
            }
            arr.push(int);
        }
        arr[4] = '-';
        arr[9] = '-';
        return arr.join('').toUpperCase();
    }
    findCodeMatch(enteredCode) {
        return this.codes.find(code => enteredCode.toUpperCase() == this.calcCode(code));
    }
    enterCode(enteredCode) {
        // Discord integration disabled
        if (!this.enabled) {
            Notifier.notify({
                message: 'Discord integration not enabled',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // User not logged in to Discord
        if (!this.ID()) {
            Notifier.notify({
                message: 'You must sign in to Discord before attempting this code',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // Try find a matching code
        const code = this.findCodeMatch(enteredCode);
        // No code found
        if (!code) {
            Notifier.notify({
                message: `Invalid code ${enteredCode}`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        // Claim the code
        code.claim();
        return true;
    }
    loadCodes(codes) {
        codes.forEach(code => {
            const c = this.codes.find(c => c.name == code.name);
            if (c) {
                c.claimed = code.claimed;
            }
        });
    }
    fromJSON(json) {
        if (!json || !json.ID) {
            return;
        }
        this.ID(json.ID || this.defaults.ID);
        this.username(json.username || this.defaults.username);
        this.loadCodes(json.codes || []);
    }
    toJSON() {
        var _a;
        return {
            ID: this.ID(),
            username: (_a = this.username()) === null || _a === void 0 ? void 0 : _a.replace(/[^\x00-\x7F]/g, ''),
            codes: this.codes.filter(c => c.claimed),
        };
    }
}
class DiscordCode {
    // Image, Price and Description fields are not currently used on the website,
    // the data is there so the Discord bot and website can share the same dataset
    constructor(name, image, price, description, claimFunction = () => true) {
        this.name = name;
        this.image = image;
        this.price = price;
        this.description = description;
        this.claimFunction = claimFunction;
        this.claimed = false;
    }
    claim() {
        if (this.claimed) {
            Notifier.notify({
                title: `[Discord Code] ${this.name}`,
                message: 'Already claimed!',
                type: NotificationConstants.NotificationOption.warning,
            });
            return;
        }
        if (this.claimFunction()) {
            this.claimed = true;
            Notifier.notify({
                title: `[Discord Code] ${this.name}`,
                message: 'Successfully claimed!',
                type: NotificationConstants.NotificationOption.success,
            });
        }
    }
    toJSON() {
        return {
            name: this.name,
            image: this.image,
            price: this.price,
            description: this.description,
            claimed: this.claimed,
        };
    }
}
class DiscordPokemonCode extends DiscordCode {
    constructor(pokemon, price, description) {
        const image = `assets/images/pokemon/${pokemon.id}.png`;
        const claimFunction = () => {
            const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SHOP);
            App.game.party.gainPokemonById(pokemon.id, shiny, true);
            // Notify that the code was activated successfully
            Notifier.notify({
                message: `You obtained a${shiny ? ' shiny' : ''} ${pokemon.name}!`,
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
            });
            return true;
        };
        super(pokemon.name, image, price, description, claimFunction);
    }
}
class DungeonBossPokemon {
    constructor(name, baseHealth, level, requirement) {
        this.name = name;
        this.baseHealth = baseHealth;
        this.level = level;
        this.requirement = requirement;
    }
    isUnlocked() {
        return App.game && this.requirement ? this.requirement.isCompleted() : true;
    }
}
///<reference path="DungeonBossPokemon.ts"/>
///<reference path="../achievements/GymBadgeRequirement.ts"/>
///<reference path="../achievements/MultiRequirement.ts"/>
///<reference path="../achievements/ObtainedPokemonRequirement.ts"/>
///<reference path="../badgeCase/BadgeTypes.ts"/>
/**
 * Gym class.
 */
class Dungeon {
    constructor(name, pokemonList, itemList, baseHealth, bossList, tokenCost, difficultyRoute, // Closest route in terms of difficulty, used for egg steps, dungeon tokens etc.
    level) {
        this.pokemonList = pokemonList;
        this.itemList = itemList;
        this.baseHealth = baseHealth;
        this.bossList = bossList;
        this.tokenCost = tokenCost;
        this.difficultyRoute = difficultyRoute;
        this.level = level;
        this.name = ko.observable(name);
        this.calculateAllPokemonNames();
    }
    isUnlocked() {
        // Player requires the Dungeon Ticket to access the dungeons
        if (!App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Dungeon_ticket)) {
            Notifier.notify({
                message: 'You need the Dungeon ticket to access dungeons',
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        return true;
    }
    calculateAllPokemonNames() {
        const pokemonNameSet = new Set(this.pokemonList);
        this.availableBosses().forEach(boss => {
            pokemonNameSet.add(boss.name);
        });
        this.allPokemonNames = [...pokemonNameSet];
    }
    availableBosses() {
        return this.bossList.filter(b => b.isUnlocked());
    }
}
/**
 * Data list that contains all dungeons, accessible by name.
 */
const dungeonList = {};
// Kanto Dungeons
dungeonList['Viridian Forest'] = new Dungeon('Viridian Forest', ['Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Pidgey', 'Pidgeotto'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 102, [new DungeonBossPokemon('Pikachu', 510, 7)], 50, 1, 5);
dungeonList['Digletts Cave'] = new Dungeon('Digletts Cave', ['Diglett'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_incense], 1208, [new DungeonBossPokemon('Dugtrio', 6040, 31)], 95, 2, 22);
dungeonList['Mt. Moon'] = new Dungeon('Mt. Moon', ['Sandshrew', 'Clefairy', 'Zubat', 'Paras', 'Geodude', 'Pidgeotto'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Token_collector], 834, [new DungeonBossPokemon('Kabuto', 4170, 12), new DungeonBossPokemon('Omanyte', 4170, 12)], 75, 4, 10);
dungeonList['Rock Tunnel'] = new Dungeon('Rock Tunnel', ['Zubat', 'Geodude', 'Machop'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Item_magnet], 4117, [new DungeonBossPokemon('Onix', 20585, 17)], 500, 5, 15);
dungeonList['Power Plant'] = new Dungeon('Power Plant', ['Pikachu', 'Raichu', 'Magnemite', 'Magneton', 'Grimer', 'Muk', 'Electrode'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 13507, [new DungeonBossPokemon('Electabuzz', 67535, 35), new DungeonBossPokemon('Zapdos', 101302, 50)], 1000, 8, 25);
dungeonList['Pokemon Tower'] = new Dungeon('Pokemon Tower', ['Gastly', 'Haunter', 'Cubone'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 7523, [new DungeonBossPokemon('Marowak', 37615, 30)], 750, 10, 20);
dungeonList['Seafoam Islands'] = new Dungeon('Seafoam Islands', ['Zubat', 'Golbat', 'Psyduck', 'Golduck', 'Slowpoke', 'Slowbro', 'Shellder', 'Krabby', 'Horsea', 'Staryu'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_egg], 17226, [new DungeonBossPokemon('Seel', 86130, 35), new DungeonBossPokemon('Articuno', 129195, 50)], 1250, 15, 30);
dungeonList['Pokemon Mansion'] = new Dungeon('Pokemon Mansion', ['Growlithe', 'Vulpix', 'Grimer', 'Muk', 'Koffing', 'Weezing'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 17760, [new DungeonBossPokemon('Magmar', 88800, 40)], 1500, 16, 35);
dungeonList['Victory Road'] = new Dungeon('Victory Road', ['Zubat', 'Golbat', 'Machop', 'Geodude', 'Graveler', 'Onix', 'Marowak', 'Venomoth'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 24595, [new DungeonBossPokemon('Machoke', 122975, 42), new DungeonBossPokemon('Moltres', 184462, 50)], 2000, 20, 40);
dungeonList['Cerulean Cave'] = new Dungeon('Cerulean Cave', ['Arbok', 'Raichu', 'Sandslash', 'Golbat', 'Parasect', 'Venomoth', 'Kadabra', 'Magneton', 'Dodrio', 'Hypno', 'Ditto', 'Wigglytuff', 'Electrode', 'Marowak', 'Chansey'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 28735, [new DungeonBossPokemon('Rhydon', 143675, 60), new DungeonBossPokemon('Mewtwo', 215512, 70)], 2500, 20, 55);
// Johto Dungeons
dungeonList['Sprout Tower'] = new Dungeon('Sprout Tower', ['Rattata', 'Gastly', 'Hoothoot'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Item_magnet], 56735, [new DungeonBossPokemon('Bellsprout', 240000, 10)], 2500, 31, 5);
dungeonList['Ruins of Alph'] = new Dungeon('Ruins of Alph', ['Natu', 'Wooper', 'Quagsire', 'Smeargle', 'Magikarp', 'Poliwag', 'Poliwhirl'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 60600, [
    new DungeonBossPokemon('Unown (A)', 260000, 14),
    new DungeonBossPokemon('Unown (L)', 260000, 14),
    new DungeonBossPokemon('Unown (P)', 260000, 14),
    new DungeonBossPokemon('Unown (H)', 260000, 14),
], 3000, 32, 7);
dungeonList['Union Cave'] = new Dungeon('Union Cave', ['Rattata', 'Sandshrew', 'Zubat', 'Geodude', 'Onix', 'Goldeen', 'Magikarp'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 63600, [new DungeonBossPokemon('Wooper', 260000, 14)], 3000, 32, 7);
dungeonList['Slowpoke Well'] = new Dungeon('Slowpoke Well', ['Zubat', 'Slowpoke'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 67900, [new DungeonBossPokemon('Slowbro', 280000, 20)], 3500, 33, 12);
dungeonList['Ilex Forest'] = new Dungeon('Ilex Forest', ['Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Zubat', 'Oddish', 'Paras', 'Hoothoot'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 82200, [
    new DungeonBossPokemon('Noctowl', 300000, 30),
    new DungeonBossPokemon('Beedrill', 300000, 30),
    new DungeonBossPokemon('Butterfree', 300000, 30),
    new DungeonBossPokemon('Celebi', 600000, 50, new GymBadgeRequirement(BadgeTypes.Elite_JohtoChampion)),
], 4000, 34, 15);
dungeonList['Burned Tower'] = new Dungeon('Burned Tower', ['Rattata', 'Zubat', 'Koffing', 'Raticate'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 88500, [new DungeonBossPokemon('Golbat', 320000, 35), new DungeonBossPokemon('Weezing', 320000, 35), new DungeonBossPokemon('Shuckle', 610000, 50)], 4500, 37, 20);
dungeonList['Tin Tower'] = new Dungeon('Tin Tower', ['Rattata', 'Gastly'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 88500, [
    new DungeonBossPokemon('Raticate', 320000, 35),
    new DungeonBossPokemon('Haunter', 320000, 35),
    new DungeonBossPokemon('Ho-Oh', 610000, 70, new MultiRequirement([
        new ObtainedPokemonRequirement(pokemonMap.Raikou),
        new ObtainedPokemonRequirement(pokemonMap.Entei),
        new ObtainedPokemonRequirement(pokemonMap.Suicune),
    ])),
], 4500, 37, 20);
dungeonList['Whirl Islands'] = new Dungeon('Whirl Islands', ['Zubat', 'Golbat', 'Seel', 'Krabby', 'Horsea'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_egg], 92800, [new DungeonBossPokemon('Dewgong', 340000, 40), new DungeonBossPokemon('Kingler', 340000, 40), new DungeonBossPokemon('Lugia', 660000, 70)], 5000, 41, 25);
dungeonList['Mt Mortar'] = new Dungeon('Mt Mortar', ['Rattata', 'Zubat', 'Geodude', 'Marill', 'Raticate', 'Golbat', 'Graveler'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 104100, [new DungeonBossPokemon('Tyrogue', 360000, 45)], 5500, 42, 30);
dungeonList['Ice Path'] = new Dungeon('Ice Path', ['Zubat', 'Jynx', 'Swinub'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_incense], 120400, [new DungeonBossPokemon('Delibird', 380000, 50)], 6000, 44, 32);
dungeonList['Dark Cave'] = new Dungeon('Dark Cave', ['Zubat', 'Geodude', 'Golbat', 'Graveler', 'Wobbuffet'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 127000, [new DungeonBossPokemon('Dunsparce', 400000, 55)], 6500, 45, 35);
dungeonList['Mt Silver'] = new Dungeon('Mt Silver', ['Ponyta', 'Doduo', 'Tangela', 'Sneasel', 'Ursaring', 'Donphan', 'Teddiursa', 'Phanpy', 'Quagsire', 'Misdreavus'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 130500, [new DungeonBossPokemon('Larvitar', 440000, 60)], 10000, 28, 50);
// Hoenn Dungeons
dungeonList['Petalburg Woods'] = new Dungeon('Petalburg Woods', ['Poochyena', 'Zigzagoon', 'Wurmple', 'Silcoon', 'Cascoon', 'Taillow', 'Shroomish'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 190000, [new DungeonBossPokemon('Slakoth', 560000, 10)], 12000, 101, 5);
dungeonList['Rusturf Tunnel'] = new Dungeon('Rusturf Tunnel', ['Whismur'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 200000, [new DungeonBossPokemon('Whismur', 600000, 20)], 14000, 101, 5);
dungeonList['Granite Cave'] = new Dungeon('Granite Cave', ['Zubat', 'Abra', 'Geodude', 'Makuhita', 'Aron', 'Sableye'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 210000, [new DungeonBossPokemon('Mawile', 660000, 20), new DungeonBossPokemon('Nosepass', 660000, 20)], 16000, 101, 5);
dungeonList['Fiery Path'] = new Dungeon('Fiery Path', ['Machop', 'Grimer', 'Koffing', 'Slugma', 'Numel'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 224000, [new DungeonBossPokemon('Torkoal', 700000, 20)], 17000, 101, 5);
dungeonList['Meteor Falls'] = new Dungeon('Meteor Falls', ['Zubat', 'Golbat', 'Goldeen', 'Magikarp', 'Barboach'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 243000, [
    new DungeonBossPokemon('Solrock', 740000, 20),
    new DungeonBossPokemon('Lunatone', 740000, 20),
], 18000, 101, 5);
dungeonList['Mt. Chimney'] = new Dungeon('Mt. Chimney', ['Zubat', 'Poochyena'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 260000, [new DungeonBossPokemon('Numel', 770000, 20)], 20000, 101, 5);
dungeonList['Jagged Pass'] = new Dungeon('Jagged Pass', ['Machop', 'Numel', 'Spoink'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 260000, [
    new DungeonBossPokemon('Machop', 800000, 20),
    new DungeonBossPokemon('Numel', 800000, 20),
    new DungeonBossPokemon('Spoink', 800000, 20),
], 22000, 101, 5);
dungeonList['New Mauville'] = new Dungeon('New Mauville', ['Magnemite', 'Voltorb'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 260000, [
    new DungeonBossPokemon('Magneton', 850000, 20),
    new DungeonBossPokemon('Electrode', 850000, 20),
], 24000, 101, 5);
dungeonList['Mt. Pyre'] = new Dungeon('Mt. Pyre', ['Shuppet', 'Duskull', 'Vulpix', 'Wingull', 'Meditite'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 280000, [
    new DungeonBossPokemon('Shuppet', 880000, 20),
    new DungeonBossPokemon('Duskull', 890000, 20),
    new DungeonBossPokemon('Chimecho', 880000, 20),
], 26000, 101, 5);
dungeonList['Shoal Cave'] = new Dungeon('Shoal Cave', ['Zubat', 'Golbat', 'Spheal', 'Tentacool', 'Magikarp', 'Wailmer'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 290000, [new DungeonBossPokemon('Snorunt', 900000, 20)], 28000, 101, 5);
dungeonList['Cave of Origin'] = new Dungeon('Cave of Origin', ['Zubat', 'Golbat', 'Sableye', 'Mawile'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 390000, [
    new DungeonBossPokemon('Exploud', 1000000, 50),
    new DungeonBossPokemon('Kyogre', 1700000, 70, new GymBadgeRequirement(BadgeTypes.Elite_HoennChampion)),
    new DungeonBossPokemon('Groudon', 1700000, 70, new GymBadgeRequirement(BadgeTypes.Elite_HoennChampion)),
], 34000, 101, 5);
dungeonList['Seafloor Cavern'] = new Dungeon('Seafloor Cavern', ['Zubat', 'Golbat', 'Tentacool', 'Magikarp', 'Wailmer'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 330000, [new DungeonBossPokemon('Wailmer', 1000000, 20)], 31000, 101, 5);
dungeonList['Sky Pillar'] = new Dungeon('Sky Pillar', ['Golbat', 'Sableye', 'Claydol', 'Banette', 'Mawile', 'Altaria'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 420000, [
    new DungeonBossPokemon('Dusclops', 1200000, 20),
    new DungeonBossPokemon('Rayquaza', 1824002, 70),
], 40000, 101, 5);
dungeonList['Sealed Chamber'] = new Dungeon('Sealed Chamber', ['Zubat', 'Golbat', 'Tentacool'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 400000, [
    new DungeonBossPokemon('Regirock', 1500000, 20),
    new DungeonBossPokemon('Regice', 1500000, 20),
    new DungeonBossPokemon('Registeel', 1500000, 20),
], 32000, 101, 5);
dungeonList['Victory Road Hoenn'] = new Dungeon('Victory Road Hoenn', ['Zubat', 'Golbat', 'Whismur', 'Loudred', 'Makuhita', 'Aron', 'Mawile', 'Meditite', 'Geodude', 'Goldeen', 'Magikarp', 'Barboach', 'Whiscash'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_egg], 360000, [
    new DungeonBossPokemon('Hariyama', 1300000, 20),
    new DungeonBossPokemon('Lairon', 1300000, 20),
    new DungeonBossPokemon('Medicham', 1300000, 20),
    new DungeonBossPokemon('Graveler', 1300000, 20),
], 37000, 101, 5);
// Sinnoh
dungeonList['Oreburgh Gate'] = new Dungeon('Oreburgh Gate', ['Zubat', 'Psyduck', 'Geodude', 'Golduck', 'Magikarp', 'Barboach'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 420600, [
    new DungeonBossPokemon('Gyarados', 1703000, 14),
    new DungeonBossPokemon('Whiscash', 1703000, 14),
], 39000, 201, 7);
dungeonList['Ravaged Path'] = new Dungeon('Ravaged Path', ['Zubat', 'Psyduck', 'Golduck', 'Magikarp', 'Barboach'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 456000, [
    new DungeonBossPokemon('Gyarados', 1803000, 14),
    new DungeonBossPokemon('Whiscash', 1803000, 14),
], 43000, 201, 7);
dungeonList['Eterna Forest'] = new Dungeon('Eterna Forest', ['Gastly', 'Hoothoot', 'Wurmple', 'Silcoon', 'Cascoon', 'Bidoof', 'Kricketot', 'Budew', 'Buneary'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 512000, [
    new DungeonBossPokemon('Beautifly', 1950000, 30),
    new DungeonBossPokemon('Dustox', 1950000, 30),
], 48000, 201, 15);
dungeonList['Old Chateau'] = new Dungeon('Old Chateau', ['Gastly', 'Haunter', 'Gengar'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 553000, [
    new DungeonBossPokemon('Rotom', 2200000, 70),
    new DungeonBossPokemon('Rotom (heat)', 2300000, 70, new ObtainedPokemonRequirement(pokemonMap.Rotom)),
    new DungeonBossPokemon('Rotom (wash)', 2300000, 70, new ObtainedPokemonRequirement(pokemonMap.Rotom)),
    new DungeonBossPokemon('Rotom (frost)', 2300000, 70, new ObtainedPokemonRequirement(pokemonMap.Rotom)),
    new DungeonBossPokemon('Rotom (fan)', 2300000, 70, new ObtainedPokemonRequirement(pokemonMap.Rotom)),
    new DungeonBossPokemon('Rotom (mow)', 2300000, 70, new ObtainedPokemonRequirement(pokemonMap.Rotom)),
], 52500, 201, 35);
dungeonList['Wayward Cave'] = new Dungeon('Wayward Cave', ['Zubat', 'Geodude', 'Onix'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 603000, [new DungeonBossPokemon('Bronzor', 2400000, 70)], 56500, 201, 35);
dungeonList['Mt. Coronet South'] = new Dungeon('Mt. Coronet South', ['Clefairy', 'Zubat', 'Machop', 'Geodude', 'Nosepass', 'Meditite', 'Chingling', 'Bronzor', 'Magikarp', 'Barboach', 'Clefairy', 'Noctowl'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 651500, [
    new DungeonBossPokemon('Machoke', 3000000, 35),
    new DungeonBossPokemon('Bronzong', 3000000, 50),
    new DungeonBossPokemon('Absol', 3000000, 50),
], 60500, 201, 20);
dungeonList['Iron Island'] = new Dungeon('Iron Island', ['Tentacool', 'Wingull', 'Tentacruel', 'Pelipper', 'Finneon', 'Zubat', 'Geodude', 'Onix', 'Golbat', 'Graveler'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 683000, [new DungeonBossPokemon('Steelix', 3210000, 70)], 66500, 201, 35);
dungeonList['Mt. Coronet North'] = new Dungeon('Mt. Coronet North', ['Clefairy', 'Zubat', 'Machop', 'Geodude', 'Meditite', 'Chingling', 'Bronzor', 'Magikarp', 'Barboach', 'Clefairy', 'Noctowl', 'Snover'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 715000, [
    new DungeonBossPokemon('Graveler', 3600000, 35),
    new DungeonBossPokemon('Feebas', 3600000, 50),
    new DungeonBossPokemon('Medicham', 3600000, 50),
], 69500, 201, 20);
dungeonList['Lake Verity'] = new Dungeon('Lake Verity', ['Starly', 'Bidoof', 'Psyduck', 'Magikarp', 'Goldeen'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Item_magnet], 768735, [
    new DungeonBossPokemon('Golduck', 3820000, 10),
    new DungeonBossPokemon('Seaking', 3820000, 10),
], 72500, 201, 5);
dungeonList['Lake Valor'] = new Dungeon('Lake Valor', ['Staravia', 'Bibarel', 'Psyduck', 'Golduck', 'Magikarp', 'Goldeen'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 811500, [
    new DungeonBossPokemon('Noctowl', 3960000, 35),
    new DungeonBossPokemon('Azelf', 8060000, 35),
], 74500, 201, 20);
dungeonList['Lake Acuity'] = new Dungeon('Lake Acuity', ['Sneasel', 'Bibarel', 'Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Snover', 'Snorunt'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_egg], 861800, [
    new DungeonBossPokemon('Gyarados', 4070000, 40),
    new DungeonBossPokemon('Uxie', 8070000, 40),
], 78000, 201, 25);
dungeonList['Distortion World'] = new Dungeon('Distortion World', ['Golbat', 'Gastly', 'Haunter', 'Duskull', 'Chingling', 'Bronzor', 'Chimecho'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 922100, [
    new DungeonBossPokemon('Dusclops', 4280000, 45),
    new DungeonBossPokemon('Bronzong', 4280000, 45),
    new DungeonBossPokemon('Giratina (altered)', 8880000, 45),
], 82500, 201, 30);
dungeonList['Victory Road Sinnoh'] = new Dungeon('Victory Road Sinnoh', ['Golbat', 'Graveler', 'Onix', 'Rhyhorn', 'Magneton', 'Azumarill', 'Floatzel'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 1203000, [
    new DungeonBossPokemon('Rhydon', 6000000, 70),
    new DungeonBossPokemon('Steelix', 6000000, 70),
    new DungeonBossPokemon('Gabite', 6000000, 70),
], 86500, 201, 35);
dungeonList['Spear Pillar'] = new Dungeon('Spear Pillar', ['Croagunk', 'Stunky', 'Glameow', 'Bronzor', 'Golbat'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 1853000, [
    new DungeonBossPokemon('Palkia', 9000000, 70),
    new DungeonBossPokemon('Dialga', 9000000, 70),
], 96500, 201, 35);
dungeonList['Hall of Origin'] = new Dungeon('Hall of Origin', ['Slowpoke', 'Spearow', 'Garchomp', 'Slakoth', 'Eevee', 'Breloom', 'Absol'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2253000, [
    new DungeonBossPokemon('Arceus (normal)', 10000000, 70),
    new DungeonBossPokemon('Slaking', 8000000, 70),
    new DungeonBossPokemon('Snorlax', 8000000, 70),
    new DungeonBossPokemon('Shuckle', 8000000, 70),
    new DungeonBossPokemon('Blissey', 8000000, 70),
], 106500, 201, 35);
dungeonList['Fullmoon Island'] = new Dungeon('Fullmoon Island', ['Illumise', 'Minun', 'Espeon', 'Luvdisc'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Clefable', 9000000, 70)], 96500, 201, 35);
dungeonList['Newmoon Island'] = new Dungeon('Newmoon Island', ['Volbeat', 'Plusle', 'Umbreon', 'Luvdisc'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Darkrai', 9000000, 70)], 96500, 201, 35);
dungeonList['Flower Paradise'] = new Dungeon('Flower Paradise', ['Vileplume', 'Bellsprout', 'Exeggutor', 'Bellossom', 'Skiploom', 'Sunflora', 'Roselia'], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_incense], 2203000, [
    new DungeonBossPokemon('Venusaur', 7900000, 50),
    new DungeonBossPokemon('Meganium', 7000000, 50),
    new DungeonBossPokemon('Shaymin (land)', 9000000, 50),
    new DungeonBossPokemon('Shaymin (sky)', 9000000, 50),
], 96500, 201, 32);
dungeonList['Snowpoint Temple'] = new Dungeon('Snowpoint Temple', ['Golbat', 'Sneasel', 'Smoochum'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Jynx', 8000000, 70),
    new DungeonBossPokemon('Regigigas', 9000000, 70),
], 96500, 201, 35);
dungeonList['Stark Mountain'] = new Dungeon('Stark Mountain', ['Golbat', 'Graveler', 'Fearow', 'Weezing', 'Rhyhorn', 'Rhydon', 'Numel', 'Slugma', 'Magcargo', 'Camerupt'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Skarmory', 8000000, 70),
    new DungeonBossPokemon('Heatran', 9000000, 70),
], 96500, 201, 35);
// Unova
// TODO: Balancing of dungeon Pokemon HP & rewards.
dungeonList['Pledge Grove'] = new Dungeon('Pledge Grove', ['Fearow', 'Furret', 'Ledian', 'Sudowoodo', 'Stantler', 'Breloom', 'Unfezant', 'Sawsbuck'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Keldeo (Resolute)', 8000000, 70)], 96500, 201, 35);
dungeonList['Floccesy Ranch'] = new Dungeon('Floccesy Ranch', ['Psyduck', 'Mareep', 'Azurill', 'Patrat', 'Lillipup', 'Pidove'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Riolu', 8000000, 70)], 96500, 201, 35);
dungeonList['Virbank Complex'] = new Dungeon('Virbank Complex', ['Magnemite', 'Koffing', 'Patrat', 'Pidove', 'Lillipup', 'Pidove'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Elekid', 8000000, 70),
    new DungeonBossPokemon('Magby', 8000000, 70),
], 96500, 201, 35);
dungeonList['Castelia Sewers'] = new Dungeon('Castelia Sewers', ['Rattata', 'Zubat', 'Grimer', 'Trubbish'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Muk', 8000000, 70)], 96500, 201, 35);
dungeonList['Relic Passage'] = new Dungeon('Relic Passage', ['Rattata', 'Raticate', 'Roggenrola', 'Woobat', 'Timburr'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Onix', 8000000, 70),
    new DungeonBossPokemon('Drilbur', 8000000, 70),
], 96500, 201, 35);
dungeonList['Desert Resort'] = new Dungeon('Desert Resort', ['Sandshrew', 'Trapinch', 'Sandile', 'Darumaka', 'Dwebble', 'Scraggy'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Maractus', 8000000, 70),
    new DungeonBossPokemon('Sigilyph', 8000000, 70),
], 96500, 201, 35);
dungeonList['Relic Castle'] = new Dungeon('Relic Castle', ['Sandshrew', 'Sandslash', 'Sandile', 'Korokrok', 'Yamask'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Baltoy', 8000000, 70),
    new DungeonBossPokemon('Volcarona', 8000000, 70),
], 96500, 201, 35);
dungeonList['Lostlorn Forest'] = new Dungeon('Lostlorn Forest', ['Pinsir', 'Roselia', 'Combee', 'Sewaddle', 'Venipede', 'Cottonee', 'Petilil'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Heracross', 8000000, 70),
    new DungeonBossPokemon('Zoroark', 8000000, 70),
    new DungeonBossPokemon('Emolga', 8000000, 70),
], 96500, 201, 35);
dungeonList['Chargestone Cave'] = new Dungeon('Chargestone Cave', ['Nosepass', 'Boldore', 'Joltik', 'Ferroseed', 'Klink'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Drilbur', 8000000, 70),
    new DungeonBossPokemon('Tynamo', 8000000, 70),
], 96500, 201, 35);
dungeonList['Mistralton Cave'] = new Dungeon('Mistralton Cave', ['Boldore', 'Woobat', 'Aron', 'Lairon'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Drilbur', 8000000, 70),
    new DungeonBossPokemon('Axew', 8000000, 70),
    new DungeonBossPokemon('Cobalion', 8000000, 70),
], 96500, 201, 35);
dungeonList['Celestial Tower'] = new Dungeon('Celestial Tower', ['Golbat', 'Elgyem', 'Misdreavus', 'Haunter'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Litwick', 8000000, 70)], 96500, 201, 35);
dungeonList['Reversal Mountain'] = new Dungeon('Reversal Mountain', ['Skarmory', 'Numel', 'Camerupt', 'Spionk', 'Grumpig', 'Trapinch', 'Drifblim', 'Skorupi', 'Boldore', 'Woobat'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Cacturne', 8000000, 70),
    new DungeonBossPokemon('Excadrill', 8000000, 70),
    new DungeonBossPokemon('Heatran', 8000000, 70, new GymBadgeRequirement(BadgeTypes.Elite_UnovaChampion)),
], 96500, 201, 35);
dungeonList['Strange House'] = new Dungeon('Strange House', ['Raticate', 'Golbat', 'Banette', 'Gothita', 'Solosis'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Gothorita', 8000000, 70),
    new DungeonBossPokemon('Duosion', 8000000, 70),
    new DungeonBossPokemon('Litwick', 8000000, 70),
], 96500, 201, 35);
dungeonList['Undella Bay'] = new Dungeon('Undella Bay', ['Wingull', 'Mantyke', 'Spheal', 'Remoraid', 'Shellder', 'Luvdisc', 'Ducklet'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Mantine', 8000000, 70),
    new DungeonBossPokemon('Walrein', 8000000, 70),
    new DungeonBossPokemon('Wailord', 8000000, 70),
], 96500, 201, 35);
dungeonList['Seaside Cave'] = new Dungeon('Seaside Cave', ['Golduck', 'Seel', 'Shellder', 'Luvdisc', 'Boldore', 'Woobat', 'Tynamo', 'Frillish'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Elektrik', 8000000, 70),
    new DungeonBossPokemon('Crustle', 8000000, 70),
], 96500, 201, 35);
dungeonList['Giant Chasm'] = new Dungeon('Giant Chasm', ['Clefairy', 'Poliwag', 'Seel', 'Tangela', 'Delibird', 'Sneasel', 'Piloswine', 'Pelipper', 'Lunatone', 'Solrock', 'Vanillish', 'Basculin', 'Ditto', 'Metang'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Tangrowth', 8000000, 70),
    new DungeonBossPokemon('Audino', 8000000, 70),
    new DungeonBossPokemon('Mamoswine', 8000000, 70),
    new DungeonBossPokemon('Kyurem', 8000000, 70, new GymBadgeRequirement(BadgeTypes.Elite_UnovaChampion)),
], 96500, 201, 35);
dungeonList['Cave of Being'] = new Dungeon('Cave of Being', ['Kadabra', 'Golbat', 'Woobat', 'Gurdurr', 'Graveler', 'Onix'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Uxie', 8000000, 70),
    new DungeonBossPokemon('Mesprit', 8000000, 70),
    new DungeonBossPokemon('Azelf', 8000000, 70),
], 96500, 201, 35);
dungeonList['Abundant Shrine'] = new Dungeon('Abundant Shrine', ['Vulpix', 'Golduck', 'Marill', 'Azumarill', 'Swablu', 'Bronzor', 'Cottonee', 'Petilil', 'Goldeen', 'Basculin'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Bronzong', 8000000, 70),
    new DungeonBossPokemon('Altaria', 8000000, 70),
    new DungeonBossPokemon('Landorus', 8000000, 70),
], 96500, 201, 35);
dungeonList['Victory Road Unova'] = new Dungeon('Victory Road Unova', ['Poliwag', 'Onix', 'Marill', 'Roselia', 'Altaria', 'Banette', 'Buizel', 'Basculin', 'Boldore', 'Cottonee', 'Petilil', 'Tranquill', 'Unfezant', 'Gurdurr'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Golurk', 8000000, 70),
    new DungeonBossPokemon('Terrakion', 8000000, 70),
    new DungeonBossPokemon('Audino', 8000000, 70),
    new DungeonBossPokemon('Druddigon', 8000000, 70),
], 96500, 201, 35);
dungeonList['Twist Mountain'] = new Dungeon('Twist Mountain', ['Onix', 'Boldore', 'Woobat', 'Gurdurr', 'Beartic'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Durant', 8000000, 70),
    new DungeonBossPokemon('Cryogonal', 8000000, 70),
    new DungeonBossPokemon('Heatmor', 8000000, 70),
    new DungeonBossPokemon('Regigigas', 8000000, 70),
], 96500, 201, 35);
dungeonList['Dragonspiral Tower'] = new Dungeon('Dragonspiral Tower', ['Dratini', 'Tranquill', 'Basculin', 'Vanillish', 'Sawsbuck', 'Beartic', 'Mienfoo', 'Mienshao', 'Golett', 'Golurk'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Dragonite', 8000000, 70),
    new DungeonBossPokemon('Reshiram', 8000000, 70),
    new DungeonBossPokemon('Druddigon', 8000000, 70),
    new DungeonBossPokemon('Zekrom', 8000000, 70),
], 96500, 201, 35);
dungeonList['Moor of Icirrus'] = new Dungeon('Moor of Icirrus', ['Croagunk', 'Palpitoad', 'Karrablast', 'Shelmet', 'Stunfisk', 'Barboach'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Keldeo', 8000000, 70),
    new DungeonBossPokemon('Seismitoad', 8000000, 70),
    new DungeonBossPokemon('Whiscash', 8000000, 70),
], 96500, 201, 35);
dungeonList['Pinwheel Forest'] = new Dungeon('Pinwheel Forest', ['Goldeen', 'Marill', 'Yanma', 'Vigoroth', 'Toxicroak', 'Gurdurr', 'Palpitoad', 'Swadloon', 'Whirlipede', 'Cottonee', 'Petilil', 'Basculin'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Scolipede', 8000000, 70),
    new DungeonBossPokemon('Seismitoad', 8000000, 70),
    new DungeonBossPokemon('Virizion', 8000000, 70),
], 96500, 201, 35);
dungeonList['Wellspring Cave'] = new Dungeon('Wellspring Cave', ['Poliwag', 'Basculin', 'Boldore', 'Woobat'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Excadrill', 8000000, 70),
    new DungeonBossPokemon('Poliwhirl', 8000000, 70),
], 96500, 201, 35);
dungeonList['Dreamyard'] = new Dungeon('Dreamyard', ['Raticate', 'Jigglypuff', 'Golbat', 'Watchog', 'Liepard', 'Munna'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Audino', 8000000, 70),
    new DungeonBossPokemon('Dunsparce', 8000000, 70),
    new DungeonBossPokemon('Latias', 8000000, 70),
    new DungeonBossPokemon('Latios', 8000000, 70),
], 96500, 201, 35);
dungeonList['P2 Laboratory'] = new Dungeon('P2 Laboratory', ['Magneton', 'Rotom', 'Beheeyem', 'Klinklang', 'Porygon2', 'Electrode', 'Metang'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Magnezone', 8000000, 70),
    new DungeonBossPokemon('Porygon-Z', 8000000, 70),
    new DungeonBossPokemon('Metagross', 8000000, 70),
    new DungeonBossPokemon('Genesect', 8000000, 70),
], 96500, 201, 35);
// Kalos
// TODO: Balancing of dungeon Pokemon HP & rewards.
dungeonList['Santalune Forest'] = new Dungeon('Santalune Forest', ['Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Fletchling'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Pikachu', 8000000, 70),
    new DungeonBossPokemon('Scatterbug', 8000000, 70),
], 96500, 201, 35);
dungeonList['Parfum Palace'] = new Dungeon('Parfum Palace', ['Goldeen', 'Seaking', 'Magikarp', 'Gyarados', 'Corphish', 'Crawdaunt'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Furfrou', 8000000, 70)], 96500, 201, 35);
dungeonList['Connecting Cave'] = new Dungeon('Connecting Cave', ['Zubat', 'Whismur', 'Meditite'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [new DungeonBossPokemon('Axew', 8000000, 70)], 96500, 201, 35);
dungeonList['Glittering Cave'] = new Dungeon('Glittering Cave', ['Machop', 'Onix', 'Cubone', 'Rhyhorn', 'Lunatone', 'Solrock'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Kangaskhan', 8000000, 70),
    new DungeonBossPokemon('Mawile', 8000000, 70),
], 96500, 201, 35);
dungeonList['Reflection Cave'] = new Dungeon('Reflection Cave', ['Mr. Mime', 'Sableye', 'Chingling', 'Roggenrola', 'Solosis'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Wobbuffet', 8000000, 70),
    new DungeonBossPokemon('Carbink', 8000000, 70),
], 96500, 201, 35);
//Tower of Mastery?
dungeonList['Azure bay'] = new Dungeon('Azure bay', ['Tentacool', 'Slowpoke', 'Exeggcute', 'Chinchou', 'Remoraid', 'Wingull', 'Chatot', 'Mantyke'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Lapras', 8000000, 70),
    new DungeonBossPokemon('Luvdisc', 8000000, 70),
    new DungeonBossPokemon('Inkay', 8000000, 70),
], 96500, 201, 35);
//Should really be a route
//Sea Spirit's Den? Releases Articuno, Zapdos, Moltres roamers.
//Kalos Power Plant?
//Pokéball Factory?
dungeonList['Lost Hotel'] = new Dungeon('Lost Hotel', ['Magneton', 'Electrode', 'Litwick', 'Pawniard'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Trubbish', 8000000, 70),
    new DungeonBossPokemon('Rotom', 8000000, 70),
    new DungeonBossPokemon('Klefki', 8000000, 70),
], 96500, 201, 35);
dungeonList['Frost Cavern'] = new Dungeon('Frost Cavern', ['Poliwhirl', 'Haunter', 'Piloswine', 'Floatzel', 'Bergmite'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Jynx', 8000000, 70),
    new DungeonBossPokemon('Beartic', 8000000, 70),
    new DungeonBossPokemon('Cryogonal', 8000000, 70),
], 96500, 201, 35);
dungeonList['Team Flare Secret HQ'] = new Dungeon('Team Flare Secret HQ', ['Golbat', 'Gyarados', 'Houndoom', 'Mightyena', 'Manectric', 'Swalot', 'Toxicroak', 'Honchkrow', 'Liepard', 'Scrafty', 'Mienshao', 'Pyroar'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Xerneas', 8000000, 70),
    new DungeonBossPokemon('Yveltal', 8000000, 70),
], 96500, 201, 35);
dungeonList['Terminus Cave'] = new Dungeon('Terminus Cave', ['Sandslash', 'Graveler', 'Lairon', 'Shuckle', 'Ariados'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Durant', 8000000, 70),
    new DungeonBossPokemon('Pupitar', 8000000, 70),
    new DungeonBossPokemon('Noibat', 8000000, 70),
    new DungeonBossPokemon('Zygarde', 8000000, 70, new GymBadgeRequirement(BadgeTypes.Elite_KalosChampion)),
], 96500, 201, 35);
dungeonList['Pokémon Village'] = new Dungeon('Pokémon Village', ['Jigglypuff', 'Poliwhirl', 'Noctowl', 'Lombre', 'Gothorita', 'Amooonguss'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Ditto', 8000000, 70),
    new DungeonBossPokemon('Zoroark', 8000000, 70),
], 96500, 201, 35);
dungeonList['Victory Road Kalos'] = new Dungeon('Victory Road Kalos', ['Graveler', 'Haunter', 'Gurdurr', 'Druddigon', 'Ariados'], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 2203000, [
    new DungeonBossPokemon('Lickitung', 8000000, 70),
    new DungeonBossPokemon('Skarmory', 8000000, 70),
    new DungeonBossPokemon('Zweilous', 8000000, 70),
    new DungeonBossPokemon('Noibat', 8000000, 70),
], 96500, 201, 35);
//Unknown Dungeon? Contains Mewtwo.
class DungeonBattle extends Battle {
    /**
     * Award the player with money and exp, and throw a Pokéball if applicable
     */
    static defeatPokemon() {
        const enemyPokemon = this.enemyPokemon();
        DungeonRunner.fighting(false);
        if (DungeonRunner.fightingBoss()) {
            DungeonRunner.fightingBoss(false);
            DungeonRunner.defeatedBoss(true);
        }
        enemyPokemon.defeat();
        App.game.breeding.progressEggsBattle(DungeonRunner.dungeon.difficultyRoute, player.region);
        DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
        DungeonRunner.map.currentTile().calculateCssClass();
        const isShiny = enemyPokemon.shiny;
        const pokeBall = App.game.pokeballs.calculatePokeballToUse(enemyPokemon.id, isShiny);
        if (pokeBall !== GameConstants.Pokeball.None) {
            this.prepareCatch(enemyPokemon, pokeBall);
            setTimeout(() => {
                this.attemptCatch(enemyPokemon);
                if (DungeonRunner.defeatedBoss()) {
                    DungeonRunner.dungeonWon();
                }
            }, App.game.pokeballs.calculateCatchTime(pokeBall));
        }
        else if (DungeonRunner.defeatedBoss()) {
            DungeonRunner.dungeonWon();
        }
    }
    static generateNewEnemy() {
        this.catching(false);
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateDungeonPokemon(DungeonRunner.dungeon.pokemonList, DungeonRunner.chestsOpened, DungeonRunner.dungeon.baseHealth, DungeonRunner.dungeon.level));
        const enemyPokemon = this.enemyPokemon();
        GameHelper.incrementObservable(App.game.statistics.pokemonEncountered[enemyPokemon.id]);
        GameHelper.incrementObservable(App.game.statistics.totalPokemonEncountered);
        if (enemyPokemon.shiny) {
            GameHelper.incrementObservable(App.game.statistics.shinyPokemonEncountered[enemyPokemon.id]);
            GameHelper.incrementObservable(App.game.statistics.totalShinyPokemonEncountered);
            App.game.logbook.newLog(LogBookTypes.SHINY, `You encountered a Shiny ${this.enemyPokemon().name} at ${player.town().dungeon().name()}.`);
        }
        else if (!App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id)) {
            App.game.logbook.newLog(LogBookTypes.NEW, `You encountered a wild ${this.enemyPokemon().name} at ${player.town().dungeon().name()}.`);
        }
        DungeonRunner.fighting(true);
    }
    static generateNewBoss() {
        DungeonRunner.fighting(true);
        this.catching(false);
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateDungeonBoss(DungeonRunner.dungeon.availableBosses(), DungeonRunner.chestsOpened));
        GameHelper.incrementObservable(App.game.statistics.pokemonEncountered[this.enemyPokemon().id]);
        GameHelper.incrementObservable(App.game.statistics.totalPokemonEncountered);
        if (this.enemyPokemon().shiny) {
            GameHelper.incrementObservable(App.game.statistics.shinyPokemonEncountered[this.enemyPokemon().id]);
            GameHelper.incrementObservable(App.game.statistics.totalShinyPokemonEncountered);
            App.game.logbook.newLog(LogBookTypes.SHINY, `You encountered a Shiny ${this.enemyPokemon().name} at ${player.town().dungeon().name()}.`);
        }
        else if (!App.game.party.alreadyCaughtPokemon(this.enemyPokemon().id)) {
            App.game.logbook.newLog(LogBookTypes.NEW, `You encountered a wild ${this.enemyPokemon().name} at ${player.town().dungeon().name()}.`);
        }
    }
}
class DungeonMap {
    constructor(size) {
        this.size = size;
        this.board = ko.observable(this.generateMap());
        this.playerPosition = ko.observable(new Point(Math.floor(size / 2), size - 1));
        // Move the boss if it spawns on the player.
        if (this.currentTile().type() == GameConstants.DungeonTile.boss) {
            this.currentTile().type(GameConstants.DungeonTile.empty);
            const newX = GameConstants.randomIntBetween(0, size - 2);
            const newY = GameConstants.randomIntBetween(0, size - 2);
            this.board()[newY][newX].type(GameConstants.DungeonTile.boss);
            this.board()[newY][newX].calculateCssClass();
        }
        this.currentTile().isVisible = true;
        this.currentTile().type(GameConstants.DungeonTile.empty);
        this.currentTile().hasPlayer = true;
        this.currentTile().calculateCssClass();
    }
    moveToCoordinates(x, y) {
        this.moveToTile(new Point(x, y));
    }
    moveUp() {
        this.moveToCoordinates(this.playerPosition().x, this.playerPosition().y - 1);
    }
    moveRight() {
        this.moveToCoordinates(this.playerPosition().x + 1, this.playerPosition().y);
    }
    moveDown() {
        this.moveToCoordinates(this.playerPosition().x, this.playerPosition().y + 1);
    }
    moveLeft() {
        this.moveToCoordinates(this.playerPosition().x - 1, this.playerPosition().y);
    }
    moveToTile(point) {
        if (this.hasAccesToTile(point)) {
            this.currentTile().hasPlayer = false;
            this.currentTile().calculateCssClass();
            this.playerPosition(point);
            this.currentTile().hasPlayer = true;
            this.currentTile().isVisible = true;
            this.currentTile().calculateCssClass();
            if (this.currentTile().type() == GameConstants.DungeonTile.enemy) {
                DungeonBattle.generateNewEnemy();
            }
        }
    }
    showChestTiles() {
        for (let i = 0; i < this.board().length; i++) {
            for (let j = 0; j < this.board()[i].length; j++) {
                if (this.board()[i][j].type() == GameConstants.DungeonTile.chest) {
                    this.board()[i][j].isVisible = true;
                    this.board()[i][j].calculateCssClass();
                }
            }
        }
    }
    showAllTiles() {
        for (let i = 0; i < this.board().length; i++) {
            for (let j = 0; j < this.board()[i].length; j++) {
                this.board()[i][j].isVisible = true;
                this.board()[i][j].calculateCssClass();
            }
        }
    }
    currentTile() {
        return this.board()[this.playerPosition().y][this.playerPosition().x];
    }
    hasAccesToTile(point) {
        if (DungeonRunner.fighting() || DungeonBattle.catching()) {
            return false;
        }
        //If any of the adjacent Tiles is visited, it's a valid Tile.
        if (point.x < 0 || point.x >= this.size || point.y < 0 || point.y >= this.size) {
            return false;
        }
        if (point.y < this.size - 1 && this.board()[point.y + 1][point.x].isVisible) {
            return true;
        }
        if (point.y > 0 && this.board()[point.y - 1][point.x].isVisible) {
            return true;
        }
        if (point.x < this.size - 1 && this.board()[point.y][point.x + 1].isVisible) {
            return true;
        }
        if (point.x > 0 && this.board()[point.y][point.x - 1].isVisible) {
            return true;
        }
        return false;
    }
    generateMap() {
        // Fill mapList with required Tiles
        const mapList = [];
        mapList.push(new DungeonTile(GameConstants.DungeonTile.boss));
        for (let i = 0; i < this.size; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.chest));
        }
        for (let i = 0; i < this.size * 2 + 3; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.enemy));
        }
        for (let i = mapList.length; i < this.size * this.size; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.empty));
        }
        // Shuffle the tiles randomly
        this.shuffle(mapList);
        while (mapList[mapList.length - Math.floor(this.size / 2) - 1].type() != GameConstants.DungeonTile.empty) {
            this.shuffle(mapList);
        }
        // Create a 2d array
        const map = [];
        while (mapList.length) {
            map.push(mapList.splice(0, this.size));
        }
        return map;
    }
    /**
     * Shuffles array in place.
     * @param {Array} a items The array containing the items.
     */
    shuffle(a) {
        let j, x, i;
        for (i = a.length; i; i--) {
            j = Math.floor(Math.random() * i);
            x = a[i - 1];
            a[i - 1] = a[j];
            a[j] = x;
        }
    }
}
class DungeonRunner {
    static initializeDungeon(dungeon) {
        if (!dungeon.isUnlocked()) {
            return false;
        }
        DungeonRunner.dungeon = dungeon;
        if (!DungeonRunner.hasEnoughTokens()) {
            Notifier.notify({
                message: "You don't have enough dungeon tokens",
                type: NotificationConstants.NotificationOption.danger,
            });
            return false;
        }
        App.game.wallet.loseAmount(new Amount(DungeonRunner.dungeon.tokenCost, GameConstants.Currency.dungeonToken));
        DungeonRunner.timeLeft(GameConstants.DUNGEON_TIME);
        DungeonRunner.map = new DungeonMap(GameConstants.DUNGEON_SIZE + player.region);
        DungeonRunner.pokemonDefeated = 0;
        DungeonRunner.chestsOpened = 0;
        DungeonRunner.loot = [];
        DungeonRunner.currentTileType = ko.pureComputed(function () {
            return DungeonRunner.map.currentTile().type;
        });
        DungeonRunner.fightingBoss(false);
        DungeonRunner.defeatedBoss(false);
        DungeonRunner.dungeonFinished(false);
        App.game.gameState = GameConstants.GameState.dungeon;
    }
    static tick() {
        if (this.timeLeft() <= 0) {
            if (this.defeatedBoss()) {
                this.dungeonWon();
            }
            else {
                this.dungeonLost();
            }
        }
        this.timeLeft(this.timeLeft() - GameConstants.DUNGEON_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / GameConstants.DUNGEON_TIME * 100));
    }
    static openChest() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.chest) {
            return;
        }
        DungeonRunner.chestsOpened++;
        const random = GameConstants.randomIntBetween(0, DungeonRunner.dungeon.itemList.length - 1);
        const input = GameConstants.BattleItemType[DungeonRunner.dungeon.itemList[random]];
        let amount = 1;
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.Item_magnet)()) {
            if (Math.random() < 0.5) {
                amount += 1;
            }
        }
        Notifier.notify({
            message: `Found ${amount} ${GameConstants.humanifyString(input)} in a dungeon chest`,
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.dungeon_item_found,
        });
        player.gainItem(input, amount);
        DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
        DungeonRunner.map.currentTile().calculateCssClass();
        if (DungeonRunner.chestsOpened == GameConstants.DUNGEON_CHEST_SHOW) {
            DungeonRunner.map.showChestTiles();
        }
        if (DungeonRunner.chestsOpened == GameConstants.DUNGEON_MAP_SHOW) {
            DungeonRunner.map.showAllTiles();
        }
    }
    static startBossFight() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.boss || DungeonRunner.fightingBoss()) {
            return;
        }
        DungeonRunner.fightingBoss(true);
        DungeonBattle.generateNewBoss();
    }
    static dungeonLost() {
        if (!DungeonRunner.dungeonFinished()) {
            DungeonRunner.dungeonFinished(true);
            DungeonRunner.fighting(false);
            DungeonRunner.fightingBoss(false);
            MapHelper.moveToTown(DungeonRunner.dungeon.name());
            Notifier.notify({
                message: 'You could not complete the dungeon in time',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    static dungeonWon() {
        if (!DungeonRunner.dungeonFinished()) {
            DungeonRunner.dungeonFinished(true);
            GameHelper.incrementObservable(App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(DungeonRunner.dungeon.name())]);
            MapHelper.moveToTown(DungeonRunner.dungeon.name());
            // TODO award loot with a special screen
            Notifier.notify({
                message: 'You have successfully completed the dungeon',
                type: NotificationConstants.NotificationOption.success,
            });
        }
    }
    static dungeonCompleted(dungeon, includeShiny) {
        const possiblePokemon = dungeon.allPokemonNames;
        return RouteHelper.listCompleted(possiblePokemon, includeShiny);
    }
    static hasEnoughTokens() {
        return App.game.wallet.hasAmount(new Amount(DungeonRunner.dungeon.tokenCost, GameConstants.Currency.dungeonToken));
    }
}
DungeonRunner.timeLeft = ko.observable(GameConstants.DUNGEON_TIME);
DungeonRunner.timeLeftPercentage = ko.observable(100);
DungeonRunner.fighting = ko.observable(false);
DungeonRunner.fightingBoss = ko.observable(false);
DungeonRunner.defeatedBoss = ko.observable(false);
DungeonRunner.dungeonFinished = ko.observable(false);
DungeonRunner.timeLeftSeconds = ko.pureComputed(function () {
    return (Math.ceil(DungeonRunner.timeLeft() / 10) / 10).toFixed(1);
});
class DungeonTile {
    constructor(type) {
        this.isVisible = false;
        this.hasPlayer = false;
        this.type = ko.observable(type);
        this.cssClass = ko.observable('');
        this.calculateCssClass();
    }
    calculateCssClass() {
        if (!this.isVisible) {
            this.cssClass('tile tile-invisible');
            return;
        }
        if (this.hasPlayer) {
            this.cssClass('tile tile-player');
            return;
        }
        this.cssClass(`tile tile-${GameConstants.DungeonTile[this.type()]}`);
    }
}
class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
class EffectEngineRunner {
    static tick() {
        this.counter = 0;
        const timeToReduce = 1;
        for (const itemName in GameConstants.BattleItemType) {
            const timeRemaining = player.effectList[itemName]();
            if (timeRemaining > 0) {
                player.effectList[itemName](Math.max(0, timeRemaining - timeToReduce));
                this.updateFormattedTimeLeft(itemName);
            }
            if (player.effectList[itemName]() == 5) {
                Notifier.notify({
                    message: `The ${GameConstants.humanifyString(itemName)}s effect is about to wear off!`,
                    type: NotificationConstants.NotificationOption.warning,
                    sound: NotificationConstants.NotificationSound.battle_item_timer,
                    setting: NotificationConstants.NotificationSetting.battle_item_timer,
                });
            }
        }
    }
    static getEffect(itemName) {
        if (!player) {
            return 0;
        }
        return player.effectList[itemName]();
    }
    static addEffect(itemName, amount) {
        player.effectList[itemName](Math.max(0, player.effectList[itemName]() + (GameConstants.ITEM_USE_TIME * amount)));
        this.updateFormattedTimeLeft(itemName);
    }
    static updateFormattedTimeLeft(itemName) {
        const times = GameConstants.formatTime(player.effectList[itemName]()).split(':');
        if (+times[0] > 99) {
            return player.effectTimer[itemName]('99h+');
        }
        else if (+times[0] > 0) {
            return player.effectTimer[itemName](`${+times[0]}h`);
        }
        times.shift();
        player.effectTimer[itemName](times.join(':'));
    }
    static getMoneyMultiplier() {
        return this.isActive(GameConstants.BattleItemType.Lucky_incense)() ? 1.5 : 1;
    }
    static getDungeonTokenMultiplier() {
        return this.isActive(GameConstants.BattleItemType.Token_collector)() ? 1.5 : 1;
    }
    static isActive(itemName) {
        return ko.pureComputed(() => {
            if (!player) {
                return false;
            }
            return !!player.effectList[itemName]();
        });
    }
}
EffectEngineRunner.counter = 0;
var BerryType;
(function (BerryType) {
    BerryType[BerryType["None"] = -1] = "None";
    BerryType[BerryType["Cheri"] = 0] = "Cheri";
    BerryType[BerryType["Chesto"] = 1] = "Chesto";
    BerryType[BerryType["Pecha"] = 2] = "Pecha";
    BerryType[BerryType["Rawst"] = 3] = "Rawst";
    BerryType[BerryType["Aspear"] = 4] = "Aspear";
    BerryType[BerryType["Leppa"] = 5] = "Leppa";
    BerryType[BerryType["Oran"] = 6] = "Oran";
    BerryType[BerryType["Sitrus"] = 7] = "Sitrus";
})(BerryType || (BerryType = {}));
///<reference path="./BerryType.ts"/>
class Berry {
    constructor(type, harvestTime, moneyValue, farmValue) {
        this.type = type;
        this.harvestTime = harvestTime;
        this.moneyValue = moneyValue;
        this.farmValue = farmValue;
    }
}
class FarmController {
    static openFarmModal() {
        if (App.game.farming.canAccess()) {
            $('#farmModal').modal('show');
        }
        else {
            Notifier.notify({
                message: `You need the ${GameConstants.humanifyString(KeyItems.KeyItem[KeyItems.KeyItem.Wailmer_pail])} to access this location`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static getImage(index) {
        const plot = App.game.farming.plotList[index];
        if (plot.stage() === PlotStage.Seed) {
            return 'assets/images/farm/AllTreeSeedIII.png';
        }
        else if (plot.stage() === PlotStage.Sprout) {
            return 'assets/images/farm/AllTreeSproutIII.png';
        }
        return `assets/images/farm/${BerryType[plot.berry]}Tree${PlotStage[plot.stage()]}III.png`;
    }
    static getTooltipLabel(index) {
        const plot = App.game.farming.plotList[index];
        if (plot.timeLeft > 0) {
            return plot.formattedTimeLeft();
        }
        return 'Ready';
    }
}
FarmController.selectedBerry = BerryType.Cheri;
document.addEventListener('DOMContentLoaded', function (event) {
    $('#farmModal').on('show.bs.modal', function () {
        const seedList = $('#seedList');
        seedList.children().get(FarmController.selectedBerry).className += ' active';
        seedList.find('li').click(function () {
            $(this).parent().children().removeClass('active');
            $(this).addClass('active');
        });
    });
});
class Farming {
    constructor() {
        this.name = 'Farming';
        this.saveKey = 'farming';
        this.berryData = {};
        this.AMOUNT_OF_BERRIES = 8;
        this.AMOUNT_OF_PLOTS = 25;
        this.defaults = {
            berryList: Array(this.AMOUNT_OF_BERRIES).fill(0),
            plotList: new Array(this.AMOUNT_OF_PLOTS).fill(null).map(function (value, index) {
                return new Plot(index === 0, false, BerryType.None, 0);
            }),
        };
        this.berryList = new ArrayOfObservables(this.defaults.berryList);
        this.plotList = new ArrayOfObservables(this.defaults.plotList);
    }
    initialize() {
        this.berryData[BerryType.Cheri] = new Berry(BerryType.Cheri, 30, 100, 6);
        this.berryData[BerryType.Chesto] = new Berry(BerryType.Chesto, 45, 150, 8);
        this.berryData[BerryType.Pecha] = new Berry(BerryType.Pecha, 60, 180, 10);
        this.berryData[BerryType.Rawst] = new Berry(BerryType.Rawst, 90, 240, 14);
        this.berryData[BerryType.Aspear] = new Berry(BerryType.Aspear, 120, 290, 18);
        this.berryData[BerryType.Leppa] = new Berry(BerryType.Leppa, 240, 460, 30);
        this.berryData[BerryType.Oran] = new Berry(BerryType.Oran, 300, 530, 35);
        this.berryData[BerryType.Sitrus] = new Berry(BerryType.Sitrus, 600, 1000, 60);
    }
    update(delta) {
        const timeToReduce = delta * App.game.oakItems.calculateBonus(OakItems.OakItem.Sprayduck);
        let notify = false;
        this.plotList.forEach(plot => {
            plot.reduceTime(timeToReduce);
            if (!plot.isEmpty() && plot.timeLeft == 0 && !plot.notified) {
                plot.notified = true;
                notify = true;
            }
        });
        if (notify) {
            Notifier.notify({
                message: 'A berry is ready to harvest!',
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.ready_to_harvest,
                setting: NotificationConstants.NotificationSetting.ready_to_harvest,
            });
        }
    }
    unlockPlot() {
        if (this.canBuyPlot()) {
            App.game.wallet.loseAmount(this.calculatePlotPrice());
            this.plotList[this.unlockedPlotCount()].isUnlocked = true;
        }
    }
    allPlotsUnlocked() {
        return this.plotList[this.plotList.length - 1].isUnlocked;
    }
    canBuyPlot() {
        return !this.allPlotsUnlocked() && App.game.wallet.hasAmount(this.calculatePlotPrice());
    }
    calculatePlotPrice() {
        if (this.allPlotsUnlocked()) {
            return new Amount(Infinity, GameConstants.Currency.farmPoint);
        }
        const plotCount = this.unlockedPlotCount();
        return new Amount(10 * Math.floor(Math.pow(plotCount, 2)), GameConstants.Currency.farmPoint);
    }
    unlockedPlotCount() {
        return App.game.farming.plotList.filter(plot => plot.isUnlocked).length;
    }
    plant(index, berry) {
        const plot = this.plotList[index];
        if (!plot.isEmpty() || !plot.isUnlocked || !this.hasBerry(berry)) {
            return;
        }
        this.berryList[berry] -= 1;
        plot.berry = berry;
        plot.timeLeft = this.berryData[berry].harvestTime;
        plot.notified = false;
    }
    plantAll(berry) {
        this.plotList.forEach((plot, index) => {
            this.plant(index, berry);
        });
    }
    /**
     * Harvest a plot at the given index, returns the amount of money gained from the harvest.
     * @param index The index of the plot to harvest
     * @param suppressNotification Suppress the notification of the amount of money gained
     */
    harvest(index, suppressNotification = false) {
        const plot = this.plotList[index];
        if (plot.berry === BerryType.None || plot.timeLeft > 0) {
            return 0;
        }
        App.game.wallet.gainFarmPoints(this.berryData[plot.berry].farmValue);
        const money = App.game.wallet.gainMoney(this.berryData[plot.berry].moneyValue);
        const amount = GameConstants.randomIntBetween(2, 3);
        GameHelper.incrementObservable(App.game.statistics.totalBerriesHarvested, amount);
        GameHelper.incrementObservable(App.game.statistics.berriesHarvested[plot.berry], amount);
        this.gainBerry(plot.berry, amount);
        if (!suppressNotification) {
            Notifier.notify({
                message: `You earned ${money} money from the harvest!`,
                type: NotificationConstants.NotificationOption.success,
            });
        }
        plot.berry = BerryType.None;
        App.game.oakItems.use(OakItems.OakItem.Sprayduck);
        return money;
    }
    /**
     * Try to harvest all plots, suppresses the individual notifications
     */
    harvestAll() {
        let total = 0;
        this.plotList.forEach((plot, index) => {
            total += this.harvest(index, true);
        });
        if (total > 0) {
            Notifier.notify({
                message: `You earned ${total} money from the harvest!`,
                type: NotificationConstants.NotificationOption.success,
            });
        }
    }
    gainRandomBerry(amount = 1, disableNotification = false) {
        const berry = GameHelper.getIndexFromDistribution(GameConstants.BerryDistribution);
        if (!disableNotification) {
            Notifier.notify({
                message: `You got a ${BerryType[berry]} berry!`,
                type: NotificationConstants.NotificationOption.success,
                setting: NotificationConstants.NotificationSetting.route_item_found,
            });
        }
        this.gainBerry(berry, amount);
    }
    gainBerry(berry, amount = 1) {
        this.berryList[berry] += Math.floor(amount);
    }
    hasBerry(berry) {
        return this.berryList[berry] > 0;
    }
    canAccess() {
        return MapHelper.accessToRoute(14, 0) && App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Wailmer_pail);
    }
    toJSON() {
        return {
            berryList: this.berryList.map(x => x),
            plotList: this.plotList.map(plot => plot.toJSON()),
        };
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        const savedBerries = json['berryList'];
        if (savedBerries == null) {
            this.berryList = new ArrayOfObservables(this.defaults.berryList);
        }
        else {
            savedBerries.forEach((value, index) => {
                this.berryList[index] = value;
            });
        }
        const savedPlots = json['plotList'];
        if (savedPlots == null) {
            this.plotList = new ArrayOfObservables(this.defaults.plotList);
        }
        else {
            savedPlots.forEach((value, index) => {
                const plot = new Plot(false, false, BerryType.None, 0);
                plot.fromJSON(value);
                this.plotList[index] = plot;
            });
        }
    }
}
class Plot {
    constructor(isUnlocked, boosted, berry, timeLeft) {
        this.saveKey = '';
        this.defaults = {
            isUnlocked: false,
            boosted: false,
            berry: BerryType.None,
            timeLeft: 0,
        };
        this._isUnlocked = ko.observable(isUnlocked);
        this._boosted = ko.observable(boosted);
        this._berry = ko.observable(berry);
        this._timeLeft = ko.observable(timeLeft);
        this.formattedTimeLeft = ko.pureComputed(function () {
            return GameConstants.formatTime(Math.ceil(this.timeLeft) / App.game.oakItems.calculateBonus(OakItems.OakItem.Sprayduck));
        }, this);
        this.isEmpty = ko.pureComputed(function () {
            return this.berry == BerryType.None;
        }, this);
        this.stage = ko.pureComputed(function () {
            if (this.berry === BerryType.None) {
                return 1;
            }
            return 4 - Math.ceil(4 * this.timeLeft / App.game.farming.berryData[this.berry].harvestTime);
        }, this);
        this.notified = false;
    }
    reduceTime(seconds) {
        this.timeLeft = Math.max(0, this.timeLeft - seconds);
    }
    fromJSON(json) {
        var _a, _b, _c, _d;
        if (json == null) {
            return;
        }
        this.isUnlocked = (_a = json['isUnlocked']) !== null && _a !== void 0 ? _a : this.defaults.isUnlocked;
        this.boosted = (_b = json['boosted']) !== null && _b !== void 0 ? _b : this.defaults.boosted;
        this.berry = (_c = json['berry']) !== null && _c !== void 0 ? _c : this.defaults.berry;
        this.timeLeft = (_d = json['timeLeft']) !== null && _d !== void 0 ? _d : this.defaults.timeLeft;
    }
    toJSON() {
        return {
            isUnlocked: this.isUnlocked,
            boosted: this.boosted,
            berry: this.berry,
            timeLeft: this.timeLeft,
        };
    }
    // Knockout getters/setters
    get isUnlocked() {
        return this._isUnlocked();
    }
    set isUnlocked(value) {
        this._isUnlocked(value);
    }
    get boosted() {
        return this._boosted();
    }
    set boosted(value) {
        this._boosted(value);
    }
    get berry() {
        return this._berry();
    }
    set berry(berry) {
        this._berry(berry);
    }
    get timeLeft() {
        return this._timeLeft();
    }
    set timeLeft(value) {
        this._timeLeft(value);
    }
}
var PlotStage;
(function (PlotStage) {
    PlotStage[PlotStage["Seed"] = 0] = "Seed";
    PlotStage[PlotStage["Sprout"] = 1] = "Sprout";
    PlotStage[PlotStage["Taller"] = 2] = "Taller";
    PlotStage[PlotStage["Bloom"] = 3] = "Bloom";
    PlotStage[PlotStage["Berry"] = 4] = "Berry";
})(PlotStage || (PlotStage = {}));
class GymPokemon {
    constructor(name, maxHealth, level) {
        this.name = name;
        this.maxHealth = maxHealth;
        this.level = level;
    }
}
///<reference path="GymPokemon.ts"/>
///<reference path="../pokemons/PokemonFactory.ts"/>
///<reference path="../achievements/OneFromManyRequirement.ts"/>
///<reference path="../badgeCase/BadgeTypes.ts"/>
/**
 * Data list that contains all gymLeaders, accessible by townName.
 */
const gymList = {};
/**
 * Gym class.
 */
class Gym {
    constructor(leaderName, town, pokemons, badgeReward, moneyReward, defeatMessage, requirements = [], rewardFunction = () => { }) {
        this.leaderName = leaderName;
        this.town = town;
        this.pokemons = pokemons;
        this.badgeReward = badgeReward;
        this.moneyReward = moneyReward;
        this.defeatMessage = defeatMessage;
        this.requirements = requirements;
        this.rewardFunction = rewardFunction;
    }
    static isUnlocked(gym) {
        return gym.requirements.every(requirement => requirement.isCompleted());
    }
    static calculateCssClass(gym) {
        return ko.pureComputed(() => {
            if (App.game.badgeCase.hasBadge(gym.badgeReward)) {
                return 'btn btn-success';
            }
            return 'btn btn-secondary';
        });
    }
    static getLeaderByBadge(badge) {
        for (const item in gymList) {
            const gym = gymList[item];
            if (BadgeTypes[gym.badgeReward] == BadgeTypes[BadgeTypes[badge]]) {
                return gym.leaderName;
            }
        }
        return 'Brock';
    }
    firstWinReward() {
        // Give the player this gyms badge
        App.game.badgeCase.gainBadge(this.badgeReward);
        // Show the badge modal
        $('#receiveBadgeModal').modal('show');
        // Run the first time reward function
        this.rewardFunction();
    }
}
// Kanto Gyms
gymList['Pewter City'] = new Gym('Brock', 'Pewter City', [
    new GymPokemon('Geodude', 770, 12),
    new GymPokemon('Onix', 1554, 14),
], BadgeTypes.Boulder, 250, 'I took you for granted, and so I lost. As proof of your victory, I confer on you this...the official Pokémon League Boulder Badge.', [new RouteKillRequirement(10, 2)]);
gymList['Cerulean City'] = new Gym('Misty', 'Cerulean City', [
    new GymPokemon('Staryu', 4000, 18),
    new GymPokemon('Starmie', 6800, 21),
], BadgeTypes.Cascade, 500, "Wow! You're too much, all right! You can have the Cascade Badge to show that you beat me.", [new RouteKillRequirement(10, 4)]);
gymList['Vermillion City'] = new Gym('Lt. Surge', 'Vermillion City', [
    new GymPokemon('Voltorb', 10780, 21),
    new GymPokemon('Pikachu', 13540, 18),
    new GymPokemon('Raichu', 15675, 24),
], BadgeTypes.Thunder, 1000, "Now that's a shocker! You're the real deal, kid! Fine, then, take the Thunder Badge!", [
    new RouteKillRequirement(10, 6),
    new GymBadgeRequirement(BadgeTypes.Cascade),
]);
gymList['Celadon City'] = new Gym('Erika', 'Celadon City', [
    new GymPokemon('Victreebel', 38810, 29),
    new GymPokemon('Tangela', 30340, 24),
    new GymPokemon('Vileplume', 36400, 29),
], BadgeTypes.Rainbow, 1500, 'Oh! I concede defeat. You are remarkably strong. I must confer on you the Rainbow Badge.', [new RouteKillRequirement(10, 8)]);
gymList['Saffron City'] = new Gym('Sabrina', 'Saffron City', [
    new GymPokemon('Kadabra', 23040, 38),
    new GymPokemon('Mr. Mime', 25600, 37),
    new GymPokemon('Venomoth', 28400, 38),
    new GymPokemon('Alakazam', 35380, 43),
], BadgeTypes.Marsh, 2500, 'This loss shocks me! But a loss is a loss. I admit I didn\'t work hard enough to win. You earned the Marsh Badge.', [new GymBadgeRequirement(BadgeTypes.Rainbow)]);
gymList['Fuchsia City'] = new Gym('Koga', 'Fuchsia City', [
    new GymPokemon('Koffing', 30780, 38),
    new GymPokemon('Muk', 32460, 37),
    new GymPokemon('Koffing', 36540, 38),
    new GymPokemon('Weezing', 37430, 43),
], BadgeTypes.Soul, 3500, 'Humph! You have proven your worth! Here! Take the Soul Badge!', [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, 18),
        new RouteKillRequirement(10, 15),
    ]),
], () => {
    App.game.quests.getQuestLine('Mining Expedition').beginQuest();
});
gymList['Cinnabar Island'] = new Gym('Blaine', 'Cinnabar Island', [
    new GymPokemon('Growlithe', 37430, 42),
    new GymPokemon('Ponyta', 42340, 40),
    new GymPokemon('Rapidash', 45230, 42),
    new GymPokemon('Arcanine', 50290, 47),
], BadgeTypes.Volcano, 5000, 'I have burned down to nothing! Not even ashes remain! You have earned the Volcano Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokemon Mansion'))]);
gymList['Viridian City'] = new Gym('Giovanni', 'Viridian City', [
    new GymPokemon('Rhyhorn', 45230, 45),
    new GymPokemon('Dugtrio', 47530, 42),
    new GymPokemon('Nidoqueen', 48740, 44),
    new GymPokemon('Nidoking', 48350, 45),
    new GymPokemon('Rhydon', 55000, 50),
], BadgeTypes.Earth, 6000, 'Ha! That was a truly intense fight. You have won! As proof, here is the Earth Badge!', [
    new GymBadgeRequirement(BadgeTypes.Volcano),
    new GymBadgeRequirement(BadgeTypes.Marsh),
    new GymBadgeRequirement(BadgeTypes.Thunder),
]);
// Kanto Elite 4
gymList['Elite Lorelei'] = new Gym('Lorelei', 'Elite Lorelei', [
    new GymPokemon('Dewgong', 45330, 52),
    new GymPokemon('Cloyster', 48300, 51),
    new GymPokemon('Slowbro', 52000, 52),
    new GymPokemon('Jynx', 57000, 54),
    new GymPokemon('Lapras', 60250, 54),
], BadgeTypes.Elite_Lorelei, 7500, '...Things shouldn\'t be this way!', [new GymBadgeRequirement(BadgeTypes.Earth)]);
gymList['Elite Bruno'] = new Gym('Bruno', 'Elite Bruno', [
    new GymPokemon('Onix', 45330, 51),
    new GymPokemon('Hitmonchan', 48300, 53),
    new GymPokemon('Hitmonlee', 52000, 53),
    new GymPokemon('Onix', 57000, 54),
    new GymPokemon('Machamp', 60250, 56),
], BadgeTypes.Elite_Bruno, 7500, 'Why? How could I lose?', [new GymBadgeRequirement(BadgeTypes.Elite_Lorelei)]);
gymList['Elite Agatha'] = new Gym('Agatha', 'Elite Agatha', [
    new GymPokemon('Gengar', 45330, 54),
    new GymPokemon('Golbat', 48300, 54),
    new GymPokemon('Haunter', 52000, 53),
    new GymPokemon('Arbok', 57000, 56),
    new GymPokemon('Gengar', 60250, 58),
], BadgeTypes.Elite_Agatha, 7500, 'Oh, my! You\'re something special, child!', [new GymBadgeRequirement(BadgeTypes.Elite_Bruno)]);
gymList['Elite Lance'] = new Gym('Lance', 'Elite Lance', [
    new GymPokemon('Gyarados', 48300, 56),
    new GymPokemon('Dragonair', 52000, 54),
    new GymPokemon('Dragonair', 57000, 54),
    new GymPokemon('Aerodactyl', 60250, 58),
    new GymPokemon('Dragonite', 66000, 60),
], BadgeTypes.Elite_Lance, 7500, 'That’s it! I hate to admit it, but you are a Pokémon master!', [new GymBadgeRequirement(BadgeTypes.Elite_Agatha)]);
//TODO make champion Gym
//Johto Gyms
gymList['Violet City'] = new Gym('Falkner', 'Violet City', [
    new GymPokemon('Pidgey', 108000, 9),
    new GymPokemon('Pidgeotto', 112000, 13),
], BadgeTypes.Zephyr, 250, '...For pity\'s sake! My dad\'s cherished bird Pokémon... But a defeat is a defeat. All right. Take this official Pokémon League Badge. This one is the Zephyr Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sprout Tower'))]);
gymList['Azalea Town'] = new Gym('Bugsy', 'Azalea Town', [
    new GymPokemon('Metapod', 103000, 15),
    new GymPokemon('Kakuna', 101500, 15),
    new GymPokemon('Scyther', 119000, 17),
], BadgeTypes.Hive, 500, 'Whoa, amazing! You\'re an expert on Pokémon! My research isn\'t complete yet. OK, you win. Take this Hive Badge.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Slowpoke Well'))]);
gymList['Goldenrod City'] = new Gym('Whitney', 'Goldenrod City', [
    new GymPokemon('Clefairy', 130000, 17),
    new GymPokemon('Miltank', 170000, 19),
], BadgeTypes.Plain, 1000, '...Sniff... What? What do you want? A badge? Oh, right. I forgot. Here\'s the Plain Badge.', [new RouteKillRequirement(10, 34)]);
gymList['Ecruteak City'] = new Gym('Morty', 'Ecruteak City', [
    new GymPokemon('Gastly', 127000, 21),
    new GymPokemon('Haunter', 128000, 21),
    new GymPokemon('Haunter', 130000, 23),
    new GymPokemon('Gengar', 132000, 25),
], BadgeTypes.Fog, 1500, 'I see... Your journey has taken you to far-away places. And you have witnessed much more than me. I envy you for that... Here is the Fog Badge..', [new GymBadgeRequirement(BadgeTypes.Plain)]);
gymList['Cianwood City'] = new Gym('Chuck', 'Cianwood City', [
    new GymPokemon('Primeape', 177000, 29),
    new GymPokemon('Poliwrath', 183000, 31),
], BadgeTypes.Storm, 2500, 'Here is the Storm Badge. Wahahah! I enjoyed battling you! But a loss is a loss! From now on, I\'m going to train 24 hours a day!', [new GymBadgeRequirement(BadgeTypes.Fog)]);
gymList['Olivine City'] = new Gym('Jasmine', 'Olivine City', [
    new GymPokemon('Magnemite', 177000, 30),
    new GymPokemon('Magnemite', 178000, 30),
    new GymPokemon('Steelix', 182000, 35),
], BadgeTypes.Mineral, 3500, '...You are a better Trainer than me, in both skill and kindness. In accordance with League rules, I confer upon you this Mineral Badge.', [new GymBadgeRequirement(BadgeTypes.Storm)]);
gymList['Mahogany Town'] = new Gym('Pryce', 'Mahogany Town', [
    new GymPokemon('Seel', 190000, 30),
    new GymPokemon('Dewgong', 192500, 32),
    new GymPokemon('Piloswine', 196000, 34),
], BadgeTypes.Glacier, 4000, 'I am impressed by your prowess. With your strong will, I know you will overcome all life\'s obstacles. You are worthy of this Glacier Badge!', [new RouteKillRequirement(10, 43)]);
gymList['Blackthorn City'] = new Gym('Clair', 'Blackthorn City', [
    new GymPokemon('Dragonair', 205000, 38),
    new GymPokemon('Dragonair', 205000, 38),
    new GymPokemon('Gyarados', 218000, 38),
    new GymPokemon('Kingdra', 220000, 41),
], BadgeTypes.Rising, 5000, 'Here, this is the Rising Badge... Hurry up! Take it!', [new GymBadgeRequirement(BadgeTypes.Glacier)]);
//Johto Elite 4
gymList['Elite Will'] = new Gym('Will', 'Elite Will', [
    new GymPokemon('Xatu', 245330, 40),
    new GymPokemon('Jynx', 248300, 41),
    new GymPokemon('Exeggutor', 252000, 41),
    new GymPokemon('Slowbro', 257000, 41),
    new GymPokemon('Xatu', 260250, 42),
], BadgeTypes.Elite_Will, 7500, 'Even though I was defeated, I won\'t change my course. I will continue battling until I stand above all Trainers! Now move on and experience the true ferocity of the Elite Four.', [new GymBadgeRequirement(BadgeTypes.Rising)]);
gymList['Elite Koga'] = new Gym('Koga2', 'Elite Koga', [
    new GymPokemon('Ariados', 245330, 40),
    new GymPokemon('Venomoth', 248300, 41),
    new GymPokemon('Forretress', 252000, 43),
    new GymPokemon('Muk', 257000, 42),
    new GymPokemon('Crobat', 260250, 44),
], BadgeTypes.Elite_Koga, 7500, 'I subjected you to everything I could muster. But my efforts failed. I must hone my skills. Go on to the next room, and put your abilities to the test!', [new GymBadgeRequirement(BadgeTypes.Elite_Will)]);
gymList['Elite Bruno2'] = new Gym('Bruno2', 'Elite Bruno2', [
    new GymPokemon('Hitmontop', 245330, 42),
    new GymPokemon('Hitmonlee', 248300, 42),
    new GymPokemon('Hitmonchan', 252000, 42),
    new GymPokemon('Onix', 257000, 43),
    new GymPokemon('Machamp', 260250, 46),
], BadgeTypes.Elite_Bruno2, 7500, 'Having lost, I have no right to say anything… Go face your next challenge!', [new GymBadgeRequirement(BadgeTypes.Elite_Koga)]);
gymList['Elite Karen'] = new Gym('Karen', 'Elite Karen', [
    new GymPokemon('Umbreon', 248300, 42),
    new GymPokemon('Vileplume', 252000, 42),
    new GymPokemon('Gengar', 257000, 45),
    new GymPokemon('Murkrow', 260250, 44),
    new GymPokemon('Houndoom', 266000, 47),
], BadgeTypes.Elite_Karen, 7500, 'Strong Pokémon. Weak Pokémon. That is only the selfish perception of people. Truly skilled Trainers should try to win with the Pokémon they love best. I like your style. You understand what\'s important. Go on — — the Champion is waiting.', [new GymBadgeRequirement(BadgeTypes.Elite_Bruno2)]);
gymList['Champion Lance'] = new Gym('Lance2', 'Champion Lance', [
    new GymPokemon('Gyarados', 258300, 44),
    new GymPokemon('Dragonite', 262000, 49),
    new GymPokemon('Dragonite', 264000, 49),
    new GymPokemon('Aerodactyl', 260250, 48),
    new GymPokemon('Dragonite', 270000, 50),
], BadgeTypes.Elite_JohtoChampion, 7500, '…It\'s over. But it\'s an odd feeling. I\'m not angry that I lost. In fact, I feel happy. Happy that I witnessed the rise of a great new Champion!', [new GymBadgeRequirement(BadgeTypes.Elite_Karen)]);
// Hoenn Gyms
gymList['Rustboro City'] = new Gym('Roxanne', 'Rustboro City', [
    new GymPokemon('Geodude', 282900, 12),
    new GymPokemon('Geodude', 282900, 12),
    new GymPokemon('Nosepass', 310200, 15),
], BadgeTypes.Stone, 1000, 'So… I lost… It seems that I still have much more to learn… I understand.', [new GymBadgeRequirement(BadgeTypes.Elite_JohtoChampion)]);
gymList['Dewford Town'] = new Gym('Brawly', 'Dewford Town', [
    new GymPokemon('Machop', 324000, 17),
    new GymPokemon('Meditite', 324000, 18),
    new GymPokemon('Makuhita', 344000, 19),
], BadgeTypes.Knuckle, 2000, 'Whoah, wow! You made a much bigger splash than I expected! You swamped me! Okay, you\'ve got me. Take this Gym Badge!', []);
gymList['Mauville City'] = new Gym('Wattson', 'Mauville City', [
    new GymPokemon('Voltorb', 352000, 20),
    new GymPokemon('Electrike', 348000, 20),
    new GymPokemon('Magneton', 383000, 22),
    new GymPokemon('Manectric', 348000, 24),
], BadgeTypes.Dynamo, 3000, 'Wahahahah! Fine, I lost! You ended up giving me a thrill! Take this Badge!', []);
gymList['Lavaridge Town'] = new Gym('Flannery', 'Lavaridge Town', [
    new GymPokemon('Numel', 372000, 24),
    new GymPokemon('Slugma', 372000, 24),
    new GymPokemon('Camerupt', 392000, 26),
    new GymPokemon('Torkoal', 424000, 28),
], BadgeTypes.Heat, 4000, 'Oh... I guess I was trying too hard... I... I\'ve only recently become a Gym Leader. I tried too hard to be someone I\'m not. I have to do things my natural way. If I don\'t, my Pokémon will be confused. Thanks for teaching me that. For that, you deserve this.', []);
gymList['Petalburg City'] = new Gym('Norman', 'Petalburg City', [
    new GymPokemon('Spinda', 390000, 27),
    new GymPokemon('Vigoroth', 430000, 30),
    new GymPokemon('Linoone', 460000, 29),
    new GymPokemon('Slaking', 496000, 31),
], BadgeTypes.Balance, 5000, '… I… I can\'t… I can\'t believe it. I lost to you? But, rules are rules! Here, take this.', [new GymBadgeRequirement(BadgeTypes.Heat)]);
gymList['Fortree City'] = new Gym('Winona', 'Fortree City', [
    new GymPokemon('Swablu', 405000, 29),
    new GymPokemon('Tropius', 450000, 29),
    new GymPokemon('Pelipper', 430000, 30),
    new GymPokemon('Skarmory', 467000, 32),
    new GymPokemon('Altaria', 469000, 33),
], BadgeTypes.Feather, 6000, 'Never before have I seen a Trainer command Pokémon with more grace than I... In recognition of your prowess, I present to you this Gym Badge.', []);
gymList['Mossdeep City'] = new Gym('Tate & Liza', 'Mossdeep City', [
    new GymPokemon('Xatu', 502000, 41),
    new GymPokemon('Claydol', 503000, 41),
    new GymPokemon('Lunatone', 502000, 42),
    new GymPokemon('Solrock', 503000, 42),
], BadgeTypes.Mind, 8000, 'What? Our combination... Was shattered! It can\'t be helped. You\'ve won... So, in recognition, take this Gym Badge.', []);
gymList['Sootopolis City'] = new Gym('Juan', 'Sootopolis City', [
    new GymPokemon('Luvdisc', 498000, 41),
    new GymPokemon('Whiscash', 513000, 41),
    new GymPokemon('Sealeo', 523400, 43),
    new GymPokemon('Crawdaunt', 542000, 43),
    new GymPokemon('Kingdra', 565000, 46),
], BadgeTypes.Rain, 10000, 'I realize now your authenticity and magnificence as a Pokémon Trainer. I find much joy in having met you and your Pokémon. You have proven yourself worthy of the Rain Badge. Accept it. Having that Badge assures you full obedience of all your Pokémon to every command you make.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Sky Pillar'))]);
// Hoenn Elite 4
gymList['Elite Sidney'] = new Gym('Sidney', 'Elite Sidney', [
    new GymPokemon('Mightyena', 572000, 46),
    new GymPokemon('Cacturne', 580000, 46),
    new GymPokemon('Shiftry', 602000, 48),
    new GymPokemon('Sharpedo', 615000, 48),
    new GymPokemon('Absol', 620000, 49),
], BadgeTypes.Elite_Sidney, 15000, 'Well, how do you like that? I lost! Eh, it was fun, so it doesn\'t matter.', [new GymBadgeRequirement(BadgeTypes.Rain)]);
gymList['Elite Phoebe'] = new Gym('Phoebe', 'Elite Phoebe', [
    new GymPokemon('Dusclops', 636700, 48),
    new GymPokemon('Banette', 638000, 49),
    new GymPokemon('Banette', 638000, 49),
    new GymPokemon('Sableye', 652000, 50),
    new GymPokemon('Dusclops', 663000, 51),
], BadgeTypes.Elite_Phoebe, 15000, 'Oh, darn. I\'ve gone and lost.', [new GymBadgeRequirement(BadgeTypes.Elite_Sidney)]);
gymList['Elite Glacia'] = new Gym('Glacia', 'Elite Glacia', [
    new GymPokemon('Glalie', 672000, 50),
    new GymPokemon('Sealeo', 682000, 50),
    new GymPokemon('Glalie', 676000, 52),
    new GymPokemon('Sealeo', 686000, 52),
    new GymPokemon('Walrein', 700000, 53),
], BadgeTypes.Elite_Glacia, 15000, 'You and your Pokémon... How hot your spirits burn! The all-consuming heat overwhelms. It\'s no surprise that my icy skills failed to harm you.', [new GymBadgeRequirement(BadgeTypes.Elite_Phoebe)]);
gymList['Elite Drake'] = new Gym('Drake', 'Elite Drake', [
    new GymPokemon('Shelgon', 664000, 52),
    new GymPokemon('Altaria', 672000, 54),
    new GymPokemon('Flygon', 676000, 53),
    new GymPokemon('Flygon', 676000, 53),
    new GymPokemon('Salamence', 757000, 55),
], BadgeTypes.Elite_Drake, 15000, 'You deserve every credit for coming this far as a Trainer of Pokémon. You do seem to know what is needed. Yes, what a Trainer needs is a virtuous heart. Pokémon touch the good hearts of Trainers and learn good from wrong. They touch the good hearts of Trainers and grow strong. Go! Go onwards! The Champion is waiting!', [new GymBadgeRequirement(BadgeTypes.Elite_Glacia)]);
gymList['Champion Wallace'] = new Gym('Wallace', 'Champion Wallace', [
    new GymPokemon('Wailord', 802000, 57),
    new GymPokemon('Tentacruel', 764000, 55),
    new GymPokemon('Ludicolo', 784000, 56),
    new GymPokemon('Whiscash', 772000, 56),
    new GymPokemon('Gyarados', 763000, 56),
    new GymPokemon('Milotic', 782000, 58),
], BadgeTypes.Elite_HoennChampion, 15000, 'I, the Champion, fall in defeat… That was wonderful work. You were elegant, infuriatingly so. And yet it was utterly glorious! Kudos to you! You are a truly noble Pokémon Trainer!', [new GymBadgeRequirement(BadgeTypes.Elite_Drake)], () => {
    App.game.quests.getQuestLine('Mystery of Deoxys').beginQuest();
});
//Sinnoh Gyms
gymList['Oreburgh City'] = new Gym('Roark', 'Oreburgh City', [
    new GymPokemon('Geodude', 938000, 12),
    new GymPokemon('Onix', 942000, 12),
    new GymPokemon('Cranidos', 942000, 14),
], BadgeTypes.Coal, 2500, 'This is embarrassing... I went and lost to a Trainer who didn\'t have a single Gym Badge... But that\'s tough. You were strong, and I was weak. That\'s all there is. According to Pokémon League rules, I have to give you our Gym Badge since you\'ve beaten me, the Leader. Heres your official Pokémon League Coal Badge.', [new GymBadgeRequirement(BadgeTypes.Elite_HoennChampion)]);
gymList['Eterna City'] = new Gym('Gardenia', 'Eterna City', [
    new GymPokemon('Turtwig', 1033000, 20),
    new GymPokemon('Cherrim (overcast)', 1037500, 20),
    new GymPokemon('Roserade', 1039000, 22),
], BadgeTypes.Forest, 5000, 'I might\'ve said it before, but you\'re really tough! Wasn\'t it hard for you to raise your Pokémon to be so good? I guess that\'s a measure of how much you love your Pokémon. In recognition of that, I proudly grant you this!"', [new GymBadgeRequirement(BadgeTypes.Coal)]);
gymList['Hearthome City'] = new Gym('Fantina', 'Hearthome City', [
    new GymPokemon('Duskull', 1050000, 24),
    new GymPokemon('Haunter', 1080000, 24),
    new GymPokemon('Mismagius', 1080000, 26),
], BadgeTypes.Relic, 10000, 'I am dumbfounded! So very, very strong! You, your Pokémon, so strong! Your power is admirable! I shall honor it with this Gym Badge!"', [new GymBadgeRequirement(BadgeTypes.Forest)]);
gymList['Veilstone City'] = new Gym('Maylene', 'Veilstone City', [
    new GymPokemon('Meditite', 1137000, 28),
    new GymPokemon('Machoke', 1138000, 29),
    new GymPokemon('Lucario', 1140000, 32),
], BadgeTypes.Cobble, 20000, '...OK. You win. That was a tough loss. I learned a lot from it. Please, accept this Gym Badge.', [new GymBadgeRequirement(BadgeTypes.Relic)]);
gymList['Pastoria City'] = new Gym('Crasher Wake', 'Pastoria City', [
    new GymPokemon('Gyarados', 1187000, 33),
    new GymPokemon('Quagsire', 1193000, 34),
    new GymPokemon('Floatzel', 1193000, 37),
], BadgeTypes.Fen, 40000, 'It seems the undertow pulled me under... But I had a great time battling with you! You\'ve earned this!', [new GymBadgeRequirement(BadgeTypes.Cobble)]);
gymList['Canalave City'] = new Gym('Byron', 'Canalave City', [
    new GymPokemon('Magneton', 1267000, 37),
    new GymPokemon('Steelix', 1272000, 38),
    new GymPokemon('Magnemite', 1268000, 41),
], BadgeTypes.Mine, 80000, 'You were strong enough to take down my prized team of Pokémon. In recognition of that power, I give you this: the Mine Badge!', [new GymBadgeRequirement(BadgeTypes.Fen)]);
gymList['Snowpoint City'] = new Gym('Candice', 'Snowpoint City', [
    new GymPokemon('Sneasel', 1372500, 40),
    new GymPokemon('Piloswine', 1376000, 40),
    new GymPokemon('Abomasnow', 1370000, 42),
    new GymPokemon('Froslass', 1370000, 44),
], BadgeTypes.Icicle, 16000, 'Wow! You\'re great! You\'ve earned my respect! I think your focus and will bowled us over totally. Oh, that\'s right! I\'m supposed to give you this!', [new GymBadgeRequirement(BadgeTypes.Mine)]);
gymList['Sunyshore City'] = new Gym('Volkner', 'Sunyshore City', [
    new GymPokemon('Jolteon', 1465000, 46),
    new GymPokemon('Raichu', 1465000, 46),
    new GymPokemon('Luxray', 1478000, 48),
    new GymPokemon('Electivire', 1480000, 50),
], BadgeTypes.Beacon, 32000, '...Hehehe. Hahahah! ...That was the most fun I\'ve had in a battle since...I don\'t know when! It\'s also made me excited to know you and your team will keep battling to greater heights! This is your eighth Gym Badge. You\'ve earned this!', [new GymBadgeRequirement(BadgeTypes.Icicle)]);
//Sinnoh Elite 4
gymList['Elite Aaron'] = new Gym('Aaron', 'Elite Aaron', [
    new GymPokemon('Yanmega', 1945330, 49),
    new GymPokemon('Scizor', 1948300, 49),
    new GymPokemon('Vespiquen', 1952000, 50),
    new GymPokemon('Heracross', 1957000, 51),
    new GymPokemon('Drapion', 1960250, 53),
], BadgeTypes.Elite_Aaron, 64000, 'I lost with the most beautiful and toughest of the bug Pokémon... We lost because I wasn\'t good enough... That\'s it! Back to training camp! Let\'s hear it for me! No... That was wrong... Anyway... Go on to the next room! Three Trainers are waiting for you. They are all tougher than me.', [new GymBadgeRequirement(BadgeTypes.Beacon)]);
gymList['Elite Bertha'] = new Gym('Bertha', 'Elite Bertha', [
    new GymPokemon('Whiscash', 2045330, 50),
    new GymPokemon('Gliscor', 2048300, 53),
    new GymPokemon('Golem', 2052000, 52),
    new GymPokemon('Rhyperior', 2057000, 52),
    new GymPokemon('Hippowdon', 2060250, 55),
], BadgeTypes.Elite_Bertha, 64000, 'You\'re quite something, youngster. I like how you and your Pokémon earned the win by working as one. That\'s what makes you so strong. Ahahaha! I think that you can go as far as you want.', [new GymBadgeRequirement(BadgeTypes.Elite_Aaron)]);
gymList['Elite Flint'] = new Gym('Flint', 'Elite Flint', [
    new GymPokemon('Houndoom', 2145330, 52),
    new GymPokemon('Flareon', 2148300, 55),
    new GymPokemon('Rapidash', 2152000, 53),
    new GymPokemon('Infernape', 2157000, 55),
    new GymPokemon('Magmortar', 2160250, 57),
], BadgeTypes.Elite_Flint, 64000, '...! I don\'t believe it! I lost! I didn\'t take you for granted. Bud I\'d never even considered it! I\'m blown away by this! You and your Pokémon are hot stuff!', [new GymBadgeRequirement(BadgeTypes.Elite_Bertha)]);
gymList['Elite Lucian'] = new Gym('Lucian', 'Elite Lucian', [
    new GymPokemon('Mr. Mime', 2248300, 53),
    new GymPokemon('Espeon', 2252000, 55),
    new GymPokemon('Bronzong', 2257000, 54),
    new GymPokemon('Alakazam', 2260250, 56),
    new GymPokemon('Gallade', 2266000, 59),
], BadgeTypes.Elite_Lucian, 64000, 'Congratulations. You have beaten the Elite Four. However, that doesn\'t mean you\'re done with the Pokémon league. There remains the Champion. I should warn you—the Champion is far stronger than the Elite Four. Now, go on. Step through the doorway to your final battle.', [new GymBadgeRequirement(BadgeTypes.Elite_Flint)]);
gymList['Champion Cynthia'] = new Gym('Cynthia', 'Champion Cynthia', [
    new GymPokemon('Spiritomb', 2458300, 58),
    new GymPokemon('Roserade', 2462000, 58),
    new GymPokemon('Togekiss', 2464000, 58),
    new GymPokemon('Lucario', 2460250, 60),
    new GymPokemon('Milotic', 2470000, 58),
    new GymPokemon('Garchomp', 2570000, 62),
], BadgeTypes.Elite_SinnohChampion, 128000, 'That was excellent. Truly, an outstanding battle. You gave the support your Pokémon needed to maximize their power. And you guided them with certainty to secure victory. You have both passion and calculating coolness. Together, you and your Pokémon can overcome any challenge that may come your way. Those are the impressions I got from our battle. I\'m glad I got to take part in the crowning of Sinnoh\'s new Champion! Come with me. We\'ll take the lift.', [new GymBadgeRequirement(BadgeTypes.Elite_Lucian)]);
//Unova Gyms
//TODO: Balancing of gym Pokemon HP & rewards.
gymList['Aspertia City'] = new Gym('Cheren', 'Aspertia City', [
    new GymPokemon('Patrat', 2458300, 58),
    new GymPokemon('Pidove', 2462000, 58),
    new GymPokemon('Lillipup', 2464000, 58),
], BadgeTypes.Basic, 128000, 'That battle has made me feel really glad you were my first challenger as a Gym Leader… I give you this in honor of the strength you and your Pokémon showed!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Floccesy Ranch'))]);
gymList['Virbank City'] = new Gym('Roxie', 'Virbank City', [
    new GymPokemon('Koffing', 2458300, 58),
    new GymPokemon('Grimer', 2462000, 58),
    new GymPokemon('Whirlipede', 2464000, 58),
], BadgeTypes.Toxic, 128000, 'Sigh! What are you doing losing, Roxie?! Well…I guess that means you\'re strong! This stinks, but I gave it everything I had, and I feel revitalized and refreshed now! Here! Proof that you beat me!', [new GymBadgeRequirement(BadgeTypes.Basic)]);
gymList['Castelia City'] = new Gym('Burgh', 'Castelia City', [
    new GymPokemon('Dwebble', 2458300, 58),
    new GymPokemon('Shelmet', 2462000, 58),
    new GymPokemon('Karrablast', 2464000, 58),
    new GymPokemon('Leavanny', 2464000, 58),
], BadgeTypes.Insect, 128000, 'Oh hoo… You are very strong indeed! I guess it\'s no surprise I lost. Here! Take this Insect Badge! I think it\'ll suit you!', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Castelia Sewers'))]);
gymList['Nimbasa City'] = new Gym('Elesa', 'Nimbasa City', [
    new GymPokemon('Emolga', 2458300, 58),
    new GymPokemon('Flaaffy', 2462000, 58),
    new GymPokemon('Joltik', 2464000, 58),
    new GymPokemon('Zebstrika', 2464000, 58),
], BadgeTypes.Bolt, 128000, 'Well… Now you… you\'re an even more wonderful Trainer than I expected. Your sweet fighting style swept me off my feet! Take this!', [new GymBadgeRequirement(BadgeTypes.Insect)]);
gymList['Driftveil City'] = new Gym('Clay', 'Driftveil City', [
    new GymPokemon('Krokorok', 2458300, 58),
    new GymPokemon('Sandslash', 2462000, 58),
    new GymPokemon('Onix', 2464000, 58),
    new GymPokemon('Excadrill', 2464000, 58),
], BadgeTypes.Quake, 128000, 'Phew… You\'re really somethin\'! Li\'l whippersnapper Trainers who pack a real punch keep showin\' up one after another. Mrmph. Here! Take this!', [new GymBadgeRequirement(BadgeTypes.Bolt)]);
gymList['Mistralton City'] = new Gym('Skyla', 'Mistralton City', [
    new GymPokemon('Swoobat', 2458300, 58),
    new GymPokemon('Skarmory', 2462000, 58),
    new GymPokemon('Sigilyph', 2464000, 58),
    new GymPokemon('Swanna', 2464000, 58),
], BadgeTypes.Jet, 128000, 'You\'re an amazing Pokémon Trainer. My Pokémon and I are happy because for the first time in quite a while--about two years, I\'d say--we could fight with our full strength. This is an official League Gym Badge. But this is just a stepping-stone.', [new GymBadgeRequirement(BadgeTypes.Quake)]);
gymList['Opelucid City'] = new Gym('Drayden', 'Opelucid City', [
    new GymPokemon('Druddigon', 2458300, 58),
    new GymPokemon('Flygon', 2462000, 58),
    new GymPokemon('Altaria', 2464000, 58),
    new GymPokemon('Haxorus', 2464000, 58),
], BadgeTypes.Legend, 128000, 'Wonderful. I\'m grateful that we had a chance to meet and battle. It reminded me that Pokémon battles are about working with others to meet our challenges together.', [new GymBadgeRequirement(BadgeTypes.Jet)]);
gymList['Humilau City'] = new Gym('Marlon', 'Humilau City', [
    new GymPokemon('Wailord', 2458300, 58),
    new GymPokemon('Mantine', 2462000, 58),
    new GymPokemon('Carracosta', 2464000, 58),
    new GymPokemon('Jellicent', 2464000, 58),
], BadgeTypes.Wave, 128000, 'You don\'t just look strong, you\'re strong fo\' reals! Eh, I was swept away, too! Oh yeah, yo. I was so surprised that I forgot! I gotta give this to you!', [new GymBadgeRequirement(BadgeTypes.Legend)]);
//Unova Elite 4
//TODO: Balancing of elite Pokemon HP & rewards.
gymList['Elite Shauntal'] = new Gym('Shauntal', 'Elite Shauntal', [
    new GymPokemon('Cofagrigus', 1945330, 49),
    new GymPokemon('Gengar', 1948300, 49),
    new GymPokemon('Froslass', 1952000, 50),
    new GymPokemon('Drifblim', 1957000, 51),
    new GymPokemon('Golurk', 1960250, 53),
    new GymPokemon('Chandelure', 1960250, 53),
], BadgeTypes.Elite_Shauntal, 64000, 'My Pokémon and the challenger\'s Pokémon. Everyone battled even though they were hurt... Thank you.', [new GymBadgeRequirement(BadgeTypes.Wave)]);
gymList['Elite Marshal'] = new Gym('Marshal', 'Elite Marshal', [
    new GymPokemon('Throh', 1945330, 49),
    new GymPokemon('Sawk', 1948300, 49),
    new GymPokemon('Lucario', 1952000, 50),
    new GymPokemon('Mienshao', 1957000, 51),
    new GymPokemon('Machamp', 1957000, 51),
    new GymPokemon('Conkeldurr', 1960250, 53),
], BadgeTypes.Elite_Marshal, 64000, 'Whew! Well done! As your battles continue, aim for even greater heights!', [new GymBadgeRequirement(BadgeTypes.Elite_Shauntal)]);
gymList['Elite Grimsley'] = new Gym('Grimsley', 'Elite Grimsley', [
    new GymPokemon('Honchkrow', 1945330, 49),
    new GymPokemon('Scrafty', 1948300, 49),
    new GymPokemon('Krookodile', 1952000, 50),
    new GymPokemon('Houndoom', 1957000, 51),
    new GymPokemon('Tyranitar', 1957000, 51),
    new GymPokemon('Bisharp', 1960250, 53),
], BadgeTypes.Elite_Grimsley, 64000, 'Whether or not you get to fight at full strength, whether or not luck smiles on you--none of that matters. Only results matter. And a loss is a loss. See, victory shines like a bright light. And right now, you and your Pokémon are shining brilliantly.', [new GymBadgeRequirement(BadgeTypes.Elite_Marshal)]);
gymList['Elite Caitlin'] = new Gym('Caitlin', 'Elite Caitlin', [
    new GymPokemon('Musharna', 1945330, 49),
    new GymPokemon('Alakazam', 1948300, 49),
    new GymPokemon('Gothitelle', 1957000, 51),
    new GymPokemon('Gallade', 1957000, 51),
    new GymPokemon('Reuniclus', 1952000, 50),
    new GymPokemon('Metagross', 1960250, 53),
], BadgeTypes.Elite_Caitlin, 64000, 'You and your Pokémon are both excellent and elegant. To have been able to battle against such a splendid team... My Pokémon and I learned a lot! I offer you my thanks', [new GymBadgeRequirement(BadgeTypes.Elite_Grimsley)]);
gymList['Champion Iris'] = new Gym('Iris', 'Champion Iris', [
    new GymPokemon('Hydreigon', 2458300, 58),
    new GymPokemon('Salamence', 2462000, 58),
    new GymPokemon('Aggron', 2464000, 58),
    new GymPokemon('Archeops', 2460250, 60),
    new GymPokemon('Lapras', 2470000, 58),
    new GymPokemon('Haxorus', 2570000, 62),
], BadgeTypes.Elite_UnovaChampion, 128000, 'I\'m upset I couldn\'t win! But you know what? More than that, I\'m happy! I mean, come on. By having a serious battle, you and your Pokémon, and me and my Pokémon, we all got to know one another better than before! Yep, we sure did! OK, let\'s go!', [new GymBadgeRequirement(BadgeTypes.Elite_Caitlin)]);
//Kalos Gyms
//TODO: Balancing of gym Pokemon HP & rewards.
gymList['Santalune City'] = new Gym('Viola', 'Santalune City', [
    new GymPokemon('Surskit', 2458300, 58),
    new GymPokemon('Vivillon', 2462000, 58),
], BadgeTypes.Bug, 128000, 'Young Trainer, you... No, it wasn\'t you alone. You and your <Pokémon> have shown me a whole new depth of field! Fantastic! Just fantastic!', [new RouteKillRequirement(10, 3)]);
gymList['Cyllage City'] = new Gym('Grant', 'Cyllage City', [
    new GymPokemon('Amaura', 2458300, 58),
    new GymPokemon('Tyrunt', 2462000, 58),
], BadgeTypes.Cliff, 128000, 'There are some things that seem out of reach no matter how hard you try. However, it\'s important that you never give up--no matter the opponent or the odds. I could tell from our battle that you and your Pokémon understand that. To commemorate such an impressive show of teamwork, please accept the Cliff Badge!', [new GymBadgeRequirement(BadgeTypes.Bug)]);
gymList['Shalour City'] = new Gym('Korrina', 'Shalour City', [
    new GymPokemon('Mienfoo', 2458300, 58),
    new GymPokemon('Machoke', 2462000, 58),
    new GymPokemon('Hawlucha', 2462000, 58),
], BadgeTypes.Rumble, 128000, 'Oh! I have been defeated! Alack, alay! Lady Korrina gave a terrible display! This is it. I must give up my title and admit that your strength far exceeds-- Just teasing! But here\'s your Badge. Boy, you\'ll be rolling in \'em soon!', [new GymBadgeRequirement(BadgeTypes.Cliff)]);
gymList['Coumarine City'] = new Gym('Ramos', 'Coumarine City', [
    new GymPokemon('Jumpluff', 2458300, 58),
    new GymPokemon('Weepinbell', 2462000, 58),
    new GymPokemon('Gogoat', 2462000, 58),
], BadgeTypes.Plant, 128000, 'Yeh believe in yer Pokémon... And they believe in yeh, too... Mighty oaks from acorns grow. Go on, then. Yeh\'ve earned it. Here\'s yer own Plant Badge, sprout.', [new GymBadgeRequirement(BadgeTypes.Rumble)]);
gymList['Lumiose City'] = new Gym('Clemont', 'Lumiose City', [
    new GymPokemon('Emolga', 2458300, 58),
    new GymPokemon('Magneton', 2462000, 58),
    new GymPokemon('Heliolisk', 2462000, 58),
], BadgeTypes.Voltage, 128000, 'Oh, Bonnie... When will you learn there\'s no shame in losing? I\'m glad whenever I get to learn something new thanks to strong challengers like you here.', [new RouteKillRequirement(10, 13), new GymBadgeRequirement(BadgeTypes.Plant)]);
//Replace req with Kalos Power Plant dungeon if implemented.
gymList['Laverre City'] = new Gym('Valerie', 'Laverre City', [
    new GymPokemon('Mawile', 2458300, 58),
    new GymPokemon('Mr. Mime', 2462000, 58),
    new GymPokemon('Sylveon', 2462000, 58),
], BadgeTypes.Fairy, 128000, 'Yes... That was a fine battle. I shall reward you for this great victory. This is the Fairy Badge. It is yours now. Its beauty is captivating, is it not? ... ... ... ... ... ... Ah... Do forgive me. I was so captivated, I forgot for a moment that it is yours.', [new GymBadgeRequirement(BadgeTypes.Voltage)]);
gymList['Anistar City'] = new Gym('Olympia', 'Anistar City', [
    new GymPokemon('Sigilyph', 2458300, 58),
    new GymPokemon('Slowking', 2462000, 58),
    new GymPokemon('Meowstic', 2462000, 58),
], BadgeTypes.Psychic, 128000, 'Now, the Psychic Badge. A testament to your skill. Proof of your power.', [new GymBadgeRequirement(BadgeTypes.Fairy)]);
gymList['Snowbelle City'] = new Gym('Wulfric', 'Snowbelle City', [
    new GymPokemon('Abomasnow', 2458300, 58),
    new GymPokemon('Cryogonal', 2462000, 58),
    new GymPokemon('Avalugg', 2462000, 58),
], BadgeTypes.Iceberg, 128000, 'Impressive! Your Pokémon fought with great courage. I can tell that you\'ve trained your Pokémon well.', [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokémon Village'))]);
//Kalos Elite 4
//TODO: Balancing of elite Pokemon HP & rewards.
gymList['Elite Malva'] = new Gym('Malva', 'Elite Malva', [
    new GymPokemon('Pyroar', 1945330, 49),
    new GymPokemon('Torkoal', 1948300, 49),
    new GymPokemon('Chandelure', 1952000, 50),
    new GymPokemon('Talonflame', 1957000, 51),
], BadgeTypes.Elite_Malva, 64000, 'What news... So a new challenger has defeated Malva of the Elite Four!', [new GymBadgeRequirement(BadgeTypes.Iceberg)]);
gymList['Elite Siebold'] = new Gym('Siebold', 'Elite Siebold', [
    new GymPokemon('Clawitzer', 1945330, 49),
    new GymPokemon('Gyarados', 1948300, 49),
    new GymPokemon('Starmie', 1952000, 50),
    new GymPokemon('Barbaracle', 1957000, 51),
], BadgeTypes.Elite_Siebold, 64000, 'I shall store my memory of you and your Pokémon forever away within my heart.', [new GymBadgeRequirement(BadgeTypes.Elite_Malva)]);
gymList['Elite Wikstrom'] = new Gym('Wikstrom', 'Elite Wikstrom', [
    new GymPokemon('Klefki', 1945330, 49),
    new GymPokemon('Probopass', 1948300, 49),
    new GymPokemon('Scizor', 1952000, 50),
    new GymPokemon('Aegislash', 1957000, 51),
], BadgeTypes.Elite_Wikstrom, 64000, 'Glorious! The trust that you share with your honorable Pokémon surpasses even mine!', [new GymBadgeRequirement(BadgeTypes.Elite_Siebold)]);
gymList['Elite Drasna'] = new Gym('Drasna', 'Elite Drasna', [
    new GymPokemon('Dragalge', 1945330, 49),
    new GymPokemon('Druddigon', 1948300, 49),
    new GymPokemon('Altaria', 1952000, 50),
    new GymPokemon('Noivern', 1957000, 51),
], BadgeTypes.Elite_Drasna, 64000, 'Oh, dear me. That sure was a quick battle... I do hope you\'ll come back again sometime!', [new GymBadgeRequirement(BadgeTypes.Elite_Wikstrom)]);
gymList['Champion Diantha'] = new Gym('Diantha', 'Champion Diantha', [
    new GymPokemon('Hawlucha', 2458300, 58),
    new GymPokemon('Tyrantrum', 2462000, 58),
    new GymPokemon('Aurorus', 2464000, 58),
    new GymPokemon('Gourgeist', 2460250, 60),
    new GymPokemon('Goodra', 2470000, 58),
    new GymPokemon('Gardevoir', 2570000, 62),
], BadgeTypes.Elite_KalosChampion, 128000, 'Witnessing the noble spirits of you and your Pokémon in battle has really touched my heart...', [new GymBadgeRequirement(BadgeTypes.Elite_Drasna)]);
///<reference path="Gym.ts"/>
///<reference path="../badgeCase/BadgeTypes.ts"/>
class Champion extends Gym {
    constructor(leaderName, town, pokemons, badgeReward, moneyReward, rewardMessage, requirements = []) {
        super(leaderName, town, pokemons, badgeReward, moneyReward, rewardMessage, requirements);
    }
    setPokemon(starter) {
        this.pokemons = [
            new GymPokemon('Pidgeot', 52340, 59),
            new GymPokemon('Alakazam', 56320, 57),
            new GymPokemon('Rhydon', 58340, 59),
        ];
        switch (starter) {
            case GameConstants.Starter.Bulbasaur: {
                this.pokemons.push(new GymPokemon('Exeggutor', 57520, 59));
                this.pokemons.push(new GymPokemon('Gyarados', 63040, 61));
                this.pokemons.push(new GymPokemon('Charizard', 70000, 63));
                break;
            }
            case GameConstants.Starter.Charmander: {
                this.pokemons.push(new GymPokemon('Arcanine', 65340, 59));
                this.pokemons.push(new GymPokemon('Exeggutor', 57520, 61));
                this.pokemons.push(new GymPokemon('Blastoise', 70000, 63));
                break;
            }
            case GameConstants.Starter.Squirtle:
            default: {
                this.pokemons.push(new GymPokemon('Gyarados', 63040, 59));
                this.pokemons.push(new GymPokemon('Arcanine', 65340, 61));
                this.pokemons.push(new GymPokemon('Venusaur', 70000, 63));
                break;
            }
        }
    }
}
gymList['Champion Blue'] = new Champion('Blue', 'Champion Blue', [], BadgeTypes.Elite_KantoChampion, 10000, 'Why? Why did I lose? I never made any mistakes raising my Pokémon… Darn it! You\'re the new Pokémon League Champion! Although I don\'t like to admit it…', [new GymBadgeRequirement(BadgeTypes.Elite_Lance)]);
///<reference path="../Battle.ts"/>
class GymBattle extends Battle {
    /**
     * Award the player with exp, and go to the next pokemon
     */
    static defeatPokemon() {
        this.enemyPokemon().defeat(true);
        // Make gym "route" regionless
        App.game.breeding.progressEggsBattle(this.gym.badgeReward * 3 + 1, GameConstants.Region.none);
        this.index(this.index() + 1);
        if (this.index() >= this.gym.pokemons.length) {
            GymRunner.gymWon(this.gym);
        }
        else {
            this.generateNewEnemy();
        }
    }
    /**
     * Reset the counter.
     */
    static generateNewEnemy() {
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateTrainerPokemon(this.gym.town, this.index()));
    }
}
GymBattle.index = ko.observable(0);
GymBattle.totalPokemons = ko.observable(0);
GymBattle.pokemonsDefeatedComputable = ko.pureComputed(function () {
    return GymBattle.index();
});
GymBattle.pokemonsUndefeatedComputable = ko.pureComputed(function () {
    return GymBattle.totalPokemons() - GymBattle.index();
});
///<reference path="../badgeCase/BadgeTypes.ts"/>
class GymRunner {
    static startGym(gym) {
        var _a;
        this.started = false;
        this.gymObservable(gym);
        if (Gym.isUnlocked(gym)) {
            if (gym instanceof Champion) {
                gym.setPokemon(player.starter);
            }
            App.game.gameState = GameConstants.GameState.idle;
            GymRunner.timeLeft(GameConstants.GYM_TIME);
            GymRunner.timeLeftPercentage(100);
            GymBattle.gym = gym;
            GymBattle.totalPokemons(gym.pokemons.length);
            GymBattle.index(0);
            GymBattle.generateNewEnemy();
            App.game.gameState = GameConstants.GameState.gym;
            this.resetGif();
            setTimeout(() => {
                this.started = true;
                this.hideGif();
            }, GameConstants.GYM_COUNTDOWN);
        }
        else {
            const reqsList = [];
            (_a = gym.requirements) === null || _a === void 0 ? void 0 : _a.forEach(requirement => {
                if (!requirement.isCompleted()) {
                    reqsList.push(requirement.hint());
                }
            });
            Notifier.notify({
                message: `You don't have access to ${gym.leaderName}s Gym yet.<br/>${reqsList.join('<br/>')}`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static hideGif() {
        $('#gymCountdownView').fadeOut(300);
        $('#gymGo').hide();
    }
    static resetGif() {
        const $img = $('#gymGo');
        $img.show();
        setTimeout(function () {
            $img.attr('src', 'assets/gifs/go.gif');
        }, 0);
    }
    static tick() {
        if (!this.started) {
            return;
        }
        if (this.timeLeft() < 0) {
            GymRunner.gymLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.GYM_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / GameConstants.GYM_TIME * 100));
    }
    static gymLost() {
        Notifier.notify({
            message: `It appears you are not strong enough to defeat ${GymBattle.gym.leaderName}`,
            type: NotificationConstants.NotificationOption.danger,
        });
        App.game.gameState = GameConstants.GameState.town;
    }
    static gymWon(gym) {
        Notifier.notify({
            message: `Congratulations, you defeated ${GymBattle.gym.leaderName}!`,
            type: NotificationConstants.NotificationOption.success,
            setting: NotificationConstants.NotificationSetting.gym_won,
        });
        this.gymObservable(gym);
        App.game.wallet.gainMoney(gym.moneyReward);
        // If this is the first time defeating this gym
        if (!App.game.badgeCase.hasBadge(gym.badgeReward)) {
            gym.firstWinReward();
        }
        GameHelper.incrementObservable(App.game.statistics.gymsDefeated[GameConstants.getGymIndex(gym.town)]);
        player.town(TownList[gym.town]);
        App.game.gameState = GameConstants.GameState.town;
    }
}
GymRunner.timeLeft = ko.observable(GameConstants.GYM_TIME);
GymRunner.timeLeftPercentage = ko.observable(100);
GymRunner.gymObservable = ko.observable(gymList['Pewter City']);
GymRunner.timeLeftSeconds = ko.pureComputed(function () {
    return (Math.ceil(GymRunner.timeLeft() / 10) / 10).toFixed(1);
});
document.addEventListener('DOMContentLoaded', function (event) {
    $('#receiveBadgeModal').on('hidden.bs.modal', function () {
        if (GymBattle.gym.badgeReward == BadgeTypes.Soul) {
            App.game.keyItems.gainKeyItem(KeyItems.KeyItem.Safari_ticket);
        }
        if (GymBattle.gym.badgeReward == BadgeTypes.Earth) {
            App.game.keyItems.gainKeyItem(KeyItems.KeyItem.Shard_case);
        }
    });
});
class Shop {
    constructor(items) {
        this.items = ko.observableArray(items);
    }
}
///<reference path="Shop.ts"/>
class ShopHandler {
    static showShop(shop) {
        this.setSelected(0);
        this.resetAmount();
        this.shopObservable(shop);
        shop.items().forEach(item => {
            item.price(Math.round(item.basePrice * (player.itemMultipliers[item.saveName] || 1)));
        });
    }
    static setSelected(i) {
        this.selected(i);
    }
    static buyItem() {
        const item = this.shopObservable().items()[ShopHandler.selected()];
        item.buy(this.amount());
        ShopHandler.resetAmount();
    }
    static resetAmount() {
        const input = $("input[name='amountOfItems']");
        input.val(1).change();
    }
    static increaseAmount(n) {
        const input = $("input[name='amountOfItems']");
        const newVal = (parseInt(input.val().toString(), 10) || 0) + n;
        input.val(newVal > 1 ? newVal : 1).change();
    }
    static multiplyAmount(n) {
        const input = $("input[name='amountOfItems']");
        const newVal = (parseInt(input.val().toString(), 10) || 0) * n;
        input.val(newVal > 1 ? newVal : 1).change();
    }
    static maxAmount(n) {
        const item = this.shopObservable().items()[ShopHandler.selected()];
        const input = $("input[name='amountOfItems']");
        if (!item || !item.isAvailable()) {
            return input.val(0).change();
        }
        let amt = 1;
        for (amt; App.game.wallet.hasAmount(new Amount(item.totalPrice(amt), item.currency)) && amt <= item.maxAmount && amt <= 1e6; amt++) { }
        input.val(--amt).change();
    }
    static calculateCss(i) {
        if (this.selected() == i) {
            return 'shopItem clickable btn btn-secondary active';
        }
        else {
            return 'shopItem clickable btn btn-secondary';
        }
    }
    static calculateButtonCss() {
        const item = this.shopObservable().items()[ShopHandler.selected()];
        if (item && !(item.isAvailable() && App.game.wallet.hasAmount(new Amount(item.totalPrice(this.amount()), item.currency)))
            || this.amount() < 1) {
            return 'btn btn-danger smallButton smallFont';
        }
        else {
            return 'btn btn-success smallButton smallFont';
        }
    }
}
ShopHandler.shopObservable = ko.observable(new Shop([]));
ShopHandler.selected = ko.observable(0);
ShopHandler.amount = ko.observable(1);
///<reference path="../shop/ShopHandler.ts"/>
class Item {
    constructor(name, basePrice, currency = GameConstants.Currency.money, { saveName = '', maxAmount = Number.MAX_SAFE_INTEGER, multiplier = GameConstants.ITEM_PRICE_MULTIPLIER, multiplierDecrease = true, } = {
        saveName: '',
        maxAmount: Number.MAX_SAFE_INTEGER,
        multiplier: GameConstants.ITEM_PRICE_MULTIPLIER,
        multiplierDecrease: true,
    }) {
        this.name = ko.observable(name);
        this.basePrice = basePrice;
        this.currency = currency;
        this.price = ko.observable(this.basePrice);
        // If no custom save name specified, default to item name
        this.saveName = saveName || name || `${name}|${GameConstants.Currency[currency]}`;
        this.maxAmount = maxAmount;
        // Multiplier needs to be above 1
        this.multiplier = Math.max(1, multiplier);
        this.multiplierDecrease = multiplierDecrease;
        if (!ItemList[this.saveName]) {
            ItemList[this.saveName] = this;
        }
    }
    totalPrice(amount) {
        if (this.name() == GameConstants.Pokeball[GameConstants.Pokeball.Pokeball]) {
            return Math.max(0, this.basePrice * amount);
        }
        else {
            const res = (this.price() * (1 - Math.pow(this.multiplier, amount))) / (1 - this.multiplier);
            return Math.max(0, Math.floor(res));
        }
    }
    buy(n) {
        if (n <= 0) {
            return;
        }
        if (n > this.maxAmount) {
            Notifier.notify({
                message: `You can only buy ${this.maxAmount} &times; ${GameConstants.humanifyString(this.name())}!`,
                type: NotificationConstants.NotificationOption.danger,
            });
            n = this.maxAmount;
        }
        if (!this.isAvailable()) {
            Notifier.notify({
                message: `${GameConstants.humanifyString(this.name())} is sold out!`,
                type: NotificationConstants.NotificationOption.danger,
            });
            return;
        }
        const multiple = n > 1 ? 's' : '';
        if (App.game.wallet.hasAmount(new Amount(this.totalPrice(n), this.currency))) {
            App.game.wallet.loseAmount(new Amount(this.totalPrice(n), this.currency));
            this.gain(n);
            this.increasePriceMultiplier(n);
            Notifier.notify({
                message: `You bought ${n} ${GameConstants.humanifyString(this.name())}${multiple}`,
                type: NotificationConstants.NotificationOption.success,
            });
        }
        else {
            let curr = GameConstants.camelCaseToString(GameConstants.Currency[this.currency]);
            switch (this.currency) {
                case GameConstants.Currency.money:
                    break;
                default:
                    curr += 's';
                    break;
            }
            Notifier.notify({
                message: `You don't have enough ${curr} to buy ${n} ${GameConstants.humanifyString(this.name()) + multiple}`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    gain(n) {
        player.gainItem(this.name(), n);
    }
    isAvailable() {
        return true;
    }
    increasePriceMultiplier(n = 1) {
        player.itemMultipliers[this.saveName] = Math.min(100, (player.itemMultipliers[this.saveName] || 1) * Math.pow(this.multiplier, n));
        this.price(Math.round(this.basePrice * player.itemMultipliers[this.saveName]));
    }
    decreasePriceMultiplier(n = 1) {
        if (!this.multiplierDecrease) {
            return;
        }
        player.itemMultipliers[this.saveName] = Math.max(1, (player.itemMultipliers[this.saveName] || 1) / Math.pow(this.multiplier, n));
        this.price(Math.round(this.basePrice * player.itemMultipliers[this.saveName]));
    }
}
const ItemList = {};
///<reference path="Item.ts"/>
class BattleItem extends Item {
    constructor(type, description, basePrice, currency = GameConstants.Currency.money) {
        super(GameConstants.BattleItemType[type], basePrice, currency);
        this.type = type;
        this.description = description;
    }
    use() {
        EffectEngineRunner.addEffect(this.name(), ItemHandler.amountToUse);
    }
}
ItemList['xAttack'] = new BattleItem(GameConstants.BattleItemType.xAttack, '+50% Bonus to Pokémon attack', 600);
ItemList['xClick'] = new BattleItem(GameConstants.BattleItemType.xClick, '+50% Bonus to click attack', 400);
ItemList['Lucky_egg'] = new BattleItem(GameConstants.BattleItemType.Lucky_egg, '+50% Bonus to experience gained', 800);
ItemList['Token_collector'] = new BattleItem(GameConstants.BattleItemType.Token_collector, '+50% Bonus to dungeon tokens gained', 1000);
ItemList['Item_magnet'] = new BattleItem(GameConstants.BattleItemType.Item_magnet, '+50% Chance of gaining an extra item', 1500);
ItemList['Lucky_incense'] = new BattleItem(GameConstants.BattleItemType.Lucky_incense, '+50% Bonus to money gained', 2000);
class CaughtIndicatingItem extends Item {
}
/// <reference path="CaughtIndicatingItem.ts" />
class EggItem extends CaughtIndicatingItem {
    constructor(type, basePrice, currency = GameConstants.Currency.questPoint) {
        super(GameConstants.EggItemType[type], basePrice, currency);
        this.type = type;
    }
    use() {
        if (player.itemList[this.name()]() <= 0) {
            return;
        }
        let success;
        if (this.type === GameConstants.EggItemType.Pokemon_egg) {
            success = App.game.breeding.gainPokemonEgg(pokemonMap.random(GameConstants.TotalPokemonsPerRegion[player.highestRegion()]));
        }
        else if (this.type === GameConstants.EggItemType.Mystery_egg) {
            success = App.game.breeding.gainRandomEgg();
        }
        else {
            const etype = EggType[GameConstants.EggItemType[this.type].split('_')[0]];
            success = App.game.breeding.gainEgg(App.game.breeding.createTypedEgg(etype));
        }
        if (success) {
            player.loseItem(this.name(), 1);
        }
    }
    getCaughtStatus() {
        switch (this.type) {
            case (GameConstants.EggItemType.Pokemon_egg): {
                // random pokemon
                return CaughtStatus.NotCaught;
            }
            case (GameConstants.EggItemType.Mystery_egg): {
                return App.game.breeding.getAllCaughtStatus();
            }
            default: {
                const etype = EggType[GameConstants.EggItemType[this.type].split('_')[0]];
                return App.game.breeding.getTypeCaughtStatus(etype);
            }
        }
    }
}
ItemList['Fire_egg'] = new EggItem(GameConstants.EggItemType.Fire_egg, 1000);
ItemList['Water_egg'] = new EggItem(GameConstants.EggItemType.Water_egg, 1000);
ItemList['Grass_egg'] = new EggItem(GameConstants.EggItemType.Grass_egg, 1000);
ItemList['Fighting_egg'] = new EggItem(GameConstants.EggItemType.Fighting_egg, 1000);
ItemList['Electric_egg'] = new EggItem(GameConstants.EggItemType.Electric_egg, 1000);
ItemList['Dragon_egg'] = new EggItem(GameConstants.EggItemType.Dragon_egg, 1000);
ItemList['Pokemon_egg'] = new EggItem(GameConstants.EggItemType.Pokemon_egg, 1000);
ItemList['Mystery_egg'] = new EggItem(GameConstants.EggItemType.Mystery_egg, 700);
///<reference path="Item.ts"/>
class EnergyRestore extends Item {
    constructor(type, basePrice, currency = GameConstants.Currency.money) {
        super(GameConstants.EnergyRestoreSize[type], basePrice, currency);
        this.type = type;
    }
    use() {
        if (player.itemList[this.name()]() <= 0) {
            return;
        }
        if (Underground.energy === Underground.getMaxEnergy()) {
            Notifier.notify({
                message: 'Your mining energy is already full!',
                type: NotificationConstants.NotificationOption.danger,
            });
            return;
        }
        Underground.gainEnergyThroughItem(this.type);
        player.loseItem(this.name(), 1);
    }
}
ItemList['SmallRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.SmallRestore, 20000);
ItemList['MediumRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.MediumRestore, 40000);
ItemList['LargeRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.LargeRestore, 100000);
///<reference path="Item.ts"/>
class EvolutionStone extends Item {
    constructor(type, basePrice, currency = GameConstants.Currency.questPoint) {
        super(GameConstants.StoneType[type], basePrice, currency);
        this.type = type;
    }
    gain(n) {
        player.gainItem(GameConstants.StoneType[this.type], n);
    }
    use(pokemon) {
        const partyPokemon = App.game.party.getPokemon(PokemonHelper.getPokemonByName(pokemon).id);
        const shiny = partyPokemon.useStone(this.type);
        return shiny;
    }
}
// TODO: Set prices for different kinds of stones
ItemList['Fire_stone'] = new EvolutionStone(GameConstants.StoneType.Fire_stone, 2500);
ItemList['Water_stone'] = new EvolutionStone(GameConstants.StoneType.Water_stone, 2500);
ItemList['Thunder_stone'] = new EvolutionStone(GameConstants.StoneType.Thunder_stone, 2500);
ItemList['Leaf_stone'] = new EvolutionStone(GameConstants.StoneType.Leaf_stone, 2500);
ItemList['Moon_stone'] = new EvolutionStone(GameConstants.StoneType.Moon_stone, 2500);
ItemList['Sun_stone'] = new EvolutionStone(GameConstants.StoneType.Sun_stone, 2500);
ItemList['Trade_stone'] = new EvolutionStone(GameConstants.StoneType.Trade_stone, 2500);
ItemList['Dragon_scale'] = new EvolutionStone(GameConstants.StoneType.Dragon_scale, 2500);
ItemList['Metal_coat'] = new EvolutionStone(GameConstants.StoneType.Metal_coat, 2500);
ItemList['Kings_rock'] = new EvolutionStone(GameConstants.StoneType.Kings_rock, 2500);
ItemList['Upgrade'] = new EvolutionStone(GameConstants.StoneType.Upgrade, 2500);
ItemList['Soothe_bell'] = new EvolutionStone(GameConstants.StoneType.Soothe_bell, 2500);
ItemList['Deepsea_tooth'] = new EvolutionStone(GameConstants.StoneType.Deepsea_tooth, 2500);
ItemList['Deepsea_scale'] = new EvolutionStone(GameConstants.StoneType.Deepsea_scale, 2500);
ItemList['Dawn_stone'] = new EvolutionStone(GameConstants.StoneType.Dawn_stone, 2500);
ItemList['Dusk_stone'] = new EvolutionStone(GameConstants.StoneType.Dusk_stone, 2500);
ItemList['Shiny_stone'] = new EvolutionStone(GameConstants.StoneType.Shiny_stone, 2500);
ItemList['Dubious_disc'] = new EvolutionStone(GameConstants.StoneType.Dubious_disc, 2500);
ItemList['Electirizer'] = new EvolutionStone(GameConstants.StoneType.Electirizer, 2500);
ItemList['Magmarizer'] = new EvolutionStone(GameConstants.StoneType.Magmarizer, 2500);
ItemList['Protector'] = new EvolutionStone(GameConstants.StoneType.Protector, 2500);
ItemList['Reaper_cloth'] = new EvolutionStone(GameConstants.StoneType.Reaper_cloth, 2500);
ItemList['Razor_claw'] = new EvolutionStone(GameConstants.StoneType.Razor_claw, 2500);
ItemList['Razor_fang'] = new EvolutionStone(GameConstants.StoneType.Razor_fang, 2500);
ItemList['Prism_scale'] = new EvolutionStone(GameConstants.StoneType.Prism_scale, 2500);
ItemList['Sachet'] = new EvolutionStone(GameConstants.StoneType.Sachet, 2500);
ItemList['Whipped_dream'] = new EvolutionStone(GameConstants.StoneType.Whipped_dream, 2500);
class ItemHandler {
    static useItem(name) {
        if (!player.itemList[name]()) {
            return Notifier.notify({
                message: `You don't have any ${GameConstants.humanifyString(name)}s left...`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        // Either the digits specified, or All (Infinity)
        const amountSelected = Number(this.multipliers[this.multIndex()].replace(/\D/g, '')) || Infinity;
        // Only allow the player to use the amount they have maximum
        this.amountToUse = Math.min(player.itemList[name](), amountSelected);
        player.itemList[name](player.itemList[name]() - this.amountToUse);
        return ItemList[name].use();
    }
    static resetAmount() {
        const input = $("input[name='amountOfStones']");
        input.val(1).change();
    }
    static increaseAmount(n) {
        const input = $("input[name='amountOfItems']");
        const newVal = (parseInt(input.val().toString(), 10) || 0) + n;
        input.val(newVal > 1 ? newVal : 1).change();
    }
    static useStones() {
        if (this.pokemonSelected() == '') {
            return Notifier.notify({
                message: 'No Pokémon selected',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        const amountTotal = Math.min(this.amountSelected(), player.itemList[this.stoneSelected()]());
        if (!amountTotal) {
            return Notifier.notify({
                message: `You don't have any ${this.stoneSelected().replace(/_/g, ' ')}s left...`,
                type: NotificationConstants.NotificationOption.danger,
            });
        }
        let amountUsed = 0;
        for (let i = 0; i < amountTotal; i++) {
            player.itemList[this.stoneSelected()](player.itemList[this.stoneSelected()]() - 1);
            amountUsed++;
            if (ItemList[this.stoneSelected()].use(this.pokemonSelected())) {
                // Stop when a shiny is encountered
                break;
            }
        }
        const multiple = amountUsed == 1 ? '' : 's';
        Notifier.notify({
            message: `You used ${amountUsed} ${GameConstants.humanifyString(this.stoneSelected())}${multiple}`,
            type: NotificationConstants.NotificationOption.success,
        });
    }
    static incrementMultiplier() {
        this.multIndex((this.multIndex() + 1) % this.multipliers.length);
    }
    static decrementMultiplier() {
        this.multIndex((((this.multIndex() - 1) % this.multipliers.length) + this.multipliers.length) % this.multipliers.length);
    }
}
ItemHandler.stoneSelected = ko.observable('Fire_stone');
ItemHandler.pokemonSelected = ko.observable('Vulpix');
ItemHandler.amountSelected = ko.observable(1);
ItemHandler.amount = ko.observable(1);
ItemHandler.amountToUse = 1;
ItemHandler.multipliers = ['×1', '×10', '×100', '×1000', 'All'];
ItemHandler.multIndex = ko.observable(0);
class PokeBlock extends Item {
    constructor(color, basePrice, currency = GameConstants.Currency.money) {
        super(`PokeBlock_${GameConstants.PokeBlockColor[color]}`, basePrice, currency);
        this.type = color;
    }
    use() {
    }
}
ItemList['PokeBlock_Black'] = new PokeBlock(GameConstants.PokeBlockColor.Black, Infinity);
ItemList['PokeBlock_Red'] = new PokeBlock(GameConstants.PokeBlockColor.Red, Infinity);
ItemList['PokeBlock_Gold'] = new PokeBlock(GameConstants.PokeBlockColor.Gold, Infinity);
ItemList['PokeBlock_Purple'] = new PokeBlock(GameConstants.PokeBlockColor.Purple, Infinity);
ItemList['PokeBlock_Gray'] = new PokeBlock(GameConstants.PokeBlockColor.Gray, Infinity);
ItemList['PokeBlock_White'] = new PokeBlock(GameConstants.PokeBlockColor.White, Infinity);
///<reference path="Item.ts"/>
class PokeballItem extends Item {
    constructor(type, basePrice, currency = GameConstants.Currency.money, options = {}) {
        super(GameConstants.Pokeball[type], basePrice, currency, options);
        this.type = type;
    }
    gain(amt) {
        App.game.pokeballs.gainPokeballs(this.type, amt);
        GameHelper.incrementObservable(App.game.statistics.pokeballsBought[this.type], amt);
    }
    use() {
    }
}
ItemList['Pokeball'] = new PokeballItem(GameConstants.Pokeball.Pokeball, 100);
ItemList['Greatball'] = new PokeballItem(GameConstants.Pokeball.Greatball, 500);
ItemList['Ultraball'] = new PokeballItem(GameConstants.Pokeball.Ultraball, 2000);
ItemList['Masterball'] = new PokeballItem(GameConstants.Pokeball.Masterball, 2500, GameConstants.Currency.questPoint);
/// <reference path="CaughtIndicatingItem.ts" />
class PokemonItem extends CaughtIndicatingItem {
    constructor(pokemon, basePrice, currency = GameConstants.Currency.questPoint) {
        super(GameConstants.PokemonItemType[pokemon], basePrice, currency);
        this.type = pokemon;
    }
    gain() {
        const shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SHOP);
        const pokemonName = this.name();
        if (shiny) {
            Notifier.notify({
                message: `✨ You obtained a shiny ${pokemonName}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(pokemonName).id, shiny, true);
    }
    use() {
    }
    getCaughtStatus() {
        return PartyController.getCaughtStatusByName(this.name());
    }
}
ItemList['Eevee'] = new PokemonItem(GameConstants.PokemonItemType.Eevee, 5000);
ItemList['Porygon'] = new PokemonItem(GameConstants.PokemonItemType.Porygon, 2000);
ItemList['Jynx'] = new PokemonItem(GameConstants.PokemonItemType.Jynx, 2500);
ItemList['Mr. Mime'] = new PokemonItem(GameConstants.PokemonItemType['Mr. Mime'], 1500);
ItemList['Lickitung'] = new PokemonItem(GameConstants.PokemonItemType.Lickitung, 1000);
ItemList['Togepi'] = new PokemonItem(GameConstants.PokemonItemType.Togepi, 2500);
ItemList['Beldum'] = new PokemonItem(GameConstants.PokemonItemType.Beldum, 5000);
ItemList['Skorupi'] = new PokemonItem(GameConstants.PokemonItemType.Skorupi, 5000);
ItemList['Combee'] = new PokemonItem(GameConstants.PokemonItemType.Combee, 5000);
ItemList['Burmy (plant)'] = new PokemonItem(GameConstants.PokemonItemType['Burmy (plant)'], 5000);
ItemList['Cherubi'] = new PokemonItem(GameConstants.PokemonItemType.Cherubi, 5000);
ItemList['Spiritomb'] = new PokemonItem(GameConstants.PokemonItemType.Spiritomb, 5000);
ItemList['Meloetta (pirouette)'] = new PokemonItem(GameConstants.PokemonItemType['Meloetta (pirouette)'], 50000);
class Vitamin extends Item {
    constructor(type, basePrice, currency = GameConstants.Currency.money) {
        super(GameConstants.VitaminType[type], basePrice, currency);
        this.type = type;
    }
    use() {
    }
}
ItemList['RareCandy'] = new Vitamin(GameConstants.VitaminType.RareCandy, Infinity);
ItemList['Protein'] = new Vitamin(GameConstants.VitaminType.Protein, Infinity);
class KeyItems {
    constructor() {
        this.name = 'Key Items';
        this.saveKey = 'keyItems';
        this.itemList = [];
    }
    initialize() {
        this.itemList = [
            new KeyItem(KeyItems.KeyItem.Teachy_tv, 'A television set that is tuned to a program with useful tips for novice TRAINERS', null, true),
            new KeyItem(KeyItems.KeyItem.Coin_case, 'A case for holding money. It can hold up to 1,000,000 coins', null, true),
            new KeyItem(KeyItems.KeyItem.Pokeball_bag, 'A tiny bag that can hold up to 4 different types of PokéBalls', null, true),
            new KeyItem(KeyItems.KeyItem.Town_map, 'A very convenient map that can be viewed anytime. It even shows you your present location in the region', function () {
                return App.game.statistics.routeKills[1]() >= GameConstants.ROUTE_KILLS_NEEDED;
            }, false, () => {
                Information.show({
                    steps: [
                        {
                            element: document.getElementById('townMap'),
                            intro: 'This is the Town Map,<br/>Use this to move to between different Routes, Towns and Dungeons.',
                        },
                    ],
                });
            }),
            // TODO obtain somewhere at the start
            new KeyItem(KeyItems.KeyItem.Factory_key, 'This pass serves as an ID card for gaining access to the Pokéball factory that lies along Route 13'),
            new KeyItem(KeyItems.KeyItem.Dungeon_ticket, 'This ticket grants access to all dungeons in the Kanto region,<br/><strong>Tip:</strong> You gain Dungeon Tokens by capturing Pokémon', null, false, () => {
                Information.show({
                    steps: [
                        {
                            element: document.getElementById('pokeballSelector'),
                            intro: 'Select which Pokeball types to catch Pokémon with based on their caught/shiny status.<br/><i><sup>Hover over the column titles for more info.</sup></i><br/><br/>Capturing Pokémon gains you <img title="Dungeon Tokens\nGained by capturing Pokémon" src="assets/images/currency/dungeonToken.png" height="25px"> Dungeon Tokens.',
                        },
                    ],
                });
            }),
            new KeyItem(KeyItems.KeyItem.Super_rod, 'The best fishing rod for catching wild water Pokémon', function () {
                return App.game.statistics.routeKills[12]() >= GameConstants.ROUTE_KILLS_NEEDED;
            }),
            // TODO obtain somewhere at the start
            new KeyItem(KeyItems.KeyItem.Holo_caster, 'A device that allows users to receive and view hologram clips at any time. It’s also used to chat with others'),
            new KeyItem(KeyItems.KeyItem.Mystery_egg, 'A mysterious Egg obtained from Mr. Pokémon. This allows you to use the Pokémon Day Care', function () {
                return App.game.statistics.routeKills[5]() >= GameConstants.ROUTE_KILLS_NEEDED;
            }),
            new KeyItem(KeyItems.KeyItem.Safari_ticket, 'This ticket grants access to the Safari Zone in Fuchsia City'),
            new KeyItem(KeyItems.KeyItem.Wailmer_pail, 'This is a tool for watering Berries you planted to make them grow more quickly', function () {
                return MapHelper.accessToRoute(14, GameConstants.Region.kanto);
            }),
            new KeyItem(KeyItems.KeyItem.Explorer_kit, 'A bag filled with convenient tools for exploring. It provides access to the Underground'),
            // TODO buy for 500 quest points
            new KeyItem(KeyItems.KeyItem.Event_calendar, 'This calendar will keep you up to date on the latest events'),
            new KeyItem(KeyItems.KeyItem.Shard_case, 'A case specifically designed for holding shards'),
        ];
    }
    hasKeyItem(item) {
        if (this.itemList[item] == undefined) {
            return false;
        }
        return this.itemList[item].isUnlocked;
    }
    gainKeyItem(item) {
        if (!this.hasKeyItem(item)) {
            KeyItemController.showGainModal(item);
            this.itemList[item].unlock();
        }
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        for (const key in json) {
            if (json.hasOwnProperty(key)) {
                if (json[key] === true) {
                    // Unlock to dispose unlocker if needed
                    this.itemList[KeyItems.KeyItem[key]].unlock();
                }
            }
        }
        // Gain the item in case the requirements changed.
        for (const keyItem of this.itemList) {
            if (!keyItem.isUnlocked && keyItem.unlockReq !== null) {
                if (keyItem.unlockReq()) {
                    App.game.keyItems.gainKeyItem(keyItem.name);
                }
            }
        }
    }
    toJSON() {
        const save = {};
        for (let i = 0; i < this.itemList.length; i++) {
            save[KeyItems.KeyItem[this.itemList[i].name]] = this.itemList[i].isUnlocked;
        }
        return save;
    }
    update(delta) {
        // This method intentionally left blank
    }
}
(function (KeyItems) {
    let KeyItem;
    (function (KeyItem) {
        KeyItem[KeyItem["Teachy_tv"] = 0] = "Teachy_tv";
        KeyItem[KeyItem["Coin_case"] = 1] = "Coin_case";
        KeyItem[KeyItem["Pokeball_bag"] = 2] = "Pokeball_bag";
        KeyItem[KeyItem["Town_map"] = 3] = "Town_map";
        KeyItem[KeyItem["Factory_key"] = 4] = "Factory_key";
        KeyItem[KeyItem["Dungeon_ticket"] = 5] = "Dungeon_ticket";
        KeyItem[KeyItem["Super_rod"] = 6] = "Super_rod";
        KeyItem[KeyItem["Holo_caster"] = 7] = "Holo_caster";
        KeyItem[KeyItem["Mystery_egg"] = 8] = "Mystery_egg";
        KeyItem[KeyItem["Safari_ticket"] = 9] = "Safari_ticket";
        KeyItem[KeyItem["Wailmer_pail"] = 10] = "Wailmer_pail";
        KeyItem[KeyItem["Explorer_kit"] = 11] = "Explorer_kit";
        KeyItem[KeyItem["Event_calendar"] = 12] = "Event_calendar";
        KeyItem[KeyItem["Shard_case"] = 13] = "Shard_case";
    })(KeyItem = KeyItems.KeyItem || (KeyItems.KeyItem = {}));
})(KeyItems || (KeyItems = {}));
///<reference path="../keyItems/KeyItems.ts"/>
class BuyKeyItem extends Item {
    constructor(item, basePrice, currency = GameConstants.Currency.questPoint, options = {}) {
        super(KeyItems.KeyItem[item], basePrice, currency, Object.assign({ maxAmount: 1 }, options));
        this.item = item;
    }
    totalPrice(amt) {
        if (amt > this.maxAmount) {
            amt = this.maxAmount;
        }
        return this.basePrice * amt;
    }
    gain(amt) {
        App.game.keyItems.gainKeyItem(this.item);
    }
    use() {
    }
    isAvailable() {
        return super.isAvailable() && !App.game.keyItems.hasKeyItem(this.item);
    }
}
ItemList['Dungeon_ticket'] = new BuyKeyItem(KeyItems.KeyItem.Dungeon_ticket, 100);
ItemList['Explorer_kit'] = new BuyKeyItem(KeyItems.KeyItem.Explorer_kit, 5000);
class KeyItem {
    constructor(name, description, unlockReq, isUnlocked = false, unlockReward = () => { }) {
        this._name = ko.observable(name);
        this._description = ko.observable(description);
        this._isUnlocked = ko.observable(isUnlocked !== null && isUnlocked !== void 0 ? isUnlocked : false);
        this.unlockReward = unlockReward;
        if (this.isUnlocked || unlockReq == undefined) {
            this.unlockReq = null;
            return;
        }
        // This computed is disposed by unlock()
        this.unlockReq = ko.computed(unlockReq);
        this.unlocker = this.unlockReq.subscribe(() => {
            if (this.unlockReq()) {
                App.game.keyItems.gainKeyItem(this.name);
            }
        });
    }
    unlock() {
        this.isUnlocked = true;
        if (this.unlocker) {
            this.unlocker.dispose();
        }
    }
    get displayName() {
        return GameConstants.humanifyString(KeyItems.KeyItem[this.name]);
    }
    get name() {
        return this._name();
    }
    get description() {
        return this._description();
    }
    get isUnlocked() {
        return this._isUnlocked();
    }
    set isUnlocked(bool) {
        this._isUnlocked(bool);
    }
}
class KeyItemController {
    static showGainModal(item) {
        this.latestGainedItem = item;
        $('.modal').modal('hide');
        $('#keyItemModal').modal({
            backdrop: 'static',
            keyboard: false,
        });
    }
    static hover(item) {
        this.inspectedItem = item;
    }
    static hoverRelease() {
        this.selectedItem = this.inspectedItem;
    }
    static get inspectedItem() {
        return this._inspectedItem();
    }
    static set inspectedItem(item) {
        this._inspectedItem(item);
    }
    static get selectedItem() {
        return this._selectedItem();
    }
    static set selectedItem(item) {
        this._selectedItem(item);
    }
    static get latestGainedItem() {
        return this._latestGainedItem();
    }
    static set latestGainedItem(item) {
        this._latestGainedItem(item);
    }
}
KeyItemController._inspectedItem = ko.observable(KeyItems.KeyItem.Teachy_tv);
KeyItemController._selectedItem = ko.observable(KeyItems.KeyItem.Teachy_tv);
KeyItemController._latestGainedItem = ko.observable(KeyItems.KeyItem.Teachy_tv);
class LogBook {
    constructor() {
        this.name = 'Log Book';
        this.saveKey = 'logbook';
        this.logs = new ObservableArrayProxy([]);
    }
    newLog(type, message) {
        const length = this.logs.unshift(new LogBookLog(type, message));
        if (length > 1000) {
            this.logs.pop();
        }
    }
    fromJSON(json) {
        if (json == null || !json.logs) {
            return;
        }
        json.logs.forEach(entry => {
            this.logs.push(new LogBookLog(entry.type, entry.description, entry.date));
        });
    }
    toJSON() {
        return {
            logs: this.logs.slice(0, 100),
        };
    }
    initialize() { }
    canAccess() {
        return true;
    }
    update(delta) { } // This method intentionally left blank
}
class LogBookLog {
    constructor(type, description, date = Date.now()) {
        this.date = date;
        this.type = type;
        this.description = description;
    }
}
const LogBookTypes = {
    NEW: {
        display: 'primary',
        label: 'NEW',
    },
    SHINY: {
        display: 'warning',
        label: 'SHINY',
    },
    CAUGHT: {
        display: 'success',
        label: 'CAUGHT',
    },
    ESCAPED: {
        display: 'danger',
        label: 'ESCAPED',
    },
    FOUND: {
        display: 'primary',
        label: 'FOUND',
    },
};
/**
 * An upgrade that requires experience to level up.
 */
class ExpUpgrade extends Upgrade {
    constructor(name, displayName, maxLevel, expList, costList, bonusList, increasing) {
        super(name, displayName, maxLevel, costList, bonusList, increasing);
        this.defaults = {
            level: 0,
            exp: 0,
        };
        this.expList = expList;
        this._exp = ko.observable(0);
    }
    gainExp(exp) {
        this.exp = Math.min(this.expList[this.level], this.exp + exp);
    }
    canBuy() {
        return super.canBuy() && this.hasEnoughExp();
    }
    hasEnoughExp() {
        return this.exp >= this.expList[this.level];
    }
    toJSON() {
        const json = super.toJSON();
        json['exp'] = this.exp;
        return json;
    }
    fromJSON(json) {
        var _a;
        super.fromJSON(json);
        this.exp = (_a = json['exp']) !== null && _a !== void 0 ? _a : this.defaults.exp;
    }
    // Knockout getters/setters
    get normalizedExp() {
        if (this.level === 0) {
            return this.exp;
        }
        return this.exp - this.expList[this.level - 1];
    }
    get expPercentage() {
        const nextLevelExp = this.level === 0 ? this.expList[this.level] : this.expList[this.level] - this.expList[this.level - 1];
        return this.normalizedExp / nextLevelExp * 100;
    }
    get progressString() {
        const nextLevelExp = this.level === 0 ? this.expList[this.level] : this.expList[this.level] - this.expList[this.level - 1];
        return `${Math.round(this.normalizedExp)}/${nextLevelExp}`;
    }
    // Private as external sources should use gainExp and normalizedExp
    get exp() {
        return this._exp();
    }
    set exp(exp) {
        this._exp(exp);
    }
}
///<reference path="../upgrades/ExpUpgrade.ts"/>
class OakItem extends ExpUpgrade {
    constructor(name, displayName, bonusList, inactiveBonus, increasing, unlockReq, description, expGain) {
        super(name, displayName, 5, [500, 1000, 2500, 5000, 10000], AmountFactory.createArray([50000, 100000, 250000, 500000, 1000000], GameConstants.Currency.money), bonusList, increasing);
        this.defaults = {
            level: 0,
            exp: 0,
            isActive: false,
        };
        this.tooltip = ko.pureComputed(() => {
            return `<u>${this.displayName}</u><br/><p>${this.description}</p>Level: <strong>${this.level}/${this.maxLevel}</strong><br/>Bonus: <strong>${this.calculateBonusIfActive()}${this.displayName != 'Magic Ball' ? '×' : '%'}</strong>`;
        });
        this._isActive = ko.observable(false);
        this.inactiveBonus = inactiveBonus;
        this.unlockReq = unlockReq;
        this.description = description;
        this.expGain = expGain;
    }
    use(exp = this.expGain) {
        if (!this.isActive) {
            return;
        }
        if (!this.isMaxLevel()) {
            this.gainExp(exp);
        }
        GameHelper.incrementObservable(App.game.statistics.oakItemUses[this.name]);
    }
    calculateBonus(level = this.level) {
        if (!this.isActive) {
            return this.inactiveBonus;
        }
        return super.calculateBonus(level);
    }
    calculateBonusIfActive(level = this.level) {
        return super.calculateBonus(level);
    }
    toJSON() {
        const json = super.toJSON();
        json['isActive'] = this.isActive;
        return json;
    }
    fromJSON(json) {
        var _a;
        super.fromJSON(json);
        this.isActive = (_a = json['isActive']) !== null && _a !== void 0 ? _a : this.defaults.isActive;
    }
    // Knockout getters/setters
    get progressString() {
        const nextLevelExp = this.level === 0 ? this.expList[this.level] : this.expList[this.level] - this.expList[this.level - 1];
        return `${Math.floor(this.normalizedExp / this.expGain)} / ${Math.ceil(nextLevelExp / this.expGain)}`;
    }
    get isActive() {
        return this._isActive();
    }
    set isActive(bool) {
        this._isActive(bool);
    }
}
class OakItems {
    constructor(unlockRequirements) {
        this.name = 'Oak Items';
        this.saveKey = 'oakItems';
        this.itemList = [];
        this.unlockRequirements = unlockRequirements;
    }
    canAccess() {
        return App.game.party.caughtPokemon.length >= 20;
    }
    initialize() {
        this.itemList = [
            new OakItem(OakItems.OakItem.Magic_Ball, 'Magic Ball', [5, 6, 7, 8, 9, 10], 0, true, 20, 'Gives a bonus to your catchrate', 2),
            new OakItem(OakItems.OakItem.Amulet_Coin, 'Amulet Coin', [1.25, 1.30, 1.35, 1.40, 1.45, 1.50], 1, true, 30, 'Gain more coins from battling', 1),
            new OakItem(OakItems.OakItem.Poison_Barb, 'Poison Barb', [1.25, 1.30, 1.35, 1.40, 1.45, 1.50], 1, true, 40, 'Clicks do more damage', 3),
            new OakItem(OakItems.OakItem.Exp_Share, 'Exp Share', [1.15, 1.18, 1.21, 1.24, 1.27, 1.30], 1, true, 50, 'Gain more exp from battling', 1),
            new OakItem(OakItems.OakItem.Sprayduck, 'Sprayduck', [1.25, 1.30, 1.35, 1.40, 1.45, 1.50], 1, false, 60, 'Makes your berries grow faster', 3),
            new OakItem(OakItems.OakItem.Shiny_Charm, 'Shiny Charm', [1.50, 1.60, 1.70, 1.80, 1.90, 2.00], 1, true, 70, 'Encounter shinies more often', 150),
            new OakItem(OakItems.OakItem.Blaze_Cassette, 'Blaze Cassette', [1.50, 1.60, 1.70, 1.80, 1.90, 2.00], 1, false, 80, 'Hatch eggs faster', 10),
            new OakItem(OakItems.OakItem.Cell_Battery, 'Cell Battery', [1.5, 1.6, 1.7, 1.8, 1.9, 2], 1, false, 90, 'More passive mining energy regen', 20),
        ];
    }
    calculateBonus(item) {
        const oakItem = this.itemList[item];
        if (oakItem == undefined) {
            console.error('Could not find oakItem', item, 'This could have unintended consequences');
            return 1;
        }
        return oakItem.calculateBonus();
    }
    isUnlocked(item) {
        if (this.itemList[item] == undefined) {
            return false;
        }
        return App.game.party.caughtPokemon.length >= this.itemList[item].unlockReq;
    }
    use(item) {
        if (!this.isUnlocked(item)) {
            return;
        }
        this.itemList[item].use();
    }
    maxActiveCount() {
        for (let i = 0; i < this.unlockRequirements.length; i++) {
            if (App.game.party.caughtPokemon.length < this.unlockRequirements[i]) {
                return i;
            }
        }
        return this.unlockRequirements.length;
    }
    activeCount() {
        let count = 0;
        for (let i = 0; i < this.itemList.length; i++) {
            if (this.itemList[i].isActive) {
                count++;
            }
        }
        return count;
    }
    hasAvailableSlot() {
        return this.activeCount() < this.maxActiveCount();
    }
    fromJSON(json) {
        for (const key in json) {
            if (json.hasOwnProperty(key)) {
                this.itemList[OakItems.OakItem[key]].fromJSON(json[key]);
            }
        }
    }
    toJSON() {
        const save = {};
        for (let i = 0; i < this.itemList.length; i++) {
            save[OakItems.OakItem[this.itemList[i].name]] = this.itemList[i].toJSON();
        }
        return save;
    }
    update(delta) {
        // This method intentionally left blank
    }
    isActive(item) {
        if (this.itemList[item] == undefined) {
            return false;
        }
        return this.itemList[item].isActive;
    }
    activate(item) {
        if (!this.isUnlocked(item)) {
            return;
        }
        if (this.maxActiveCount() == 0) {
            return;
        }
        if (this.maxActiveCount() == 1) {
            this.deactivateAll();
            this.itemList[item].isActive = true;
        }
        if (this.activeCount() < this.maxActiveCount()) {
            this.itemList[item].isActive = true;
        }
    }
    deactivateAll() {
        for (let i = 0; i < this.itemList.length; i++) {
            this.itemList[i].isActive = false;
        }
    }
    deactivate(item) {
        this.itemList[item].isActive = false;
    }
}
(function (OakItems) {
    let OakItem;
    (function (OakItem) {
        OakItem[OakItem["Magic_Ball"] = 0] = "Magic_Ball";
        OakItem[OakItem["Amulet_Coin"] = 1] = "Amulet_Coin";
        OakItem[OakItem["Poison_Barb"] = 2] = "Poison_Barb";
        OakItem[OakItem["Exp_Share"] = 3] = "Exp_Share";
        OakItem[OakItem["Sprayduck"] = 4] = "Sprayduck";
        OakItem[OakItem["Shiny_Charm"] = 5] = "Shiny_Charm";
        OakItem[OakItem["Blaze_Cassette"] = 6] = "Blaze_Cassette";
        OakItem[OakItem["Cell_Battery"] = 7] = "Cell_Battery";
    })(OakItem = OakItems.OakItem || (OakItems.OakItem = {}));
})(OakItems || (OakItems = {}));
///<reference path="OakItems.ts"/>
class OakItemController {
    static click(item) {
        this.selectedItem = item;
        if (App.game.oakItems.isActive(item)) {
            App.game.oakItems.deactivate(item);
            return;
        }
        App.game.oakItems.activate(item);
    }
    static hover(item) {
        this.inspectedItem = item;
    }
    static hoverRelease() {
        this.inspectedItem = this.selectedItem;
    }
    static get inspectedItem() {
        return this._inspectedItem();
    }
    static set inspectedItem(item) {
        this._inspectedItem(item);
    }
    static get selectedItem() {
        return this._selectedItem();
    }
    static set selectedItem(item) {
        this._selectedItem(item);
    }
}
OakItemController._inspectedItem = ko.observable(OakItems.OakItem.Magic_Ball);
OakItemController._selectedItem = ko.observable(OakItems.OakItem.Magic_Ball);
///<reference path="CaughtStatus.ts"/>
class Party {
    constructor() {
        this.name = 'Pokemon Party';
        this.saveKey = 'party';
        this.defaults = {
            caughtPokemon: [],
        };
        this.pokemonAttackObservable = ko.pureComputed(() => {
            return App.game.party.calculatePokemonAttack();
        }).extend({ rateLimit: 1000 });
        this._caughtPokemon = ko.observableArray([]);
        this.hasMaxLevelPokemon = ko.pureComputed(() => {
            for (let i = 0; i < this.caughtPokemon.length; i++) {
                if (this.caughtPokemon[i].level === 100) {
                    return true;
                }
            }
            return false;
        }).extend({ rateLimit: 1000 });
    }
    gainPokemonById(id, shiny = false, suppressNotification = false) {
        this.gainPokemon(PokemonFactory.generatePartyPokemon(id, shiny), suppressNotification);
    }
    gainPokemon(pokemon, suppressNotification = false) {
        GameHelper.incrementObservable(App.game.statistics.pokemonCaptured[pokemon.id]);
        GameHelper.incrementObservable(App.game.statistics.totalPokemonCaptured);
        if (pokemon.shiny) {
            GameHelper.incrementObservable(App.game.statistics.shinyPokemonCaptured[pokemon.id]);
            GameHelper.incrementObservable(App.game.statistics.totalShinyPokemonCaptured);
            // Add all shiny catches to the log book
            App.game.logbook.newLog(LogBookTypes.CAUGHT, `You have captured a shiny ${pokemon.name}!`);
            // Already caught (shiny)
            if (this.alreadyCaughtPokemon(pokemon.id, true)) {
                return;
            }
            // Notify if not already caught
            Notifier.notify({
                message: `✨ You have captured a shiny ${pokemon.name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.new_catch,
            });
            // Already caught (non shiny) we need to update the party pokemon directly
            if (this.alreadyCaughtPokemon(pokemon.id, false)) {
                this.getPokemon(pokemon.id).shiny = true;
                return;
            }
        }
        // Already caught (non shiny)
        if (this.alreadyCaughtPokemon(pokemon.id, false)) {
            return;
        }
        if (!suppressNotification) {
            Notifier.notify({
                message: `You have captured ${GameHelper.anOrA(pokemon.name)} ${pokemon.name}!`,
                type: NotificationConstants.NotificationOption.success,
                sound: NotificationConstants.NotificationSound.new_catch,
            });
        }
        App.game.logbook.newLog(LogBookTypes.CAUGHT, `You have captured ${GameHelper.anOrA(pokemon.name)} ${pokemon.name}!`);
        this._caughtPokemon.push(pokemon);
        // Trigger sorting update of PokemonList UI
        PartyController.getSortedList();
    }
    gainExp(exp = 0, level = 1, trainer = false) {
        App.game.oakItems.use(OakItems.OakItem.Exp_Share);
        const trainerBonus = trainer ? 1.5 : 1;
        const oakItemBonus = App.game.oakItems.calculateBonus(OakItems.OakItem.Exp_Share);
        let expTotal = Math.floor(exp * level * trainerBonus * oakItemBonus * (1 + AchievementHandler.achievementBonus()) / 9);
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.Lucky_egg)()) {
            expTotal *= 1.5;
        }
        const maxLevel = (App.game.badgeCase.badgeCount() + 2) * 10;
        for (const pokemon of this.caughtPokemon) {
            if (pokemon.level < maxLevel) {
                pokemon.gainExp(expTotal);
            }
        }
    }
    /**
     * Calculate the attack of all your Pokémon
     * @param type1
     * @param type2 types of the enemy we're calculating damage against.
     * @returns {number} damage to be done.
     */
    calculatePokemonAttack(type1 = PokemonType.None, type2 = PokemonType.None, ignoreRegionMultiplier = false, region = player.region, includeBreeding = false, useBaseAttack = false) {
        let attack = 0;
        for (const pokemon of this.caughtPokemon) {
            attack += this.calculateOnePokemonAttack(pokemon, type1, type2, region, ignoreRegionMultiplier, includeBreeding, useBaseAttack);
        }
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.xAttack)()) {
            attack *= 1.5;
        }
        return Math.round(attack);
    }
    calculateOnePokemonAttack(pokemon, type1 = PokemonType.None, type2 = PokemonType.None, region = player.region, ignoreRegionMultiplier = false, includeBreeding = false, useBaseAttack = false) {
        let multiplier = 1, attack = 0;
        const pAttack = useBaseAttack ? pokemon.baseAttack : pokemon.attack;
        const nativeRegion = PokemonHelper.calcNativeRegion(pokemon.name);
        if (!ignoreRegionMultiplier && nativeRegion != region && nativeRegion != GameConstants.Region.none) {
            // Pokemon only retain a % of their total damage in other regions based on highest region.
            multiplier = this.getRegionAttackMultiplier();
        }
        if (includeBreeding || !pokemon.breeding) {
            if (type1 == PokemonType.None) {
                attack = pAttack * multiplier;
            }
            else {
                const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
                attack = pAttack * TypeHelper.getAttackModifier(dataPokemon.type1, dataPokemon.type2, type1, type2) * multiplier;
            }
        }
        return attack;
    }
    getRegionAttackMultiplier(highestRegion = player.highestRegion()) {
        // between 0.2 -> 1 based on highest region
        return Math.min(1, Math.max(0.2, 0.1 + (highestRegion / 10)));
    }
    getPokemon(id) {
        for (let i = 0; i < this.caughtPokemon.length; i++) {
            if (this.caughtPokemon[i].id === id) {
                return this.caughtPokemon[i];
            }
        }
    }
    alreadyCaughtPokemonByName(name, shiny = false) {
        return this.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(name).id, shiny);
    }
    alreadyCaughtPokemon(id, shiny = false) {
        const pokemon = this.caughtPokemon.find(p => p.id == id);
        if (pokemon) {
            return (!shiny || pokemon.shiny);
        }
        return false;
    }
    calculateClickAttack() {
        // Base power
        // Shiny pokemon help with a 50% boost
        let clickAttack = Math.pow(this.caughtPokemon.length + (this.caughtPokemon.filter(p => p.shiny).length / 2) + 1, 1.4);
        clickAttack *= App.game.oakItems.calculateBonus(OakItems.OakItem.Poison_Barb);
        // Apply battle item bonus
        if (EffectEngineRunner.isActive(GameConstants.BattleItemType.xClick)()) {
            clickAttack *= 1.5;
        }
        return Math.floor(clickAttack);
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        const caughtPokemonSave = json['caughtPokemon'];
        for (let i = 0; i < caughtPokemonSave.length; i++) {
            const partyPokemon = PokemonFactory.generatePartyPokemon(caughtPokemonSave[i].id);
            partyPokemon.fromJSON(caughtPokemonSave[i]);
            this._caughtPokemon.push(partyPokemon);
        }
    }
    initialize() {
    }
    toJSON() {
        return {
            caughtPokemon: this._caughtPokemon().map(x => x.toJSON()),
        };
    }
    update(delta) {
        // This method intentionally left blank
    }
    get caughtPokemon() {
        return this._caughtPokemon();
    }
    set caughtPokemon(pokemon) {
        this._caughtPokemon(pokemon);
    }
}
class PartyController {
    static getCaughtStatusByName(name) {
        return this.getCaughtStatus(PokemonHelper.getPokemonByName(name).id);
    }
    static getCaughtStatus(id) {
        if (App.game.party.alreadyCaughtPokemon(id, true)) {
            return CaughtStatus.CaughtShiny;
        }
        if (App.game.party.alreadyCaughtPokemon(id, false)) {
            return CaughtStatus.Caught;
        }
        return CaughtStatus.NotCaught;
    }
    static getEvolutionsCaughtStatus(id, evoType) {
        let status = CaughtStatus.CaughtShiny;
        const pokemon = App.game.party.caughtPokemon.find(p => p.id == id);
        if (pokemon) {
            for (const evolution of pokemon.evolutions) {
                if (evolution instanceof StoneEvolution && evolution.stone == evoType && evolution.isSatisfied()) {
                    const pStatus = this.getCaughtStatusByName(evolution.getEvolvedPokemon());
                    if (pStatus < status) {
                        status = pStatus;
                    }
                }
            }
        }
        return status;
    }
    static getMaxLevelPokemonList() {
        return App.game.party.caughtPokemon.filter((partyPokemon) => {
            return !partyPokemon.breeding && partyPokemon.level >= 100;
        });
    }
    static compareBy(option, direction) {
        return function (a, b) {
            let res, dir = (direction) ? -1 : 1;
            const config = SortOptionConfigs[option];
            const aValue = config.getValue(a);
            const bValue = config.getValue(b);
            if (config.invert) {
                dir *= -1;
            }
            //Compare by provided property
            if (aValue == bValue) {
                //If they are equal according to provided property, sort by id
                return a.id - b.id;
            }
            else if (aValue < bValue) {
                res = -1;
            }
            else if (aValue > bValue) {
                res = 1;
            }
            else {
                res = 0;
            }
            return res * dir;
        };
    }
}
PartyController.getSortedList = ko.pureComputed(function () {
    return App.game.party._caughtPokemon.sort(PartyController.compareBy(Settings.getSetting('partySort').observableValue(), Settings.getSetting('partySortDirection').observableValue()));
}).extend({ rateLimit: 500 });
class PartyPokemon {
    constructor(id, name, evolutions, baseAttack, attackBonus, exp, breeding = false, shiny = false) {
        this.id = id;
        this.name = name;
        this.evolutions = evolutions;
        this.baseAttack = baseAttack;
        this.attackBonus = attackBonus;
        this.exp = exp;
        this.defaults = {
            evolved: false,
            attackBonus: 0,
            exp: 0,
            breeding: false,
            shiny: false,
        };
        this._breeding = ko.observable(breeding);
        this._shiny = ko.observable(shiny);
        this._level = ko.observable(1);
        this._attack = ko.observable(this.calculateAttack());
    }
    calculateAttack() {
        const attackBonusMultiplier = 1 + (this.attackBonus / 100);
        const levelMultiplier = this.level / 100;
        return Math.max(1, Math.floor(this.baseAttack * attackBonusMultiplier * levelMultiplier));
    }
    calculateLevelFromExp() {
        const levelType = PokemonHelper.getPokemonByName(this.name).levelType;
        for (let i = this.level - 1; i < levelRequirements[levelType].length; i++) {
            if (levelRequirements[levelType][i] > this.exp) {
                return i;
            }
        }
        return this.level;
    }
    gainExp(exp) {
        this.exp += exp;
        const oldLevel = this.level;
        const newLevel = this.calculateLevelFromExp();
        if (oldLevel !== newLevel) {
            this.level = newLevel;
            this.attack = this.calculateAttack();
            this.checkForLevelEvolution();
        }
    }
    checkForLevelEvolution() {
        if (this.breeding || this.evolutions == null || this.evolutions.length == 0) {
            return;
        }
        for (const evolution of this.evolutions) {
            if (evolution instanceof LevelEvolution && evolution.isSatisfied()) {
                evolution.evolve();
            }
        }
    }
    useStone(stoneType) {
        const possibleEvolutions = [];
        for (const evolution of this.evolutions) {
            if (evolution instanceof StoneEvolution && evolution.stone == stoneType && evolution.isSatisfied()) {
                possibleEvolutions.push(evolution);
            }
        }
        if (possibleEvolutions.length !== 0) {
            return GameConstants.randomElement(possibleEvolutions).evolve();
        }
        return false;
    }
    fromJSON(json) {
        var _a, _b, _c, _d;
        if (json == null) {
            return;
        }
        if (json['id'] == null) {
            return;
        }
        this.attackBonus = (_a = json['attackBonus']) !== null && _a !== void 0 ? _a : this.defaults.attackBonus;
        this.exp = (_b = json['exp']) !== null && _b !== void 0 ? _b : this.defaults.exp;
        this.breeding = (_c = json['breeding']) !== null && _c !== void 0 ? _c : this.defaults.breeding;
        this.shiny = (_d = json['shiny']) !== null && _d !== void 0 ? _d : this.defaults.shiny;
        this.level = this.calculateLevelFromExp();
        this.attack = this.calculateAttack();
        if (this.evolutions != null) {
            for (const evolution of this.evolutions) {
                if (evolution instanceof LevelEvolution) {
                    evolution.triggered = json['levelEvolutionTriggered'];
                }
            }
        }
    }
    toJSON() {
        let levelEvolutionTriggered = false;
        if (this.evolutions != null) {
            for (const evolution of this.evolutions) {
                if (evolution instanceof LevelEvolution && evolution.triggered) {
                    levelEvolutionTriggered = true;
                }
            }
        }
        return {
            id: this.id,
            attackBonus: this.attackBonus,
            exp: this.exp,
            breeding: this.breeding,
            shiny: this.shiny,
            levelEvolutionTriggered: levelEvolutionTriggered,
        };
    }
    // Knockout getters/setter
    get level() {
        return this._level();
    }
    set level(level) {
        this._level(level);
    }
    get attack() {
        return this._attack();
    }
    set attack(attack) {
        this._attack(attack);
    }
    get breeding() {
        return this._breeding();
    }
    set breeding(bool) {
        this._breeding(bool);
    }
    get shiny() {
        return this._shiny();
    }
    set shiny(bool) {
        this._shiny(bool);
    }
}
class Pokeball {
    constructor(type, catchBonus, catchTime, description, quantity = 0) {
        this.type = type;
        this.catchBonus = catchBonus;
        this.catchTime = catchTime;
        this.description = description;
        this.quantity = ko.observable(quantity);
    }
}
///<reference path="Pokeball.ts"/>
class Pokeballs {
    constructor() {
        this.name = 'Pokeballs';
        this.saveKey = 'pokeballs';
        this.defaults = {
            'pokeballs': [25, 0, 0, 0],
            'alreadyCaughtSelection': GameConstants.Pokeball.None,
            'alreadyCaughtShinySelection': GameConstants.Pokeball.Pokeball,
            'notCaughtSelection': GameConstants.Pokeball.Pokeball,
            'notCaughtShinySelection': GameConstants.Pokeball.Pokeball,
        };
        this.pokeballs = [
            new Pokeball(GameConstants.Pokeball.Pokeball, 0, 1250, 'A standard Pokéball', 25),
            new Pokeball(GameConstants.Pokeball.Greatball, 5, 1000, '+5% chance to catch'),
            new Pokeball(GameConstants.Pokeball.Ultraball, 10, 750, '+10% chance to catch'),
            new Pokeball(GameConstants.Pokeball.Masterball, 100, 500, '100% chance to catch'),
        ];
        this._alreadyCaughtSelection = ko.observable(this.defaults.alreadyCaughtSelection);
        this._alreadyCaughtShinySelection = ko.observable(this.defaults.alreadyCaughtShinySelection);
        this._notCaughtSelection = ko.observable(this.defaults.notCaughtSelection);
        this._notCaughtShinySelection = ko.observable(this.defaults.notCaughtShinySelection);
        this.selectedTitle = ko.observable('');
        this.selectedSelection = ko.observable(this._alreadyCaughtSelection);
    }
    initialize() {
    }
    /**
     * Checks the players preferences to see what pokéball needs to be used on the next throw.
     * Checks from the players pref to the most basic ball to see if the player has any.
     * @param id the pokemon we are trying to catch.
     * @param isShiny if the pokémon is shiny.
     * @returns {GameConstants.Pokeball} pokéball to use.
     */
    calculatePokeballToUse(id, isShiny) {
        const alreadyCaught = App.game.party.alreadyCaughtPokemon(id);
        const alreadyCaughtShiny = App.game.party.alreadyCaughtPokemon(id, true);
        let pref;
        // just check against alreadyCaughtShiny as this returns false when you don't have the pokemon yet.
        if (isShiny) {
            if (!alreadyCaughtShiny) {
                // if the pokemon is also not caught, use the higher selection since a notCaughtShiny is also a notCaught pokemon
                pref = !alreadyCaught ? Math.max(this.notCaughtSelection, this.notCaughtShinySelection) : this.notCaughtShinySelection;
            }
            else {
                // if the shiny is already caught, use the higher selection since the pokemon is also a caught pokemon
                pref = Math.max(this.alreadyCaughtSelection, this.alreadyCaughtShinySelection);
            }
        }
        else {
            if (!alreadyCaught) {
                pref = this.notCaughtSelection;
            }
            else {
                pref = this.alreadyCaughtSelection;
            }
        }
        let use = GameConstants.Pokeball.None;
        // Check which Pokeballs we have in stock that are of equal or lesser than selection
        for (let i = pref; i >= 0; i--) {
            if (this.pokeballs[i].quantity() > 0) {
                use = i;
                break;
            }
        }
        return use;
    }
    calculateCatchTime(ball) {
        return this.pokeballs[ball].catchTime;
    }
    gainPokeballs(ball, amount) {
        GameHelper.incrementObservable(this.pokeballs[ball].quantity, amount);
    }
    usePokeball(ball) {
        GameHelper.incrementObservable(this.pokeballs[ball].quantity, -1);
        GameHelper.incrementObservable(App.game.statistics.pokeballsUsed[ball]);
    }
    getCatchBonus(ball) {
        return this.pokeballs[ball].catchBonus;
    }
    getBallQuantity(ball) {
        const pokeball = this.pokeballs[ball];
        return pokeball ? pokeball.quantity() : 0;
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        var _a, _b, _c, _d;
        if (json == null) {
            return;
        }
        if (json['pokeballs'] != null) {
            json['pokeballs'].map((amt, type) => this.pokeballs[type].quantity(amt));
        }
        this.notCaughtSelection = (_a = json['notCaughtSelection']) !== null && _a !== void 0 ? _a : this.defaults.notCaughtSelection;
        this.notCaughtShinySelection = (_b = json['notCaughtShinySelection']) !== null && _b !== void 0 ? _b : this.defaults.notCaughtShinySelection;
        this.alreadyCaughtSelection = (_c = json['alreadyCaughtSelection']) !== null && _c !== void 0 ? _c : this.defaults.alreadyCaughtSelection;
        this.alreadyCaughtShinySelection = (_d = json['alreadyCaughtShinySelection']) !== null && _d !== void 0 ? _d : this.defaults.alreadyCaughtShinySelection;
    }
    toJSON() {
        return {
            'pokeballs': this.pokeballs.map(p => p.quantity()),
            'notCaughtSelection': this.notCaughtSelection,
            'notCaughtShinySelection': this.notCaughtShinySelection,
            'alreadyCaughtSelection': this.alreadyCaughtSelection,
            'alreadyCaughtShinySelection': this.alreadyCaughtShinySelection,
        };
    }
    update(delta) {
        // This method intentionally left blank
    }
    // Knockout getters/setters
    get notCaughtSelection() {
        return this._notCaughtSelection();
    }
    set notCaughtSelection(ball) {
        this._notCaughtSelection(ball);
    }
    get notCaughtShinySelection() {
        return this._notCaughtShinySelection();
    }
    set notCaughtShinySelection(ball) {
        this._notCaughtShinySelection(ball);
    }
    get alreadyCaughtSelection() {
        return this._alreadyCaughtSelection();
    }
    set alreadyCaughtSelection(ball) {
        this._alreadyCaughtSelection(ball);
    }
    get alreadyCaughtShinySelection() {
        return this._alreadyCaughtShinySelection();
    }
    set alreadyCaughtShinySelection(ball) {
        this._alreadyCaughtShinySelection(ball);
    }
}
var TypeColor = GameConstants.TypeColor;
class PokedexHelper {
    static getBackgroundColors(name) {
        const pokemon = PokemonHelper.getPokemonByName(name);
        if (!this.pokemonSeen(pokemon.id)()) {
            return 'grey';
        }
        if (pokemon.type2 == PokemonType.None) {
            return TypeColor[pokemon.type1];
        }
        return `linear-gradient(90deg,${TypeColor[pokemon.type1]} 50%, ${TypeColor[pokemon.type2]} 50%)`;
    }
    /**
     * Returns true if you have seen the pokemon
     * @param {number} id
     * @returns {boolean}
     */
    static pokemonSeen(id) {
        return ko.pureComputed(() => {
            try {
                return App.game.statistics.pokemonEncountered[id]() > 0 || App.game.statistics.pokemonDefeated[id]() > 0 || App.game.statistics.pokemonCaptured[id]() > 0 || App.game.party.alreadyCaughtPokemon(id);
            }
            catch (error) {
                return false;
            }
        });
    }
    static populateFilters() {
        let options = $('#pokedex-filter-type1');
        $.each(PokemonType, function () {
            if (isNaN(Number(this)) && this != PokemonType.None) {
                options.append($('<option />').val(PokemonType[this]).text(this));
            }
        });
        options = $('#pokedex-filter-type2');
        $.each(PokemonType, function () {
            if (isNaN(Number(this)) && this != PokemonType.None) {
                options.append($('<option />').val(PokemonType[this]).text(this));
            }
        });
        options = $('#pokedex-filter-region');
        for (let i = 0; i <= GameConstants.MAX_AVAILABLE_REGION; i++) {
            options.append($('<option />').val(i).text(GameConstants.camelCaseToString(GameConstants.Region[i])));
        }
    }
    static updateList() {
        PokedexHelper.filteredList(PokedexHelper.getList());
    }
    static getList() {
        const filter = PokedexHelper.getFilters();
        const highestEncountered = App.game.statistics.pokemonEncountered.highestID;
        const highestDefeated = App.game.statistics.pokemonDefeated.highestID;
        const highestCaught = App.game.statistics.pokemonCaptured.highestID;
        const highestDex = Math.max(highestEncountered, highestDefeated, highestCaught);
        return pokemonList.filter(function (pokemon) {
            // If the Pokemon shouldn't be unlocked yet
            const nativeRegion = PokemonHelper.calcNativeRegion(pokemon.name);
            if (nativeRegion > GameConstants.MAX_AVAILABLE_REGION || nativeRegion == GameConstants.Region.none) {
                return false;
            }
            // If not showing this region
            const region = filter['region'] ? parseInt(filter['region'], 10) : null;
            if (region != null && region != nativeRegion) {
                return false;
            }
            // Event Pokemon
            if (pokemon.id <= 0) {
                return false;
            }
            // If we haven't seen a pokemon this high yet
            if (pokemon.id > highestDex) {
                return false;
            }
            // Check if the name contains the string
            if (filter['name'] && !pokemon.name.toLowerCase().includes(filter['name'].toLowerCase())) {
                return false;
            }
            // Check if either of the types match
            const type1 = filter['type1'] ? parseInt(filter['type1'], 10) : null;
            const type2 = filter['type2'] ? parseInt(filter['type2'], 10) : null;
            if ([type1, type2].includes(PokemonType.None)) {
                const type = (type1 == PokemonType.None) ? type2 : type1;
                if (!PokedexHelper.isPureType(pokemon, type)) {
                    return false;
                }
            }
            else if ((type1 != null && !pokemon.type.includes(type1)) || (type2 != null && !pokemon.type.includes(type2))) {
                return false;
            }
            // Checks based on caught/shiny status
            const alreadyCaught = App.game.party.alreadyCaughtPokemon(pokemon.id);
            const alreadyCaughtShiny = App.game.party.alreadyCaughtPokemon(pokemon.id, true);
            // Alternate forms that we haven't caught yet
            if (!alreadyCaught && pokemon.id != Math.floor(pokemon.id)) {
                return false;
            }
            // If not caught
            if (filter['caught'] && !alreadyCaught) {
                return false;
            }
            // If not caught shiny variant
            if (filter['shiny'] && !alreadyCaughtShiny) {
                return false;
            }
            // If not caught, or already caught shiny
            if (filter['not-shiny'] && (!alreadyCaught || alreadyCaughtShiny)) {
                return false;
            }
            // If already caught
            if (filter['uncaught'] && alreadyCaught) {
                return false;
            }
            // Only pokemon with a hold item
            if (filter['held-item'] && !ItemList[pokemon.heldItem]) {
                return false;
            }
            return true;
        });
    }
    static getFilters() {
        const res = {};
        res['name'] = document.getElementById('nameFilter').value;
        const type1 = document.getElementById('pokedex-filter-type1');
        res['type1'] = type1.options[type1.selectedIndex].value;
        const type2 = document.getElementById('pokedex-filter-type2');
        res['type2'] = type2.options[type2.selectedIndex].value;
        const region = document.getElementById('pokedex-filter-region');
        res['region'] = region.options[region.selectedIndex].value;
        res['caught'] = document.getElementById('pokedex-filter-caught').checked;
        res['uncaught'] = document.getElementById('pokedex-filter-uncaught').checked;
        res['shiny'] = document.getElementById('pokedex-filter-shiny').checked;
        res['not-shiny'] = document.getElementById('pokedex-filter-not-shiny').checked;
        res['held-item'] = document.getElementById('pokedex-filter-held-item').checked;
        return res;
    }
    static getImage(id, name) {
        let src = 'assets/images/';
        if (App.game.party.alreadyCaughtPokemon(id, true)) {
            src += 'shiny';
        }
        src += `pokemon/${id}.png`;
        return src;
    }
    static isPureType(pokemon, type) {
        return (pokemon.type.length === 1 && (type == null || pokemon.type[0] === type));
    }
}
PokedexHelper.filteredList = ko.observableArray([]);
class PokedexPokemon {
    constructor(name, id, type1, type2, kills, catches, shiny) {
        this.name = name;
        this.id = id;
        this.type1 = type1;
        this.type2 = type2;
        this.kills = kills;
        this.catches = catches;
        this.shiny = shiny;
    }
}
class DataPokemon {
    constructor(id, name, catchRate, evolutions, type1, type2, attack, levelType, exp, eggCycles, heldItem) {
        this.id = id;
        this.name = name;
        this.catchRate = catchRate;
        this.evolutions = evolutions;
        this.type1 = type1;
        this.type2 = type2;
        this.attack = attack;
        this.levelType = levelType;
        this.exp = exp;
        this.eggCycles = eggCycles;
        this.heldItem = heldItem;
        this.shiny = false;
    }
}
class RoamingPokemon {
    constructor(pokemon, weight = 256, unlockRequirement) {
        this.pokemon = pokemon;
        this.weight = weight;
        this.unlockRequirement = unlockRequirement;
    }
    isRoaming() {
        return this.unlockRequirement ? this.unlockRequirement.isCompleted() : true;
    }
}
///<reference path="../badgeCase/BadgeTypes.ts"/>
class RoamingPokemonList {
    constructor() { }
    static add(region, roamer) {
        if (!RoamingPokemonList.list[region]) {
            RoamingPokemonList.list[region] = [];
        }
        RoamingPokemonList.list[region].push(roamer);
    }
    static remove(region, pokemonName) {
        const index = RoamingPokemonList.list[region].findIndex(r => r.pokemon.name == pokemonName);
        if (index >= 0) {
            RoamingPokemonList.list[region].splice(index, 1);
        }
    }
    static getRegionalRoamers(region) {
        return RoamingPokemonList.list[region] ? RoamingPokemonList.list[region].filter(p => p.isRoaming()) : [];
    }
}
RoamingPokemonList.list = {};
// Kanto
RoamingPokemonList.add(GameConstants.Region.kanto, new RoamingPokemon(pokemonMap.Mew));
// Johto
RoamingPokemonList.add(GameConstants.Region.johto, new RoamingPokemon(pokemonMap.Raikou, undefined, new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Burned Tower'))));
RoamingPokemonList.add(GameConstants.Region.johto, new RoamingPokemon(pokemonMap.Entei, undefined, new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Burned Tower'))));
RoamingPokemonList.add(GameConstants.Region.johto, new RoamingPokemon(pokemonMap.Suicune, undefined, new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Burned Tower'))));
// Hoenn
RoamingPokemonList.add(GameConstants.Region.hoenn, new RoamingPokemon(pokemonMap.Latios, undefined, new GymBadgeRequirement(BadgeTypes.Elite_HoennChampion)));
RoamingPokemonList.add(GameConstants.Region.hoenn, new RoamingPokemon(pokemonMap.Latias, undefined, new GymBadgeRequirement(BadgeTypes.Elite_HoennChampion)));
// TODO: these need another way to be obtained
RoamingPokemonList.add(GameConstants.Region.hoenn, new RoamingPokemon(pokemonMap.Jirachi, undefined, new GymBadgeRequirement(BadgeTypes.Elite_HoennChampion)));
// Sinnoh
RoamingPokemonList.add(GameConstants.Region.sinnoh, new RoamingPokemon(pokemonMap.Manaphy));
RoamingPokemonList.add(GameConstants.Region.sinnoh, new RoamingPokemon(pokemonMap.Mesprit, undefined, new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Lake Verity'))));
RoamingPokemonList.add(GameConstants.Region.sinnoh, new RoamingPokemon(pokemonMap.Cresselia, undefined, new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Fullmoon Island'))));
// Unova
RoamingPokemonList.add(GameConstants.Region.unova, new RoamingPokemon(pokemonMap.Tornadus));
RoamingPokemonList.add(GameConstants.Region.unova, new RoamingPokemon(pokemonMap.Thundurus));
RoamingPokemonList.add(GameConstants.Region.unova, new RoamingPokemon(pokemonMap['Meloetta (aria)'], undefined, new GymBadgeRequirement(BadgeTypes.Elite_UnovaChampion)));
class Quest {
    constructor(amount, pointsReward) {
        this.inProgress = ko.pureComputed(() => {
            return this.initial() !== null && !this.claimed();
        });
        this.amount = amount;
        const randomPointBonus = 0.9 + SeededRand.next() * 0.2; // random between 0.9 and 1.1
        this.pointsReward = Math.ceil(pointsReward * randomPointBonus);
        this.xpReward = 100 + (pointsReward / 10);
        this.claimed = ko.observable(false);
        this.initial = ko.observable(null);
        this.notified = false;
    }
    claim() {
        if (this.isCompleted() && !this.claimed()) {
            App.game.quests.addXP(this.xpReward);
            this.claimed(true);
            if (this.pointsReward) {
                App.game.wallet.gainQuestPoints(this.pointsReward);
                Notifier.notify({
                    message: `You have completed your quest and claimed ${this.pointsReward} quest points!`,
                    type: NotificationConstants.NotificationOption.success,
                });
            }
            else {
                Notifier.notify({
                    message: 'You have completed a quest!',
                    type: NotificationConstants.NotificationOption.success,
                });
            }
            GameHelper.incrementObservable(App.game.statistics.questsCompleted);
            return true;
        }
        return false;
    }
    quit(shouldConfirm = false) {
        if (shouldConfirm && !confirm('Are you sure you want to quit this quest?!')) {
            return false;
        }
        this.initial(null);
        return true;
    }
    begin() {
        this.initial(this.focus());
    }
    set focus(value) {
        this._focus = value;
        this.createProgressObservables();
    }
    get focus() {
        return this._focus;
    }
    createProgressObservables() {
        this.progress = ko.pureComputed(function () {
            if (this.initial() !== null) {
                return Math.min(1, (this.focus() - this.initial()) / this.amount);
            }
            else {
                return 0;
            }
        }, this);
        this.progressText = ko.pureComputed(function () {
            if (this.initial() !== null) {
                return `${Math.min((this.focus() - this.initial()), this.amount)} / ${this.amount}`;
            }
            else {
                return `0 / ${this.amount}`;
            }
        }, this);
        // This computed has a side effect - creating a notification - so we cannot safely make it a pureComputed
        // This will only be a problem if we make it subscribe to a function which lives longer than itself
        // Since it is only subscribing to observables on `this`, and the function is being kept on `this`, we shouldn't have a problem
        this.isCompleted = ko.computed(function () {
            const completed = this.progress() == 1;
            if (!this.autoComplete && completed && !this.notified) {
                Notifier.notify({
                    message: `You can complete your quest for ${this.pointsReward} quest points!`,
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 5e3,
                    sound: NotificationConstants.NotificationSound.quest_ready_to_complete,
                    setting: NotificationConstants.NotificationSetting.quest_ready_to_complete,
                });
                this.notified = true;
            }
            return completed;
        }, this);
    }
    complete() {
        this.initial(this.focus() - this.amount);
    }
    createAutoCompleter() {
        this.autoComplete = true;
        this.autoCompleter = this.isCompleted.subscribe(() => {
            if (this.isCompleted()) {
                this.claim();
                this.autoCompleter.dispose();
            }
        });
    }
    toJSON() {
        return {
            amount: this.amount,
            initial: this.initial(),
            description: this.description,
            index: this.index || 0,
            notified: this.notified,
            pointsReward: this.pointsReward,
            xpReward: this.xpReward,
            inProgress: this.inProgress(),
            isCompleted: this.isCompleted(),
            claimed: this.claimed(),
        };
    }
}
class QuestHelper {
    static generateQuestList(seed, amount = 10, uniqueQuestTypes = true) {
        const quests = [];
        SeededRand.seed(+seed);
        const QuestTypes = new Set(GameConstants.QuestTypes);
        for (let i = 0; i < amount; i++) {
            const type = SeededRand.fromArray(Array.from(QuestTypes));
            if (uniqueQuestTypes) {
                QuestTypes.delete(type);
            }
            const quest = QuestHelper.random(type);
            quest.index = i;
            quests.push(quest);
        }
        return quests;
    }
    static random(type) {
        let amount, route, region;
        switch (type) {
            case 'DefeatPokemons':
                region = SeededRand.intBetween(0, player.highestRegion());
                route = SeededRand.intBetween(GameConstants.RegionRoute[region][0], GameConstants.RegionRoute[region][1]);
                amount = SeededRand.intBetween(100, 500);
                return new DefeatPokemonsQuest(route, region, amount);
            case 'CapturePokemons':
                amount = SeededRand.intBetween(100, 500);
                return new CapturePokemonsQuest(amount);
            case 'GainMoney':
                amount = SeededRand.intBetween(20000, 60000);
                return new GainMoneyQuest(amount);
            case 'GainTokens':
                amount = SeededRand.intBetween(1000, 8000);
                return new GainTokensQuest(amount);
            case 'GainShards':
                const possibleTypes = [
                    PokemonType.Normal,
                    PokemonType.Poison,
                    PokemonType.Water,
                    PokemonType.Grass,
                    PokemonType.Flying,
                    PokemonType.Fire,
                    PokemonType.Fighting,
                ];
                const type = SeededRand.fromArray(possibleTypes);
                amount = SeededRand.intBetween(200, 600);
                return new GainShardsQuest(type, amount);
            case 'HatchEggs':
                amount = SeededRand.intBetween(1, 30);
                return new HatchEggsQuest(amount);
            case 'MineLayers':
                amount = SeededRand.intBetween(1, 3);
                return new MineLayersQuest(amount);
            case 'CatchShinies':
                return new CatchShiniesQuest(1);
            case 'DefeatGym':
                region = SeededRand.intBetween(0, player.highestRegion());
                const gymTown = SeededRand.fromArray(GameConstants.RegionGyms[region]);
                amount = SeededRand.intBetween(5, 20);
                return new DefeatGymQuest(gymTown, amount);
            case 'DefeatDungeon':
                // Allow upto highest region
                region = SeededRand.intBetween(0, player.highestRegion());
                const dungeon = SeededRand.fromArray(GameConstants.RegionDungeons[region]);
                amount = SeededRand.intBetween(5, 20);
                return new DefeatDungeonQuest(dungeon, amount);
            case 'UsePokeball':
                const possiblePokeballs = [GameConstants.Pokeball.Pokeball, GameConstants.Pokeball.Greatball, GameConstants.Pokeball.Ultraball];
                const pokeball = SeededRand.fromArray(possiblePokeballs);
                amount = SeededRand.intBetween(100, 500);
                return new UsePokeballQuest(pokeball, amount);
            case 'UseOakItem':
                const possibleItems = [
                    OakItems.OakItem.Magic_Ball,
                    OakItems.OakItem.Amulet_Coin,
                    //OakItems.OakItem.Poison_Barb,
                    OakItems.OakItem.Exp_Share,
                ];
                const oakItem = SeededRand.fromArray(possibleItems);
                amount = SeededRand.intBetween(100, 500);
                return new UseOakItemQuest(oakItem, amount);
            case 'HarvestBerriesQuest':
                const berryType = SeededRand.fromEnum(BerryType);
                amount = SeededRand.intBetween(30, 300);
                return new HarvestBerriesQuest(berryType, amount);
        }
    }
    static highestOneShotRoute(region) {
        const [first, last] = GameConstants.RegionRoute[region];
        const attack = Math.max(1, App.game.party.calculatePokemonAttack());
        for (let route = last; route >= first; route--) {
            if (PokemonFactory.routeHealth(route, region) < attack) {
                return route;
            }
        }
        return 0;
    }
}
var QuestLineState;
(function (QuestLineState) {
    QuestLineState[QuestLineState["inactive"] = 0] = "inactive";
    QuestLineState[QuestLineState["started"] = 1] = "started";
    QuestLineState[QuestLineState["ended"] = 2] = "ended";
})(QuestLineState || (QuestLineState = {}));
class QuestLine {
    constructor(name, description) {
        this.state = ko.observable(QuestLineState.inactive);
        this.name = name;
        this.description = description;
        this.quests = ko.observableArray();
        this.totalQuests = 0;
        this.curQuest = ko.pureComputed(() => {
            const acc = 0;
            return this.quests().map((quest) => {
                return +quest.isCompleted();
            })
                .reduce((acc, iscompleted) => {
                return acc + iscompleted;
            }, 0);
        });
        this.curQuestInitial = ko.observable();
        this.curQuestInitial.equalityComparer = () => {
            return false;
        }; //Always update subscriptions, even if same data pushed in
        this.curQuestObject = ko.pureComputed(() => {
            this.quests(); //register dependency on this computed so it will update
            if (this.totalQuests > 0 && this.curQuest() < this.totalQuests) {
                return this.quests()[this.curQuest()];
            }
            else {
                return { progress: () => {
                        return 0;
                    }, progressText: () => {
                        return '';
                    } };
            }
        });
        this.autoBegin = this.curQuest.subscribe((num) => {
            if (this.curQuest() < this.totalQuests) {
                if (this.curQuestObject().initial() == null) {
                    setTimeout(() => {
                        this.beginQuest(this.curQuest());
                    }, 2000);
                }
            }
            else {
                this.state(QuestLineState.ended);
            }
        });
    }
    addQuest(quest) {
        this.totalQuests++;
        quest.index = this.totalQuests;
        quest.inQuestLine = true;
        quest.createAutoCompleter();
        this.quests.push(quest);
    }
    beginQuest(index = 0, initial) {
        const quest = this.quests()[index];
        if (initial != undefined) {
            quest.initial(initial);
        }
        else {
            quest.begin();
        }
        this.curQuestInitial(quest.initial());
        this.state(QuestLineState.started);
    }
    resumeAt(index, initial) {
        if (initial != undefined) {
            for (let i = 0; i < Math.min(index, this.totalQuests); i++) {
                this.quests()[i].autoCompleter.dispose();
                this.quests()[i].complete();
            }
            if (index < this.totalQuests) {
                this.beginQuest(index, initial);
            }
        }
        else {
            this.beginQuest(0);
        }
    }
    toJSON() {
        return {
            state: this.state(),
            name: this.name,
            quest: this.curQuest(),
            initial: this.curQuestInitial(),
        };
    }
}
class QuestLineHelper {
    static createTutorial() {
        const tutorial = new QuestLine('Tutorial Quests', 'A short set of quests to get you going');
        //Defeat Starter
        const defeatStarter = new CapturePokemonsQuest(1);
        //Capture pokemon because start sequence resets route 1 kills to 0, making this quest think it is incomplete
        defeatStarter.pointsReward = 10;
        defeatStarter.description = 'Defeat the Pokémon. Click to deal damage';
        tutorial.addQuest(defeatStarter);
        //Capture 1 pokemon
        const captureOne = new CapturePokemonsQuest(1);
        captureOne.pointsReward = 20;
        captureOne.description = 'Capture 1 Pokémon. When you defeat a Pokémon, a pokeball is thrown and you have a chance to capture it.';
        tutorial.addQuest(captureOne);
        //Kill 5 on route 2
        const routeTwo = new DefeatPokemonsQuest(2, GameConstants.Region.kanto, 10);
        routeTwo.pointsReward = 20;
        routeTwo.description = 'Defeat 10 Pokémon on route 2. Click route 2 on the map to move there and begin fighting.';
        tutorial.addQuest(routeTwo);
        //Buy pokeballs
        const buyPokeballs = new BuyPokeballsQuest(10, GameConstants.Pokeball.Pokeball, 50);
        buyPokeballs.pointsReward = 50;
        buyPokeballs.description = 'Buy 10 pokeballs. You can find these in the Viridian City Shop.';
        tutorial.addQuest(buyPokeballs);
        //Buy Dungeon ticket
        const buyDungeonTicket = new CustomQuest(1, 50, 'Buy the Dungeon ticket from Viridian City Shop.', () => +App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Dungeon_ticket), 0);
        tutorial.addQuest(buyDungeonTicket);
        //Clear Viridian Forest
        const clearMtMoon = new DefeatDungeonQuest('Viridian Forest', 1);
        clearMtMoon.pointsReward = 50;
        clearMtMoon.description = 'Gather 50 Dungeon tokens by (re)capturing Pokémon, then clear the Viridian Forest dungeon.';
        tutorial.addQuest(clearMtMoon);
        //Defeat Pewter Gym
        const pewterReward = () => {
            Notifier.notify({ message: 'Tutorial completed!', type: NotificationConstants.NotificationOption.success });
            Information.show({
                steps: [
                    {
                        element: document.getElementById('questDisplayContainer'),
                        intro: 'Click "List" to see the current quests that can be completed for <img title="Quest points" src="assets/images/currency/questPoint.png" height="25px"> Quest Points.',
                    },
                ],
            });
        };
        const pewter = new CustomQuest(1, pewterReward, 'Defeat Pewter City Gym. Click the town on the map to move there, then click the Gym button to start the battle.', () => App.game.statistics.gymsDefeated[GameConstants.getGymIndex('Pewter City')](), 0);
        tutorial.addQuest(pewter);
        App.game.quests.questLines().push(tutorial);
    }
    // Need to check if tutorial is completed before showing the other quests stuff
    static isTutorialCompleted() {
        var _a;
        return ((_a = App.game.quests.getQuestLine('Tutorial Quests')) === null || _a === void 0 ? void 0 : _a.state()) == QuestLineState.ended;
    }
    static createDeoxysQuestLine() {
        const deoxysQuestLine = new QuestLine('Mystery of Deoxys', 'Discover the mystery of Deoxys');
        // Defeat 50 Pokemon on route 129
        const route129 = new DefeatPokemonsQuest(129, GameConstants.Region.hoenn, 50);
        route129.pointsReward = 0;
        deoxysQuestLine.addQuest(route129);
        // Defeat 500 Psychic type Pokemon
        const psychicShardReward = () => {
            App.game.shards.gainShards(500, PokemonType.Psychic);
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: 'You have gained 500 Psychic shards',
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const defeatPsychic = new CustomQuest(500, psychicShardReward, 'Defeat 500 Psychic type Pokémon', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Psychic)).map(p => App.game.statistics.pokemonDefeated[p.id]()).reduce((a, b) => a + b, 0);
        });
        deoxysQuestLine.addQuest(defeatPsychic);
        // Capture 200 Psychic type Pokemon
        const mindPlateReward = () => {
            const mindPlate = UndergroundItem.list.find(item => item.name == 'Mind Plate');
            if (!mindPlate) {
                return console.error('Unable to find item Mind Plate');
            }
            Underground.gainMineItem(mindPlate.id, 20);
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: `You have gained 20 ${mindPlate.name}s`,
                type: NotificationConstants.NotificationOption.success,
            });
        };
        const catchPsychic = new CustomQuest(200, mindPlateReward, 'Capture 200 Psychic type Pokémon', () => {
            return pokemonMap.filter(p => p.type.includes(PokemonType.Psychic)).map(p => App.game.statistics.pokemonCaptured[p.id]()).reduce((a, b) => a + b, 0);
        });
        deoxysQuestLine.addQuest(catchPsychic);
        // Reach stage 100 in battle frontier
        const reachStage100Reward = () => {
            Notifier.notify({
                title: deoxysQuestLine.name,
                message: 'Quest line completed!<br/><i>You have uncovered the Mystery of Deoxys</i>',
                type: NotificationConstants.NotificationOption.success,
                timeout: 3e4,
            });
        };
        const reachStage100 = new CustomQuest(100, reachStage100Reward, 'Defeat stage 100 in the Battle Frontier', App.game.statistics.battleFrontierHighestStageCompleted, 0);
        deoxysQuestLine.addQuest(reachStage100);
        App.game.quests.questLines().push(deoxysQuestLine);
    }
    static createUndergroundQuestLine() {
        const undergroundQuestLine = new QuestLine('Mining Expedition', 'Explore the underground');
        //Buy Explorer Kit (no reward)
        const buyExplorerKit = new CustomQuest(1, () => { }, 'Buy the Explorer Kit from Cinnabar Island Shop', () => +App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Explorer_kit), 0);
        undergroundQuestLine.addQuest(buyExplorerKit);
        // Mine 5 layers in the Unerground
        const OldAmberReward = () => {
            // Gain an Old Amber
            Underground.gainMineItem(3);
            Notifier.notify({
                title: undergroundQuestLine.name,
                message: 'You have gained an Old Amber fossil!<br/><i>You can breed this in the hatchery.</i>',
                type: NotificationConstants.NotificationOption.success,
                timeout: GameConstants.MINUTE,
            });
        };
        const mineLayers = new CustomQuest(5, OldAmberReward, 'Mine 5 layers in the Underground', App.game.statistics.undergroundLayersMined);
        undergroundQuestLine.addQuest(mineLayers);
        App.game.quests.questLines().push(undergroundQuestLine);
    }
    static loadQuestLines() {
        this.createTutorial();
        this.createDeoxysQuestLine();
        this.createUndergroundQuestLine();
    }
}
class Quests {
    constructor() {
        this.saveKey = 'quests';
        this.defaults = {
            xp: 0,
            refreshes: 0,
        };
        this.xp = ko.observable(0).extend({ numeric: 0 });
        this.refreshes = ko.observable(0);
        this.lastRefresh = new Date();
        this.questList = ko.observableArray();
        this.questLines = ko.observableArray();
        this.level = ko.pureComputed(() => {
            return this.xpToLevel(this.xp());
        });
        this.questSlots = ko.pureComputed(() => {
            // Minimum of 1, Maximum of 4
            return Math.min(4, Math.max(1, Math.floor(this.level() / 5)));
        });
        // Get current quests by status
        this.completedQuests = ko.pureComputed(() => {
            return this.questList().filter(quest => quest.isCompleted());
        });
        this.currentQuests = ko.pureComputed(() => {
            return this.questList().filter(quest => quest.inProgress() && !quest.claimed());
        });
        this.incompleteQuests = ko.pureComputed(() => {
            return this.questList().filter(quest => !quest.isCompleted());
        });
    }
    // Get a quest line by name
    getQuestLine(name) {
        return this.questLines().find(ql => ql.name.toLowerCase() == name.toLowerCase());
    }
    beginQuest(index) {
        const quest = this.questList()[index];
        // Check if we can start a new quest, and the requested quest isn't started or completed
        if (this.canStartNewQuest() && quest && !quest.inProgress() && !quest.isCompleted()) {
            quest.begin();
        }
        else {
            Notifier.notify({
                message: 'You cannot start more quests',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    quitQuest(index, shouldConfirm = false) {
        // Check if we can quit this quest
        const quest = this.questList()[index];
        if (quest && quest.inProgress()) {
            quest.quit(shouldConfirm);
        }
        else {
            Notifier.notify({
                message: 'You cannot quit this quest',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    claimQuest(index) {
        // Check if we can claim this quest
        const quest = this.questList()[index];
        if (quest && quest.isCompleted() && !quest.claimed()) {
            quest.claim();
            // Once the player completes every available quest, refresh the list for free
            if (this.allQuestClaimed()) {
                this.refreshQuests(true);
            }
        }
        else {
            console.trace('cannot claim quest..');
            Notifier.notify({
                message: 'You cannot claim this quest',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    addXP(amount) {
        if (isNaN(amount)) {
            return;
        }
        const currentLevel = this.level();
        GameHelper.incrementObservable(this.xp, amount);
        // Refresh the list each time a player levels up
        if (this.level() > currentLevel) {
            Notifier.notify({
                message: 'Your quest level has increased!',
                type: NotificationConstants.NotificationOption.success,
                timeout: 1e4,
                sound: NotificationConstants.NotificationSound.quest_level_increased,
            });
            this.refreshQuests(true);
        }
    }
    generateQuestList() {
        this.lastRefresh = new Date();
        this.currentQuests().forEach(quest => quest.quit());
        this.questList(QuestHelper.generateQuestList(this.generateSeed(), GameConstants.QUESTS_PER_SET));
    }
    generateSeed() {
        const d = new Date();
        return Number(this.level() * (d.getFullYear() + this.refreshes() * 10) * d.getDate() + 1000 * d.getMonth() + 100000 * d.getDate());
    }
    refreshQuests(free = false, shouldConfirm = false) {
        if (free || this.canAffordRefresh()) {
            if (!free) {
                if (shouldConfirm && !confirm('Are you sure you want to refresh the quest list?!')) {
                    return;
                }
                App.game.wallet.loseAmount(this.getRefreshCost());
            }
            GameHelper.incrementObservable(this.refreshes);
            this.generateQuestList();
        }
        else {
            Notifier.notify({
                message: 'You cannot afford to do that!',
                type: NotificationConstants.NotificationOption.danger,
            });
        }
    }
    resetRefreshes() {
        this.refreshes(0);
    }
    canAffordRefresh() {
        return App.game.wallet.hasAmount(this.getRefreshCost());
    }
    // Returns 0 when all quests are complete, ~1 million when none are
    getRefreshCost() {
        const notComplete = this.incompleteQuests().length;
        return new Amount(Math.floor(250000 * Math.LOG10E * Math.log(Math.pow(notComplete, 4) + 1)), GameConstants.Currency.money);
    }
    canStartNewQuest() {
        // Check we haven't already used up all quest slots
        if (this.currentQuests().length >= this.questSlots()) {
            return false;
        }
        // Check at least 1 quest is either not completed or in progress
        if (this.questList().find(quest => !quest.isCompleted() && !quest.inProgress())) {
            return true;
        }
        return false;
    }
    // returns false if we still have incomplete/inprogress quest
    allQuestClaimed() {
        return !this.incompleteQuests().length && !this.currentQuests().length;
    }
    // 1000 xp needed to reach level 2, amount needed for next level increases by 20% of previous level
    levelToXP(level) {
        if (level >= 2) {
            // Sum of geometric series
            const a = 1000, r = 1.2, n = level - 1;
            const sum = a * (Math.pow(r, n) - 1) / (r - 1);
            return Math.ceil(sum);
        }
        else {
            return 0;
        }
    }
    xpToLevel(xp) {
        const sum = xp, a = 1000, r = 1.2;
        const n = Math.log(1 + ((r - 1) * sum) / a) / Math.log(r);
        return Math.floor(n + 1);
    }
    percentToNextQuestLevel() {
        const current = this.level();
        const requiredForCurrent = this.levelToXP(current);
        const requiredForNext = this.levelToXP(current + 1);
        return 100 * (this.xp() - requiredForCurrent) / (requiredForNext - requiredForCurrent);
    }
    loadQuestList(questList) {
        questList.forEach(quest => {
            if (quest.initial === null) {
                return;
            }
            this.questList()[quest.index].notified = quest.notified;
            this.questList()[quest.index].claimed(quest.claimed);
            this.questList()[quest.index].initial(quest.initial);
        });
    }
    loadQuestLines(questLines) {
        questLines.forEach(questLine => {
            if (questLine.state == QuestLineState.inactive) {
                return;
            }
            const ql = this.questLines().find(ql => ql.name == questLine.name);
            if (ql) {
                ql.state(questLine.state);
                if (questLine.state == QuestLineState.started) {
                    ql.resumeAt(questLine.quest, questLine.initial);
                }
            }
        });
    }
    toJSON() {
        return {
            xp: this.xp(),
            refreshes: this.refreshes(),
            lastRefresh: this.lastRefresh,
            questList: this.questList(),
            questLines: this.questLines(),
        };
    }
    fromJSON(json) {
        if (!json) {
            // Generate the questList
            this.generateQuestList();
            // Generate the questLines
            QuestLineHelper.loadQuestLines();
            return;
        }
        this.xp(json.xp || this.defaults.xp);
        const lastRefresh = json.lastRefresh ? new Date(json.lastRefresh) : new Date();
        if (lastRefresh.toDateString() != new Date().toDateString()) {
            this.refreshes(0);
            // we don't want to load old quest data
            delete json.questList;
        }
        else {
            this.refreshes(json.refreshes || this.defaults.refreshes);
        }
        // Generate the questList
        this.generateQuestList();
        // Load any completed/inprogress quest
        if (json.questList) {
            this.loadQuestList(json.questList);
        }
        // Generate the questLines
        QuestLineHelper.loadQuestLines();
        // Load any quest line quest
        if (json.questLines) {
            this.loadQuestLines(json.questLines);
        }
    }
}
/// <reference path="../Quest.ts" />
class BuyPokeballsQuest extends Quest {
    constructor(amount, pokeball, reward) {
        super(amount, reward);
        this.description = `Buy ${amount.toLocaleString('en-US')} ${GameConstants.Pokeball[pokeball]}s.`;
        this.focus = App.game.statistics.pokeballsBought[pokeball];
    }
}
/// <reference path="../Quest.ts" />
class CapturePokemonsQuest extends Quest {
    constructor(capturesNeeded) {
        super(capturesNeeded, capturesNeeded * GameConstants.CAPTURE_POKEMONS_BASE_REWARD);
        this.description = `Capture ${capturesNeeded.toLocaleString('en-US')} Pokémon.`;
        this.focus = App.game.statistics.totalPokemonCaptured;
    }
}
/// <reference path="../Quest.ts" />
class CatchShiniesQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.SHINY_BASE_REWARD));
        this.description = `Catch ${amount.toLocaleString('en-US')} shiny Pokémon.`;
        this.focus = App.game.statistics.totalShinyPokemonCaptured;
    }
}
class CustomQuest extends Quest {
    constructor(amount, reward, description, focus, initialValue) {
        const qpReward = typeof reward == 'number' ? reward : 0;
        super(amount, qpReward);
        this.description = description;
        this.focus = focus;
        this.initialValue = initialValue;
        this.customReward = typeof reward == 'function' ? reward : undefined;
    }
    begin() {
        if (this.initialValue !== undefined) {
            this.initial(this.initialValue);
        }
        else {
            super.begin();
        }
    }
    claim() {
        if (this.customReward !== undefined) {
            this.customReward();
        }
        return super.claim();
    }
}
/// <reference path="../Quest.ts" />
class DefeatDungeonQuest extends Quest {
    constructor(dungeon, amount) {
        super(amount, DefeatDungeonQuest.calcReward(dungeon, amount));
        this.description = `Defeat the ${dungeon} dungeon ${amount.toLocaleString('en-US')} times.`;
        this.focus = App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(dungeon)];
    }
    static calcReward(dungeon, amount) {
        const playerDamage = App.game.party.calculateClickAttack() + (App.game.party.calculatePokemonAttack() / GameConstants.QUEST_CLICKS_PER_SECOND);
        const attacksToDefeatPokemon = Math.ceil(Math.min(4, dungeonList[dungeon].baseHealth / playerDamage));
        const averageTilesToBoss = 13;
        const attacksToCompleteDungeon = attacksToDefeatPokemon * averageTilesToBoss;
        const completeDungeonsReward = attacksToCompleteDungeon * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * GameConstants.ACTIVE_QUEST_MULTIPLIER * amount;
        let region, route;
        for (region = player.highestRegion; region >= 0; region--) {
            route = QuestHelper.highestOneShotRoute(region); // returns 0 if no routes in this region can be one shot
            if (route) {
                break;
            }
        }
        if (!route) {
            route = 1, region = GameConstants.Region.kanto;
        }
        const tokens = PokemonFactory.routeDungeonTokens(route, region);
        const routeKillsPerDungeon = dungeonList[dungeon].tokenCost / tokens;
        const collectTokensReward = routeKillsPerDungeon * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * amount;
        return Math.min(5000, Math.ceil(completeDungeonsReward + collectTokensReward));
    }
}
/// <reference path="../Quest.ts" />
class DefeatGymQuest extends Quest {
    constructor(gymTown, amount) {
        super(amount, DefeatGymQuest.calcReward(gymTown, amount));
        this.description = DefeatGymQuest.getDescription(gymTown, amount);
        this.focus = App.game.statistics.gymsDefeated[GameConstants.getGymIndex(gymTown)];
    }
    static getDescription(gymTown, amount) {
        let desc = `Defeat ${gymTown} `;
        if (!gymTown.includes('Elite') && !gymTown.includes('Champion')) {
            desc += 'gym ';
        }
        desc += `${amount.toLocaleString('en-US')} times.`;
        return desc;
    }
    static calcReward(gymTown, amount) {
        const gym = gymList[gymTown];
        if (gym instanceof Champion) {
            gym.setPokemon(player.starter);
        }
        const playerDamage = App.game.party.calculatePokemonAttack();
        let attacksToWin = 0;
        for (const pokemon of gym.pokemons) {
            attacksToWin += Math.ceil(Math.min(4, pokemon.maxHealth / Math.max(1, playerDamage)));
        }
        return Math.min(5000, Math.ceil(attacksToWin * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * GameConstants.ACTIVE_QUEST_MULTIPLIER * amount));
    }
}
/// <reference path="../Quest.ts" />
class DefeatPokemonsQuest extends Quest {
    constructor(route, region, killsNeeded) {
        super(killsNeeded, DefeatPokemonsQuest.calcReward(route, region, killsNeeded));
        this.description = `Defeat ${killsNeeded.toLocaleString('en-US')} Pokémon on route ${route}.`;
        this.route = route;
        this.focus = App.game.statistics.routeKills[this.route];
    }
    static calcReward(route, region, killsNeeded) {
        const attacksPerPokemon = Math.ceil(Math.min(4, PokemonFactory.routeHealth(route, region) / Math.max(1, App.game.party.calculatePokemonAttack())));
        return Math.ceil(GameConstants.DEFEAT_POKEMONS_BASE_REWARD * attacksPerPokemon * killsNeeded);
    }
}
/// <reference path="../Quest.ts" />
class GainMoneyQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.GAIN_MONEY_BASE_REWARD));
        this.description = `Gain ${amount.toLocaleString('en-US')} PokéDollars.`;
        this.focus = App.game.statistics.totalMoney;
    }
}
/// <reference path="../Quest.ts" />
class GainShardsQuest extends Quest {
    constructor(type, amount) {
        super(amount, GainShardsQuest.calcReward(type, amount));
        this.description = `Gain ${amount.toLocaleString('en-US')} ${PokemonType[type]} shards.`;
        this.focus = App.game.statistics.shardsGained[type];
    }
    static calcReward(type, amount) {
        // Needs balancing between different types
        return amount * GameConstants.DEFEAT_POKEMONS_BASE_REWARD;
    }
}
/// <reference path="../Quest.ts" />
class GainTokensQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.GAIN_TOKENS_BASE_REWARD));
        this.description = `Gain ${amount.toLocaleString('en-US')} dungeon tokens.`;
        this.focus = App.game.statistics.totalDungeonTokens;
    }
}
/// <reference path="../Quest.ts" />
class HarvestBerriesQuest extends Quest {
    constructor(berryType, amount) {
        super(amount, HarvestBerriesQuest.calcReward(berryType, amount));
        this.description = `Harvest ${amount.toLocaleString('en-US')} ${BerryType[berryType]} berries at the farm.`;
        this.focus = App.game.statistics.berriesHarvested[berryType];
    }
    // TODO: Balance the reward amount better
    static calcReward(berryType, amount) {
        const harvestTime = App.game.farming.berryData[berryType].harvestTime;
        const avgBerriesPerHarvest = 2.5;
        const plotsAvailable = App.game.farming.unlockedPlotCount();
        return Math.ceil((amount / avgBerriesPerHarvest) * (harvestTime / Math.max(4, plotsAvailable)));
    }
}
/// <reference path="../Quest.ts" />
class HatchEggsQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.HATCH_EGGS_BASE_REWARD));
        this.description = `Hatch ${amount.toLocaleString('en-US')} Eggs.`;
        this.focus = App.game.statistics.totalPokemonHatched;
    }
}
/// <reference path="../Quest.ts" />
class MineLayersQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.MINE_LAYERS_BASE_REWARD));
        const suffix = amount > 1 ? 's' : '';
        this.description = `Mine ${amount.toLocaleString('en-US')} layer${suffix} in the underground.`;
        this.focus = App.game.statistics.undergroundLayersMined;
    }
}
/// <reference path="../Quest.ts" />
class UseOakItemQuest extends Quest {
    constructor(item, amount) {
        super(amount, amount * GameConstants.USE_OAK_ITEM_BASE_REWARD);
        this.description = `Gain the benefit from the ${GameConstants.humanifyString(OakItems.OakItem[item])} ${amount.toLocaleString('en-US')} times.`;
        this.focus = App.game.statistics.oakItemUses[item];
    }
}
/// <reference path="../Quest.ts" />
class UsePokeballQuest extends Quest {
    constructor(pokeball, amount) {
        // Reward for Greatballs is 4x Pokeballs, Ultraballs are 9x Pokeballs
        super(amount, Math.ceil(amount * (pokeball + 1) * (pokeball + 1) * GameConstants.DEFEAT_POKEMONS_BASE_REWARD));
        this.description = `Use ${amount.toLocaleString('en-US')} ${GameConstants.Pokeball[pokeball]}s.`;
        this.focus = App.game.statistics.pokeballsUsed[pokeball];
    }
}
/// <reference path="../../libs/motio.d.ts" />
class Safari {
    static sizeX() {
        return Math.floor(document.querySelector('#safariModal .modal-dialog').scrollWidth / 32);
    }
    static sizeY() {
        return Math.floor((window.innerHeight - 250) / 32);
    }
    static load() {
        Safari.grid = [];
        Safari.playerXY.x = 0;
        Safari.playerXY.y = 0;
        Safari.lastDirection = 'up';
        Safari.inBattle(false);
        Safari.inProgress(true);
        Safari.balls(this.calculateStartPokeballs());
        for (let i = 0; i < this.sizeY(); i++) {
            const row = [...Array(this.sizeX())].map(Number.prototype.valueOf, 0);
            Safari.grid.push(row);
        }
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.show();
    }
    static addRandomBody(body) {
        let x = Safari.getRandomCoord(this.sizeX() - 2);
        let y = Safari.getRandomCoord(this.sizeY() - 2);
        if (body.type === 'fence') {
            x = Math.max(0, x - 3);
            y = Math.max(0, y - 3);
        }
        const res = Safari.canAddBody(x, y, body);
        if (res || body.type === 'grass') {
            Safari.addBody(x, y, body);
        }
    }
    static getRandomCoord(max) {
        return Math.floor(Math.random() * (max - 3)) + 1;
    }
    static canAddBody(x, y, body) {
        if (x == 0 ||
            y == 0 ||
            y + body.maxY() >= this.sizeY() ||
            x + body.maxX() >= this.sizeX()) {
            return false;
        }
        for (let i = 0; i < body.grid.length; i++) {
            for (let j = 0; j < body.grid[i].length; j++) {
                if ((i + y) < this.sizeY() && (j + x) < this.sizeX()) {
                    if (body.grid[i][j] !== 0) {
                        if (this.grid[i + y][j + x] !== 0) {
                            return false;
                        }
                    }
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
    static addBody(x, y, body) {
        for (let i = 0; i < body.grid.length; i++) {
            for (let j = 0; j < body.grid[i].length; j++) {
                if (body.grid[i][j] !== 0) {
                    if ((i + y) < this.sizeY() && (j + x) < this.sizeX()) {
                        if (this.grid[i + y][j + x] === 0) {
                            this.grid[i + y][j + x] = body.grid[i][j];
                        }
                    }
                }
            }
        }
    }
    static openModal() {
        if (this.canAccess()) {
            App.game.gameState = GameConstants.GameState.safari;
            $('#safariModal').modal({ backdrop: 'static', keyboard: false });
        }
        else {
            Notifier.notify({
                message: 'You need the Safari Pass to access this location.<br/><i>Visit the Gym in Fuschia City</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static closeModal() {
        if (!Safari.inBattle()) {
            $('#safariModal').modal('hide');
        }
    }
    static canPay() {
        return App.game.wallet.hasAmount(Safari.cost());
    }
    static cost() {
        return new Amount(100, GameConstants.Currency.questPoint);
    }
    static payEntranceFee() {
        if (Safari.canPay()) {
            // TODO: add increasing cost back
            //typeof player.safariCostModifier == undefined ? 1 : player.safariCostModifier++;
            App.game.wallet.loseAmount(Safari.cost());
            Safari.load();
        }
    }
    static canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Safari_ticket);
    }
    static show() {
        let html = '';
        for (let i = 0; i < Safari.grid.length; i++) {
            html += "<div class='row flex-nowrap'>";
            for (let j = 0; j < Safari.grid[0].length; j++) {
                html += Safari.square(i, j);
            }
            html += '</div>';
        }
        $('#safariBody').html(html);
        Safari.addPlayer(Math.floor((this.sizeX() - 1) / 2), this.sizeY() - 1);
    }
    static square(i, j) {
        const img = `assets/images/safari/${this.grid[i][j]}.png`;
        const divId = `safari-${j}-${i}`;
        return `<div id='${divId}' style=background-image:url('${img}') class='safariSquare'></div>`;
    }
    static addPlayer(i, j) {
        const topLeft = $('#safari-0-0').offset();
        const offset = {
            top: 32 * j + topLeft.top,
            left: 32 * i + topLeft.left,
        };
        $('#safariBody').append("<div id='sprite'></div>");
        $('#sprite').css('background', `url('assets/images/safari/walk${Safari.lastDirection}.png')`);
        $('#sprite').css('position', 'absolute');
        $('#sprite').offset(offset);
        Safari.playerXY.x = i;
        Safari.playerXY.y = j;
        Safari.origin = offset;
        const element = document.querySelector('#sprite');
        Safari.sprite = new Motio(element, {
            fps: 8,
            frames: 4,
        }).on('frame', function () {
            if (Safari.sprite.frame % 2 == 0) {
                Safari.sprite.pause();
            }
        });
    }
    static move(dir) {
        if (!Safari.walking && !Safari.isMoving && !Safari.inBattle()) {
            Safari.queue = [];
            Safari.walking = true;
            Safari.queue.unshift(dir);
            Safari.startMoving(dir);
        }
        else {
            if (dir) {
                Safari.setNextDirection(dir);
            }
        }
    }
    static startMoving(dir) {
        Safari.nextDirection = dir;
        if (!Safari.isMoving) {
            if (Safari.sprite.frame == 2) {
                Safari.sprite.to(0, true, function () {
                    Safari.step(dir);
                });
            }
            else {
                Safari.step(dir);
            }
        }
    }
    static step(direction) {
        Safari.lastDirection = direction;
        Safari.sprite.toggle();
        const directionOffset = Safari.directionToXY(direction);
        Safari.isMoving = true;
        const newPos = {
            x: Safari.playerXY.x + directionOffset.x,
            y: Safari.playerXY.y + directionOffset.y,
        };
        if (Safari.canMove(newPos.x, newPos.y)) {
            const next = $(`#safari-${newPos.x}-${newPos.y}`).offset();
            const offset = {
                top: `+=${directionOffset.y * 32}`,
                left: `+=${directionOffset.x * 32}`,
            };
            $('#sprite').css('background', `url('assets/images/safari/walk${direction}.png')`);
            Safari.playerXY.x = newPos.x;
            Safari.playerXY.y = newPos.y;
            $('#sprite').animate(offset, 250, 'linear', function () {
                Safari.checkBattle();
                Safari.isMoving = false;
                if (Safari.walking) {
                    if (!Safari.checkBattle() && Safari.queue[0]) {
                        Safari.step(Safari.queue[0]);
                    }
                }
            });
            App.game.breeding.progressEggs(1);
        }
        else {
            $('#sprite').css('background', `url('assets/images/safari/walk${direction}.png')`);
            setTimeout(function () {
                Safari.walking = false;
                Safari.isMoving = false;
                if (Safari.queue[0]) {
                    Safari.isMoving = true;
                    Safari.walking = true;
                    Safari.step(Safari.queue[0]);
                }
            }, 250);
        }
    }
    static directionToXY(dir) {
        let x = 0;
        let y = 0;
        switch (dir) {
            case 'left':
                x = -1;
                break;
            case 'up':
                y = -1;
                break;
            case 'right':
                x = 1;
                break;
            case 'down':
                y = 1;
                break;
        }
        return { x: x, y: y };
    }
    static canMove(x, y) {
        for (let i = 0; i < GameConstants.LEGAL_WALK_BLOCKS.length; i++) {
            if (Safari.grid[y] && Safari.grid[y][x] === GameConstants.LEGAL_WALK_BLOCKS[i]) {
                return true;
            }
        }
        return false;
    }
    static setNextDirection(direction) {
        if (direction != Safari.lastDirection) {
            if (Safari.queue[0] != direction) {
                if (Safari.queue.length == 1) {
                    Safari.queue.unshift(direction);
                }
                else {
                    Safari.queue[0] = direction;
                }
            }
            Safari.nextDirection = direction;
            Safari.walking = true;
        }
    }
    static stop(dir) {
        for (let i = 0; i < Safari.queue.length; i++) {
            if (Safari.queue[i] == dir) {
                Safari.queue.splice(i, 1);
            }
        }
        if (!Safari.queue[0]) {
            Safari.walking = false;
        }
    }
    static checkBattle() {
        let battle = false;
        if (Safari.grid[Safari.playerXY.y][Safari.playerXY.x] === 10) {
            battle = Math.random() * GameConstants.SAFARI_BATTLE_CHANCE <= 1;
        }
        if (battle && !Safari.inBattle()) {
            SafariBattle.load();
            return true;
        }
        return false;
    }
    static calculateStartPokeballs() {
        return GameConstants.SAFARI_BASE_POKEBALL_COUNT;
    }
    static completed(shiny = false) {
        return SafariPokemon.list.reduce((all, poke) => {
            return all && App.game.party.alreadyCaughtPokemonByName(poke.name, shiny);
        }, true);
    }
}
Safari.player = new Point(12, 20);
Safari.lastDirection = 'up';
Safari.walking = false;
Safari.isMoving = false;
Safari.queue = [];
Safari.playerXY = { 'x': 0, 'y': 0 };
Safari.inProgress = ko.observable(false);
Safari.inBattle = ko.observable(false);
Safari.balls = ko.observable();
document.addEventListener('DOMContentLoaded', function (event) {
    $('#safariModal').on('hide.bs.modal', function () {
        MapHelper.moveToTown('Fuchsia City');
    });
});
class SafariBattle {
    static get enemy() {
        return SafariBattle._enemy();
    }
    static set enemy(pokemon) {
        SafariBattle._enemy(pokemon);
    }
    static load() {
        // Stop left over keypresses
        GameController.simulateKey('ArrowUp', 'up');
        GameController.simulateKey('ArrowDown', 'up');
        GameController.simulateKey('ArrowLeft', 'up');
        GameController.simulateKey('ArrowRight', 'up');
        // Generate enemy
        SafariBattle.enemy = SafariPokemon.random();
        Safari.inBattle(true);
        SafariBattle.text('What will you do?');
        SafariBattle.unlockButtons();
        SafariBattle.escapeAttempts = 0;
        $('#safariBattleModal').modal({ backdrop: 'static', keyboard: false });
    }
    static throwBall() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            Safari.balls(Safari.balls() - 1);
            $('#safariBattleModal .enemy').css('transition-duration', `${0.75 * SafariBattle.Speed.enemyTransition}ms`);
            SafariBattle.text('You throw a ball...');
            const enemyImg = $('#safariBattleModal .enemy').offset();
            enemyImg.left += 36;
            enemyImg.top += 16;
            const ptclhtml = '<div><img id="safariBall" class="spin" src="assets/images/safari/safariball.png"></div>';
            SafariBattle.particle = SafariBattle.dropParticle(ptclhtml, $('#safariBattleModal .pageItemFooter').offset(), enemyImg, SafariBattle.Speed.ballThrow, 'cubic-bezier(0,0,0.4,1)', true).css('z-index', 9999);
            SafariBattle.delay(1.1 * SafariBattle.Speed.ballThrow)(0) // throwing the ball
                .then(SafariBattle.startCapture) // pokemon being sucked into ball
                .then(SafariBattle.delay(0.75 * SafariBattle.Speed.enemyTransition))
                .then(SafariBattle.startBounce) // pokeball dropping to ground
                .then(SafariBattle.delay(1.7 * SafariBattle.Speed.ballBounce))
                .then(SafariBattle.calcIndex) // roll a dice for catching, use dice roll to determine how many pokeball rolls
                .then(SafariBattle.delayRoll)
                .then(SafariBattle.finishCapture); // capture pokemon or break free
        }
    }
    static delay(ms) {
        return function (pass) {
            return new Promise((resolve, reject) => {
                setTimeout((pass) => {
                    resolve(pass);
                }, ms);
            });
        };
    }
    static startCapture() {
        return new Promise((resolve, reject) => {
            $('#safariBattleModal .enemy').addClass('safariCapture');
            $('#safariBall').removeClass('spin');
            resolve();
        });
    }
    static startBounce() {
        return new Promise((resolve, reject) => {
            $('#safariBattleModal').css('animation-duration', `${1.6 * SafariBattle.Speed.ballBounce}ms`);
            $('#safariBattleModal .enemy > img').css('opacity', '0');
            SafariBattle.particle.addClass('bounce');
            resolve();
        });
    }
    static calcIndex() {
        return new Promise((resolve, reject) => {
            const random = Math.random();
            const catchF = SafariBattle.enemy.catchFactor / 100;
            const index = catchF >= 1 ? 3 : Math.floor(4 * (1 - Math.max(random, catchF)) / (1 - catchF));
            if (index != 0) {
                $('#safariBattleModal').css('animation-duration', `${SafariBattle.Speed.ballRoll}ms`);
                SafariBattle.startRoll(index);
            }
            resolve([random, index]);
        });
    }
    static delayRoll(result) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                resolve(result);
            }, (0.2 + 1.2 * result[1]) * SafariBattle.Speed.ballRoll);
        });
    }
    static finishCapture(result) {
        const [random, index] = result;
        const isgameOver = (Safari.balls() == 0);
        return new Promise((resolve, reject) => {
            if (random * 100 < SafariBattle.enemy.catchFactor) {
                SafariBattle.capturePokemon();
                $('#safariBall').css('filter', 'brightness(0.4) grayscale(100%)');
                setTimeout(function () {
                    SafariBattle.particle.remove();
                    isgameOver ? SafariBattle.gameOver() : SafariBattle.endBattle();
                }, 1.7 * SafariBattle.Speed.enemyTransition);
            }
            else {
                $('#safariBattleModal .enemy > img').css('opacity', '1');
                $('#safariBattleModal .enemy').removeClass('safariCapture');
                SafariBattle.text(SafariBattle.CATCH_MESSAGES[index]);
                SafariBattle.particle.remove();
                setTimeout(function () {
                    isgameOver ? SafariBattle.gameOver() : SafariBattle.enemyTurn();
                }, 1 * SafariBattle.Speed.enemyTransition);
            }
        });
    }
    static capturePokemon() {
        SafariBattle.text(`GOTCHA!<br>${SafariBattle.enemy.name} was caught!`);
        App.game.party.gainPokemonById(PokemonHelper.getPokemonByName(SafariBattle.enemy.name).id, SafariBattle.enemy.shiny);
    }
    static throwBait() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            SafariBattle.text(`You throw some bait at ${SafariBattle.enemy.name}`);
            SafariBattle.enemy.eating = Math.max(SafariBattle.enemy.eating, Math.floor(Math.random() * 5 + 2));
            SafariBattle.enemy.angry = 0;
            const enemy = $('#safariBattleModal .enemy').offset();
            enemy.left += 30;
            enemy.top += 70;
            SafariBattle.dropParticle('<img src="assets/images/safari/bait.png">', $('#safariBattleModal .pageItemFooter').offset(), enemy, 1000, 'cubic-bezier(0,0,0.4,1)').css('z-index', 9999);
            setTimeout(SafariBattle.enemyTurn, 1500);
        }
    }
    static throwRock() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            SafariBattle.text(`You throw a rock at ${SafariBattle.enemy.name}`);
            SafariBattle.enemy.angry = Math.max(SafariBattle.enemy.angry, Math.floor(Math.random() * 5 + 2));
            SafariBattle.enemy.eating = 0;
            const enemy = $('#safariBattleModal .enemy').offset();
            enemy.left += 40;
            enemy.top += 10;
            SafariBattle.dropParticle('<img src="assets/images/safari/rock.png">', $('#safariBattleModal .pageItemFooter').offset(), enemy, 800, 'cubic-bezier(0,0,0.4,1)').css('z-index', 9999);
            setTimeout(function () {
                const hitSplash = $('<ptcl>').html("<img src='assets/images/safari/hit.png'>").children().appendTo('#safariBattleModal');
                hitSplash.offset(enemy).css({ 'opacity': 0.8, 'z-index': 9998 });
                hitSplash.fadeOut(400, function () {
                    hitSplash.remove();
                });
                setTimeout(function () {
                    const newOffset = {
                        top: enemy.top + 4,
                        left: enemy.left - 20,
                    };
                    const ang = $('<ptcl>').html("<img src='assets/images/safari/angry.png'>").children().appendTo('#safariBattleModal');
                    ang.css('position', 'absolute').css('z-index', 9999);
                    ang.offset(newOffset);
                    ang.addClass('pulse');
                    setTimeout(function () {
                        newOffset.top -= 10;
                        newOffset.left += 60;
                        ang.offset(newOffset);
                        setTimeout(function () {
                            ang.remove();
                        }, 350);
                    }, 350);
                }, 300);
            }, 800);
            setTimeout(SafariBattle.enemyTurn, 2000);
        }
    }
    static run() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            SafariBattle.text('You flee.');
            setTimeout(SafariBattle.endBattle, 1500);
        }
    }
    static enemyTurn() {
        // Enemy turn to flee;
        const random = Math.floor(Math.random() * 100);
        if (random < SafariBattle.enemy.escapeFactor) {
            SafariBattle.text(`${SafariBattle.enemy.name} has fled.`);
            setTimeout(SafariBattle.endBattle, 1000);
        }
        else if (SafariBattle.enemy.eating > 0) {
            SafariBattle.text(`${SafariBattle.enemy.name} is eating..`);
        }
        else if (SafariBattle.enemy.angry > 0) {
            SafariBattle.text(`${SafariBattle.enemy.name} is angry!`);
        }
        else {
            SafariBattle.text(`${SafariBattle.enemy.name} is watching carefully...`);
        }
        SafariBattle.enemy.eating = Math.max(0, SafariBattle.enemy.eating - 1);
        SafariBattle.enemy.angry = Math.max(0, SafariBattle.enemy.angry - 1);
        setTimeout(function () {
            SafariBattle.text('What will you do?');
            SafariBattle.busy = false;
            SafariBattle.unlockButtons();
        }, 1500);
    }
    static lockButtons() {
        $('#safariBattleModal .modal-footer button').attr('disabled', 'true');
    }
    static unlockButtons() {
        $('#safariBattleModal .modal-footer button').attr('disabled', null);
    }
    static endBattle() {
        $('#safariBattleModal').one('hidden.bs.modal', () => {
            Safari.inBattle(false);
            SafariBattle.busy = false;
        }).modal('hide');
    }
    static gameOver() {
        SafariBattle.text(GameConstants.SAFARI_OUT_OF_BALLS);
        setTimeout(function () {
            Safari.inBattle(false);
            Safari.inProgress(false);
            SafariBattle.busy = false;
            $('#safariBattleModal').modal('hide');
            $('#safariModal').modal('hide');
        }, 2000);
    }
    static dropParticle(html, pos, target, time = 2, top, persistentParticle = false) {
        const p = $('<ptcl>').html(html).children().appendTo('#safariBattleModal');
        p.css('position', 'absolute');
        p.offset(pos);
        if (!top) {
            top = 'cubic-bezier(0.6, -0.3, 0.7, 0)';
        }
        p[0].style.transition = `left ${time}ms linear, top ${time}ms ${top}`;
        p.offset(target);
        if (!persistentParticle) {
            setTimeout(function () {
                p.fadeOut();
            }, time - 200);
            setTimeout(function () {
                p.remove();
            }, time);
        }
        return p;
    }
}
SafariBattle._enemy = ko.observable();
SafariBattle.busy = false;
SafariBattle.text = ko.observable('What will you do?');
SafariBattle.escapeAttempts = 0;
SafariBattle.startRoll = function (n) {
    if (n == 4) {
        n--;
    }
    $('#safariBall').addClass('safari-roll-left');
    setTimeout(function () {
        SafariBattle.safariRoll(n - 1);
    }, 1200);
};
SafariBattle.safariRoll = function (n) {
    if (n != 0) {
        $('#safariBall').toggleClass('safari-roll-left').toggleClass('safari-roll-right');
        setTimeout(function () {
            SafariBattle.safariRoll(n - 1);
        }, 1200);
    }
};
(function (SafariBattle) {
    SafariBattle.Speed = {
        animation: 1000,
        ballThrow: 750,
        ballBounce: 850,
        ballRoll: 700,
        enemyTransition: 1000,
    };
    SafariBattle.CATCH_MESSAGES = [
        'Oh, no!<br>The Pokémon broke free!',
        'Aww! It appeared to be caught!',
        'Aargh! Almost had it!',
        'Shoot! It was so close, too!',
    ];
})(SafariBattle || (SafariBattle = {}));
class SafariBody {
    constructor() {
    }
    getTileNeighbours(x, y) {
        const ret = Array(4); //["N", "E", "S", "W"]
        const cross = Array(4); //["NE", "SE", "SW", "NW"]
        if (x === 0) {
            ret[3] = false;
        }
        else {
            ret[3] = this.grid[y][x - 1] !== 0;
        }
        if (y === 0) {
            ret[0] = false;
        }
        else {
            ret[0] = this.grid[y - 1][x] !== 0;
        }
        if (x === this.grid[0].length - 1) {
            ret[1] = false;
        }
        else {
            ret[1] = this.grid[y][x + 1] !== 0;
        }
        if (y === this.grid.length - 1) {
            ret[2] = false;
        }
        else {
            ret[2] = this.grid[y + 1][x] !== 0 && this.grid[y + 1][x] !== undefined;
        }
        if (ret.equals([true, true, true, true])) {
            cross[0] = this.grid[y - 1][x + 1] !== 0;
            cross[1] = this.grid[y + 1][x + 1] !== 0;
            cross[2] = this.grid[y + 1][x - 1] !== 0;
            cross[3] = this.grid[y - 1][x - 1] !== 0;
        }
        return {
            plus: ret,
            cross: cross,
        };
    }
    //duplicated in DungeonMap
    static shuffle(a) {
        let j, x, i;
        for (i = a.length; i; i--) {
            j = Math.floor(Math.random() * i);
            x = a[i - 1];
            a[i - 1] = a[j];
            a[j] = x;
        }
    }
    maxY() {
        return this.grid.length;
    }
    maxX() {
        let max = 0;
        for (const row of this.grid) {
            if (row.length > max) {
                max = row.length;
            }
        }
        return max;
    }
}
class SandBody extends SafariBody {
    constructor(x = SandBody.randomInt(), y = SandBody.randomInt(), type = 'sand') {
        super();
        this.edgeDetectCheck = 15;
        this.type = type;
        this.grid = this.generateCube(x, y);
        this.edgeDetect();
    }
    static randomInt() {
        return Math.floor(Math.random() * 3) + 3;
    }
    generateCube(sizeX, sizeY) {
        let body = [];
        for (let i = 0; i < sizeY; i++) {
            const row = [...Array(sizeX)].map(Number.prototype.valueOf, 0);
            body.push(row);
        }
        const amount = this.type === 'fence' ? 20 : 4;
        for (let i = 0; i < amount; i++) {
            const x = Math.floor(Math.random() * (sizeX - 2));
            const y = Math.floor(Math.random() * (sizeY - 2));
            body = SandBody.addCube(x, y, body);
        }
        return body;
    }
    static addCube(x, y, body) {
        if (Math.random() >= 0.5) {
            body[y + 2][x] = 15;
            body[y + 2][x + 1] = 15;
            body[y][x + 2] = 15;
            body[y + 1][x + 2] = 15;
            body[y + 2][x + 2] = 15;
        }
        body[y][x] = 15;
        body[y + 1][x] = 15;
        body[y][x + 1] = 15;
        body[y + 1][x + 1] = 15;
        return body;
    }
    edgeDetect() {
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[i].length; j++) {
                if (this.grid[i][j] === this.edgeDetectCheck) {
                    this.grid[i][j] = this.getNumber(this.getTileNeighbours(j, i));
                }
            }
        }
    }
    getNumber(neighbours) {
        const plus = neighbours.plus;
        const cross = neighbours.cross;
        if (plus.equals([false, true, true, false])) {
            return 11;
        }
        if (plus.equals([false, true, true, true])) {
            return 12;
        }
        if (plus.equals([false, false, true, true])) {
            return 13;
        }
        if (plus.equals([true, true, true, false])) {
            return 14;
        }
        if (plus.equals([true, true, true, true])) {
            if (!cross[0]) {
                return 21;
            }
            if (!cross[1]) {
                return 22;
            }
            if (!cross[2]) {
                return 23;
            }
            if (!cross[3]) {
                return 24;
            }
            return 15;
        }
        if (plus.equals([true, false, true, true])) {
            return 16;
        }
        if (plus.equals([true, true, false, false])) {
            return 17;
        }
        if (plus.equals([true, true, false, true])) {
            return 18;
        }
        if (plus.equals([true, false, false, true])) {
            return 19;
        }
        return 10;
    }
}
class FenceBody extends SandBody {
    constructor() {
        super(7, 7, 'fence');
        this.edgeDetectCheck = 0;
        this.openFence();
    }
    getNumber(neighbours) {
        const plus = neighbours.plus;
        const cross = neighbours.cross;
        if (plus.equals([false, true, true, false])) {
            return 25;
        }
        if (plus.equals([false, true, true, true])) {
            return 26;
        }
        if (plus.equals([false, false, true, true])) {
            return 27;
        }
        if (plus.equals([true, true, true, false])) {
            return 28;
        }
        if (plus.equals([true, true, true, true])) {
            if (!cross[0]) {
                return 33;
            }
            if (!cross[1]) {
                return 34;
            }
            if (!cross[2]) {
                return 35;
            }
            if (!cross[3]) {
                return 36;
            }
            return 10;
        }
        if (plus.equals([true, false, true, true])) {
            return 29;
        }
        if (plus.equals([true, true, false, false])) {
            return 30;
        }
        if (plus.equals([true, true, false, true])) {
            return 31;
        }
        if (plus.equals([true, false, false, true])) {
            return 32;
        }
        return 10;
    }
    openFence() {
        const options = [26, 28, 29, 31];
        const pick = options[Math.floor(Math.random() * options.length)];
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === pick) {
                    this.grid[i][j] = 0;
                }
            }
        }
    }
}
class WaterBody extends SafariBody {
    constructor() {
        super();
        const x = Math.floor(Math.random() * 3) + 3;
        const y = Math.floor(Math.random() * 3) + 3;
        const body = [];
        for (let i = 0; i < y; i++) {
            const row = [];
            for (let j = 0; j < x; j++) {
                if (i === 0) {
                    if (j === 0) {
                        row.push(1);
                    }
                    else if (j < x - 1) {
                        row.push(2);
                    }
                    else if (j === x - 1) {
                        row.push(3);
                    }
                }
                else if (i < y - 1) {
                    if (j === 0) {
                        row.push(4);
                    }
                    else if (j < x - 1) {
                        row.push(5);
                    }
                    else if (j === x - 1) {
                        row.push(6);
                    }
                }
                else if (i === y - 1) {
                    if (j === 0) {
                        row.push(7);
                    }
                    else if (j < x - 1) {
                        row.push(8);
                    }
                    else if (j === x - 1) {
                        row.push(9);
                    }
                }
            }
            body.push(row);
        }
        this.grid = body;
        this.type = 'water';
    }
}
class GrassBody extends SafariBody {
    constructor() {
        super();
        const x = Math.floor(Math.random() * 3) + 4;
        const y = Math.floor(Math.random() * 3) + 4;
        const body = [];
        for (let i = 0; i < y; i++) {
            const row = [];
            for (let j = 0; j < x; j++) {
                if (j < x * 2 / 3 - 1) {
                    row.push(10);
                }
                else {
                    row.push(0);
                }
            }
            SafariBody.shuffle(row);
            body.push(row);
        }
        this.grid = body;
        this.fillHoles();
        this.type = 'grass';
    }
    fillHoles() {
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === 0) {
                    if (i !== 0 && i !== this.grid.length - 1) {
                        if (this.grid[i - 1][j] === 10 && this.grid[i + 1][j] === 10) {
                            this.grid[i][j] = 10;
                        }
                    }
                }
            }
        }
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === 0) {
                    if (j !== 0 && j !== this.grid[0].length - 1) {
                        if (this.grid[i][j - 1] === 10 && this.grid[i][j + 1] === 10) {
                            this.grid[i][j] = 10;
                        }
                    }
                }
            }
        }
    }
}
class TreeBody extends SafariBody {
    constructor() {
        super();
        this.grid = [[37, 38, 39], [40, 41, 42], [43, 44, 45], [46, 47, 48]];
        this.type = 'tree';
    }
}
Array.prototype.equals = function (array) {
    // if the other array is a falsy value, return
    if (!array) {
        return false;
    }
    // compare lengths - can save a lot of time
    if (this.length != array.length) {
        return false;
    }
    for (let i = 0, l = this.length; i < l; i++) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this[i].equals(array[i])) {
                return false;
            }
        }
        else if (this[i] != array[i]) {
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;
        }
    }
    return true;
};
class SafariPokemon {
    constructor(name) {
        const data = PokemonHelper.getPokemonByName(name);
        this.name = data.name;
        this.id = data.id;
        this.type1 = data.type1;
        this.type2 = data.type2;
        this.shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SAFARI);
        if (this.shiny) {
            Notifier.notify({
                message: `✨ You encountered a shiny ${name}! ✨`,
                type: NotificationConstants.NotificationOption.warning,
                sound: NotificationConstants.NotificationSound.shiny_long,
                setting: NotificationConstants.NotificationSetting.encountered_shiny,
            });
        }
        this.baseCatchFactor = data.catchRate * 1 / 6;
        this.baseEscapeFactor = 30;
        this._angry = ko.observable(0);
        this._eating = ko.observable(0);
    }
    get catchFactor() {
        const oakBonus = App.game.oakItems.calculateBonus(OakItems.OakItem.Magic_Ball);
        let catchF = this.baseCatchFactor + oakBonus;
        if (this.eating > 0) {
            catchF /= 2;
        }
        if (this.angry > 0) {
            catchF *= 2;
        }
        return Math.min(100, catchF);
    }
    get escapeFactor() {
        if (this.eating > 0) {
            return this.baseEscapeFactor / 4;
        }
        if (this.angry > 0) {
            return this.baseEscapeFactor * 2;
        }
        return this.baseEscapeFactor;
    }
    get angry() {
        return this._angry();
    }
    set angry(value) {
        this._angry(value);
    }
    get eating() {
        return this._eating();
    }
    set eating(value) {
        this._eating(value);
    }
    static random() {
        const rand = Math.random() * SafariPokemon.listWeight;
        let i = 0;
        for (const pokemon of SafariPokemon.list) {
            i += pokemon.weight;
            if (rand < i) {
                return new SafariPokemon(pokemon.name);
            }
        }
    }
}
// Lower weighted pokemon will appear less frequently, equally weighted are equally likely to appear
SafariPokemon.list = [
    { name: 'Nidoran(F)', weight: 15 },
    { name: 'Nidorina', weight: 10 },
    { name: 'Nidoran(M)', weight: 25 },
    { name: 'Nidorino', weight: 10 },
    { name: 'Exeggcute', weight: 20 },
    { name: 'Paras', weight: 5 },
    { name: 'Parasect', weight: 15 },
    { name: 'Rhyhorn', weight: 10 },
    { name: 'Chansey', weight: 4 },
    { name: 'Scyther', weight: 4 },
    { name: 'Pinsir', weight: 4 },
    { name: 'Kangaskhan', weight: 15 },
    { name: 'Tauros', weight: 10 },
    { name: 'Cubone', weight: 10 },
    { name: 'Marowak', weight: 5 },
    { name: 'Tangela', weight: 4 },
];
SafariPokemon.listWeight = SafariPokemon.list.reduce((sum, pokemon) => {
    return sum += pokemon.weight;
}, 0);
class RangeSetting extends Setting {
    constructor(name, displayName, minValue, maxValue, step, defaultValue) {
        super(name, displayName, [
            new SettingOption(minValue.toString(), minValue),
            new SettingOption(maxValue.toString(), maxValue),
        ], defaultValue);
        this.minValue = minValue;
        this.maxValue = maxValue;
        this.step = step;
    }
    validValue(value) {
        if (!this.isUnlocked(value)) {
            return false;
        }
        return value >= this.minValue && value <= this.maxValue;
    }
}
var SortOptions;
(function (SortOptions) {
    SortOptions[SortOptions["id"] = 0] = "id";
    SortOptions[SortOptions["name"] = 1] = "name";
    SortOptions[SortOptions["attack"] = 2] = "attack";
    SortOptions[SortOptions["level"] = 3] = "level";
    SortOptions[SortOptions["shiny"] = 4] = "shiny";
    SortOptions[SortOptions["baseAttack"] = 5] = "baseAttack";
    SortOptions[SortOptions["breedingEfficiency"] = 6] = "breedingEfficiency";
    SortOptions[SortOptions["eggCycles"] = 7] = "eggCycles";
})(SortOptions || (SortOptions = {}));
const SortOptionConfigs = {
    [SortOptions.id]: {
        'text': 'Pokemon #',
        'getValue': p => p.id,
    },
    [SortOptions.name]: {
        'text': 'Name',
        'getValue': p => p.name,
    },
    [SortOptions.attack]: {
        'text': 'Attack',
        'getValue': p => p.calculateAttack(),
        'invert': true,
    },
    [SortOptions.level]: {
        'text': 'Level',
        'getValue': p => p.level,
        'invert': true,
    },
    [SortOptions.shiny]: {
        'text': 'Shiny',
        'getValue': p => p.shiny,
        'invert': true,
    },
    [SortOptions.baseAttack]: {
        'text': 'Base Attack',
        'getValue': p => p.baseAttack,
        'invert': true,
    },
    [SortOptions.breedingEfficiency]: {
        'text': 'Breeding Efficiency',
        'getValue': p => (p.baseAttack / pokemonMap[p.name].eggCycles),
        'invert': true,
    },
    [SortOptions.eggCycles]: {
        'text': 'Egg Steps',
        'getValue': p => pokemonMap[p.name].eggCycles,
    },
};
/// <reference path="Setting.ts" />
/// <reference path="BooleanSetting.ts"/>
/// <reference path="MultipleChoiceSetting.ts"/>
/// <reference path="RangeSetting.ts"/>
/// <reference path="SortOptions.ts"/>
class Settings {
    static add(setting) {
        if (!this.getSetting(setting.name)) {
            this.list.push(setting);
        }
    }
    static load(dict) {
        for (const name in dict) {
            const value = dict[name];
            this.setSettingByName(name, value);
        }
    }
    static setSettingByName(name, value) {
        const setting = this.getSetting(name);
        if (setting) {
            setting.set(value);
        }
        else {
            console.warn(`Setting ${name} does not exist`);
        }
    }
    static getSetting(name) {
        for (let i = 0; i < this.list.length; i++) {
            if (this.list[i].name == name) {
                return this.list[i];
            }
        }
        return null;
    }
    static save() {
        const dict = {};
        for (let i = 0; i < this.list.length; i++) {
            dict[this.list[i].name] = this.list[i].value;
        }
        return JSON.stringify(dict);
    }
}
Settings.list = [];
/*
 * THESE SETTINGS SHOULD ALL BE PUT IN SETTINGS MENU
 */
//Display settings
Settings.add(new MultipleChoiceSetting('theme', 'Theme', [
    new SettingOption('Cerulean', 'cerulean'),
    new SettingOption('Cosmo', 'cosmo'),
    new SettingOption('Cyborg', 'cyborg'),
    new SettingOption('Darkly', 'darkly'),
    new SettingOption('Flatly', 'flatly'),
    new SettingOption('Journal', 'journal'),
    new SettingOption('Litera', 'litera'),
    new SettingOption('Lumen', 'lumen'),
    new SettingOption('Lux', 'lux'),
    new SettingOption('Materia', 'materia'),
    new SettingOption('Minty', 'minty'),
    new SettingOption('Pulse', 'pulse'),
    new SettingOption('Sandstone', 'sandstone'),
    new SettingOption('Simplex', 'simplex'),
    new SettingOption('Sketchy', 'sketchy'),
    new SettingOption('Slate', 'slate'),
    new SettingOption('Solar', 'solar'),
    new SettingOption('Spacelab', 'spacelab'),
    new SettingOption('Superhero', 'superhero'),
    new SettingOption('United', 'united'),
    new SettingOption('Yeti (default)', 'yeti'),
], 'yeti'));
Settings.add(new MultipleChoiceSetting('breedingDisplay', 'Breeding progress display:', [
    new SettingOption('Percentage', 'percentage'),
    new SettingOption('Step count', 'stepCount'),
], 'percentage'));
Settings.add(new MultipleChoiceSetting('shopButtons', 'Shop amount buttons:', [
    new SettingOption('+10, +100', 'original'),
    new SettingOption('+100, +1000', 'bigplus'),
    new SettingOption('×10, ÷10', 'multiplication'),
], 'original'));
Settings.add(new BooleanSetting('showCurrencyGainedAnimation', 'Show currency gained animation', true));
Settings.add(new MultipleChoiceSetting('backgroundImage', 'Background image:', [
    new SettingOption('Day', 'background-day'),
    new SettingOption('Night', 'background-night'),
    new SettingOption('Dynamic', 'background-dynamic'),
], 'background-day'));
Settings.add(new MultipleChoiceSetting('eggAnimation', 'Egg Hatching Animation:', [
    new SettingOption('None', 'none'),
    new SettingOption('Almost & fully ready', 'almost'),
    new SettingOption('Fully ready', 'full'),
], 'full'));
// Other settings
Settings.add(new BooleanSetting('disableAutoDownloadBackupSaveOnUpdate', 'Disable automatic backup save downloading when game updates', false));
// Sound settings
Object.values(NotificationConstants.NotificationSound).forEach(sound => {
    Settings.add(new BooleanSetting(`sound.${sound.name}`, sound.name, true));
});
Settings.add(new RangeSetting('sound.volume', 'Volume', 0, 100, 1, 100));
// Notification settings
Object.values(NotificationConstants.NotificationSetting).forEach(setting => {
    Settings.add(setting);
});
/*
 * THESE SETTINGS ARE NOT SUPPOSED TO BE IN THE SETTINGS MENU
 */
const sortsettings = Object.keys(SortOptionConfigs).map(function (opt) {
    return new SettingOption(SortOptionConfigs[opt].text, parseInt(opt, 10));
});
Settings.add(new MultipleChoiceSetting('partySort', 'Sort:', sortsettings, SortOptions.id));
Settings.add(new BooleanSetting('partySortDirection', 'reverse', false));
/*
 * SUBSCRIBERS
 */
Settings.getSetting('backgroundImage').observableValue.subscribe(newValue => {
    newValue == 'background-dynamic' ? DynamicBackground.startScene() : DynamicBackground.stopScene();
});
class Shards {
    constructor() {
        this.name = 'Shards';
        this.saveKey = 'shards';
        this.defaults = {
            'shardWallet': Array(Shards.nTypes).fill(0),
            'shardUpgrades': Array(Shards.nTypes * Shards.nEffects).fill(0),
        };
        this.shardWallet = new ArrayOfObservables(this.defaults.shardWallet);
        this.shardUpgrades = new ArrayOfObservables(this.defaults.shardUpgrades);
    }
    gainShards(amt, typeNum) {
        if (!this.canAccess()) {
            return;
        }
        if (typeNum == PokemonType.None) {
            return;
        }
        this.shardWallet[typeNum] += amt;
        if (amt > 0) {
            GameHelper.incrementObservable(App.game.statistics.totalShardsGained, amt);
            GameHelper.incrementObservable(App.game.statistics.shardsGained[typeNum], amt);
        }
    }
    getShardUpgradeCost(typeNum, effectNum) {
        const cost = (this.getShardUpgrade(typeNum, effectNum) + 1) * Shards.SHARD_UPGRADE_COST;
        return cost;
    }
    hasMaxUpgrade(typeNum, effectNum) {
        return this.getShardUpgrade(typeNum, effectNum) >= Shards.MAX_SHARD_UPGRADES;
    }
    canBuyShardUpgrade(typeNum, effectNum) {
        const lessThanMax = !this.hasMaxUpgrade(typeNum, effectNum);
        const hasEnoughShards = this.shardWallet[typeNum] >= this.getShardUpgradeCost(typeNum, effectNum);
        return lessThanMax && hasEnoughShards;
    }
    buyShardUpgrade(typeNum, effectNum) {
        if (this.canBuyShardUpgrade(typeNum, effectNum)) {
            this.gainShards(-this.getShardUpgradeCost(typeNum, effectNum), typeNum);
            this.shardUpgrades[typeNum * Shards.nEffects + effectNum]++;
        }
    }
    getShardUpgrade(typeNum, effectNum) {
        return this.shardUpgrades[typeNum * Shards.nEffects + effectNum];
    }
    initialize() {
    }
    canAccess() {
        return App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Shard_case);
    }
    update(delta) {
    }
    toJSON() {
        return {
            'shardWallet': this.shardWallet.map(x => x),
            'shardUpgrades': this.shardUpgrades.map(x => x),
        };
    }
    fromJSON(json) {
        if (json != null) {
            this.shardWallet = new ArrayOfObservables(json['shardWallet']);
            this.shardUpgrades = new ArrayOfObservables(json['shardUpgrades']);
        }
    }
    openShardModal() {
        if (this.canAccess()) {
            $('#shardModal').modal('show');
        }
        else {
            Notifier.notify({
                message: 'You do not have the Shard Case',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
}
Shards.nTypes = GameHelper.enumLength(PokemonType) - 1;
Shards.nEffects = GameHelper.enumLength(GameConstants.TypeEffectiveness);
(function (Shards) {
    Shards.SHARD_UPGRADE_COST = 500;
    Shards.SHARD_UPGRADE_STEP = 0.1;
    Shards.MAX_SHARD_UPGRADES = 10;
})(Shards || (Shards = {}));
var SpecialEventStatus;
(function (SpecialEventStatus) {
    SpecialEventStatus[SpecialEventStatus["none"] = 0] = "none";
    SpecialEventStatus[SpecialEventStatus["started"] = 1] = "started";
    SpecialEventStatus[SpecialEventStatus["ended"] = 2] = "ended";
})(SpecialEventStatus || (SpecialEventStatus = {}));
class SpecialEvent {
    constructor(title, description, startTime, startFunction, endTime, endFunction) {
        this.status = SpecialEventStatus.none;
        this.title = title;
        this.description = description;
        this.startTime = startTime;
        this.startFunction = startFunction;
        this.endTime = endTime;
        this.endFunction = endFunction;
        this.initialize();
    }
    initialize() {
        // Start checking when the event should start
        this.checkStart();
    }
    shouldStartNow() {
        // If passed the start time, and not ended already
        return this.timeTillStart() <= 0 && !this.hasEnded();
    }
    timeTillStart() {
        return +this.startTime - Date.now();
    }
    timeTillEnd() {
        return +this.endTime - Date.now();
    }
    hasStarted() {
        return this.status == SpecialEventStatus.started;
    }
    hasEnded() {
        return this.status == SpecialEventStatus.ended;
    }
    notify(time, timeout, type = NotificationConstants.NotificationOption.info) {
        timeout -= 1000;
        Notifier.notify({
            title: `[EVENT] ${this.title}`,
            message: `${this.description}<br/><br/><strong>Start time:</strong> ${this.startTime.toLocaleString()}<br/><strong>End time:</strong> ${this.endTime.toLocaleString()}`,
            type,
            time,
            timeout,
            setting: NotificationConstants.NotificationSetting.event_start_end,
        });
    }
    checkStart() {
        // If event already over, do nothing
        if (this.timeTillEnd() <= 0) {
            this.status = SpecialEventStatus.ended;
            return;
        }
        const timeTillEventStart = this.timeTillStart();
        // If more than 1 week, don't notify the player yet
        if (timeTillEventStart > 7 * GameConstants.DAY) {
            // Check again when 7 days left until event start, or in 7 days
            setTimeout(() => {
                this.checkStart();
            }, Math.min(7 * GameConstants.DAY, timeTillEventStart - 7 * GameConstants.DAY));
            // return as this function will be run again after the timeout
            return;
        }
        // If more than 1 day, notify player about the upcoming event
        if (timeTillEventStart > 1 * GameConstants.DAY) {
            this.notify(`starts in ${GameConstants.formatTimeShortWords(timeTillEventStart)}!`, Math.min(1 * GameConstants.HOUR));
            // Check again when less than 6 hours till event start
            setTimeout(() => {
                this.checkStart();
            }, timeTillEventStart - 6 * GameConstants.HOUR);
            // return as this function will be run again after the timeout
            return;
        }
        // If more than 1 hour, notify player about event starting time
        if (timeTillEventStart > 1 * GameConstants.HOUR) {
            this.notify(`starts in ${GameConstants.formatTimeShortWords(timeTillEventStart)}!`, Math.min(timeTillEventStart, 1 * GameConstants.HOUR));
        }
        // If not started yet, notify player event will start soon
        if (!this.shouldStartNow()) {
            // Notify player when 1 hour left, or now
            const sendNotificationTimeout = Math.max(timeTillEventStart - 1 * GameConstants.HOUR, 0);
            const notificationTimeout = sendNotificationTimeout ? 1 * GameConstants.HOUR : timeTillEventStart;
            setTimeout(() => {
                this.notify(`starts in ${GameConstants.formatTimeShortWords(notificationTimeout)}!`, notificationTimeout);
            }, sendNotificationTimeout);
        }
        // Start event now, or at start time
        setTimeout(() => {
            this.start();
        }, Math.max(0, timeTillEventStart));
    }
    start() {
        // Update event status
        this.status = SpecialEventStatus.started;
        // We only wan't the notification displayed for 1 hour, or until the event is over
        const timeTillEventEnd = this.timeTillEnd();
        this.notify('on now!', Math.min(1 * GameConstants.HOUR, timeTillEventEnd), NotificationConstants.NotificationOption.success);
        this.startFunction();
        // Start checking when the event should be ending
        this.checkEnd();
    }
    checkEnd() {
        const timeTillEventEnd = this.timeTillEnd();
        // If more than 1 day, don't notify the player yet
        if (timeTillEventEnd > 1 * GameConstants.DAY) {
            // Check again when 1 day left until event start, or in 1 day (whichever is less)
            setTimeout(() => {
                this.checkEnd();
            }, Math.min(1 * GameConstants.DAY, timeTillEventEnd - 1 * GameConstants.DAY));
            // return as this function will be run again after the timeout
            return;
        }
        // If less than 1 day, and not already over, notify the player when it will end
        if (timeTillEventEnd > 0) {
            // Notify player when 1 hour left, or now
            const sendNotificationTimeout = Math.max(timeTillEventEnd - 1 * GameConstants.HOUR, 0);
            const notificationTimeout = sendNotificationTimeout ? 1 * GameConstants.HOUR : timeTillEventEnd;
            setTimeout(() => {
                this.notify(`ends in ${GameConstants.formatTimeShortWords(notificationTimeout)}!`, notificationTimeout, NotificationConstants.NotificationOption.warning);
            }, sendNotificationTimeout);
        }
        // End event now, or at end time
        setTimeout(() => {
            this.end();
        }, Math.max(0, timeTillEventEnd));
    }
    end() {
        // Update event status
        this.status = SpecialEventStatus.ended;
        this.notify('just ended!', 1 * GameConstants.HOUR, NotificationConstants.NotificationOption.danger);
        this.endFunction();
    }
}
class SpecialEvents {
    constructor() {
        this.name = 'Events';
        this.saveKey = 'events';
    }
    static newEvent(title, description, startTime, startFunction, endTime, endFunction) {
        // Check if the event exist before adding it again
        if (!SpecialEvents.events.find(event => event.title == title)) {
            SpecialEvents.events.push(new SpecialEvent(title, description, startTime, startFunction, endTime, endFunction));
        }
    }
    initialize() { }
    fromJSON(json) {
        if (!json) {
            return;
        }
    }
    toJSON() {
        return {
        // no data to save yet
        };
    }
    canAccess() {
        return true;
    }
    update(delta) { } // This method intentionally left blank
}
SpecialEvents.events = [];
// TODO: Fetch events from a server each 1/2/3/6/12/24 hours?
// Create our events here for now
// Yearly
SpecialEvents.newEvent('Flying Pikachu', 'Encounter Flying Pikachu for a limited time roaming Kanto.', 
// Start
new Date(new Date().getFullYear(), 6, 6, 1), () => {
    RoamingPokemonList.add(GameConstants.Region.kanto, new RoamingPokemon(pokemonMap['Flying Pikachu']));
}, 
// End
new Date(new Date().getFullYear(), 6, 12, 23), () => {
    RoamingPokemonList.remove(GameConstants.Region.kanto, 'Flying Pikachu');
});
SpecialEvents.newEvent('Mewtwo strikes back!', 'Encounter Armored Mewtwo for a limited time in Cerulean Cave.<br/>Encounter clone Pokemon roaming in Kanto.', 
// Start
new Date(new Date().getFullYear(), 6, 18, 1), () => {
    dungeonList['Cerulean Cave'].bossList.push(new DungeonBossPokemon('Armored Mewtwo', 1000000, 80));
    RoamingPokemonList.add(GameConstants.Region.kanto, new RoamingPokemon(pokemonMap['Bulbasaur (clone)']));
    RoamingPokemonList.add(GameConstants.Region.kanto, new RoamingPokemon(pokemonMap['Charmander (clone)']));
    RoamingPokemonList.add(GameConstants.Region.kanto, new RoamingPokemon(pokemonMap['Squirtle (clone)']));
}, 
// End
new Date(new Date().getFullYear(), 6, 24, 23), () => {
    dungeonList['Cerulean Cave'].bossList = dungeonList['Cerulean Cave'].bossList.filter(boss => boss.name != 'Armored Mewtwo');
    RoamingPokemonList.list[GameConstants.Region.kanto] = RoamingPokemonList.list[GameConstants.Region.kanto].filter(r => !['Bulbasaur (clone)', 'Charmander (clone)', 'Squirtle (clone)'].includes(r.pokemon.name));
});
SpecialEvents.newEvent('Halloween!', 'Encounter Spooky Pokemon for a limited time around Kanto, Johto and Hoenn.', 
// Start
new Date(new Date().getFullYear(), 9, 30, 1), () => {
    SeededRand.seed(new Date().getFullYear());
    Routes.getRoutesByRegion(GameConstants.Region.kanto).forEach(route => {
        SeededRand.boolean() ? route.pokemon.land.push('Spooky Bulbasaur') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Gastly') : null;
    });
    Routes.getRoutesByRegion(GameConstants.Region.johto).forEach(route => {
        SeededRand.boolean() ? route.pokemon.land.push('Spooky Togepi') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Misdreavus') : null;
    });
    Routes.getRoutesByRegion(GameConstants.Region.hoenn).forEach(route => {
        SeededRand.boolean() ? route.pokemon.land.push('Pikachu (Gengar)') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Shuppet') : null;
        SeededRand.boolean() ? route.pokemon.land.push('Duskull') : null;
    });
}, 
// End
new Date(new Date().getFullYear(), 10, 5, 23), () => {
    Routes.getRoutesByRegion(GameConstants.Region.kanto).forEach(route => route.pokemon.land = route.pokemon.land.filter(p => !['Spooky Bulbasaur', 'Gastly'].includes(p)));
    Routes.getRoutesByRegion(GameConstants.Region.johto).forEach(route => route.pokemon.land = route.pokemon.land.filter(p => !['Spooky Togepi', 'Misdreavus'].includes(p)));
    Routes.getRoutesByRegion(GameConstants.Region.hoenn).forEach(route => route.pokemon.land = route.pokemon.land.filter(p => !['Pikachu (Gengar)', 'Shuppet', 'Duskull'].includes(p)));
});
SpecialEvents.newEvent('Merry Christmas!', 'Encounter Santa Dragonite for a limited time roaming around Kanto, Johto and Hoenn.', 
// Start
new Date(new Date().getFullYear(), 11, 24, 1), () => {
    // Add to every region excluding None
    GameHelper.enumNumbers(GameConstants.Region).filter(i => i != GameConstants.Region.none).forEach(region => {
        RoamingPokemonList.add(region, new RoamingPokemon(pokemonMap['Santa Dragonite']));
    });
}, 
// End
new Date(new Date().getFullYear(), 11, 30, 23), () => {
    // Remove from every region excluding None
    GameHelper.enumNumbers(GameConstants.Region).filter(i => i != GameConstants.Region.none).forEach(region => {
        RoamingPokemonList.remove(region, 'Santa Dragonite');
    });
});
var SpecialEventNotifiedStatus;
(function (SpecialEventNotifiedStatus) {
    SpecialEventNotifiedStatus[SpecialEventNotifiedStatus["None"] = 0] = "None";
    SpecialEventNotifiedStatus[SpecialEventNotifiedStatus["New"] = 1] = "New";
    SpecialEventNotifiedStatus[SpecialEventNotifiedStatus["Starting"] = 2] = "Starting";
    SpecialEventNotifiedStatus[SpecialEventNotifiedStatus["Started"] = 3] = "Started";
    SpecialEventNotifiedStatus[SpecialEventNotifiedStatus["Ending"] = 4] = "Ending";
    SpecialEventNotifiedStatus[SpecialEventNotifiedStatus["Ended"] = 5] = "Ended";
})(SpecialEventNotifiedStatus || (SpecialEventNotifiedStatus = {}));
class NPC {
    constructor(name, dialog, image) {
        this.name = name;
        this.dialog = dialog;
        this.image = image;
    }
    openDialog() {
        $('#npc-modal .npc-name').text(this.name);
        $('#npc-modal .npc-dialog').html(this.dialog.map(line => `<p>${line}</p>`).join('\n'));
        if (this.image) {
            $('#npc-modal .npc-image').attr('src', this.image);
            $('#npc-modal .npc-image').show();
        }
        else {
            $('#npc-modal .npc-image').hide();
        }
        $('#npc-modal').modal();
        return;
    }
}
/* eslint-disable array-bracket-newline */
///<reference path="../achievements/GymBadgeRequirement.ts"/>
///<reference path="../achievements/OneFromManyRequirement.ts"/>
///<reference path="../badgeCase/BadgeTypes.ts"/>
///<reference path="NPC.ts"/>
class Town {
    constructor(name, region, 
    // Optional arguments are in a named object, so that we don't need
    // to pass undefined to get to the one we want
    optional = {}) {
        this.name = ko.observable(name);
        this.region = ko.observable(region);
        this.gym = ko.observable(gymList[name]);
        this.requirements = optional.requirements || [];
        this.shop = ko.observable(optional.shop);
        this.dungeon = ko.observable(optional.dungeon);
        this.npcs = ko.observableArray(optional.npcs);
        this.startingTown = GameConstants.StartingTowns.includes(this.name());
    }
    isUnlocked() {
        return this.requirements.every(requirement => requirement.isCompleted());
    }
}
class DungeonTown extends Town {
    constructor(name, region, requirements = []) {
        super(name, region, { requirements, dungeon: dungeonList[name] });
    }
}
const TownList = {};
const pokeMartShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Greatball'],
    ItemList['Ultraball'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Lucky_egg'],
    ItemList['Item_magnet'],
    ItemList['Token_collector'],
    ItemList['Lucky_incense'],
    ItemList['SmallRestore'],
    ItemList['MediumRestore'],
    ItemList['LargeRestore'],
]);
//Kanto Shops
const PewterCityShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Token_collector'],
    ItemList['Lucky_egg'],
    ItemList['Mystery_egg'],
]);
const CeruleanCityShop = new Shop([
    ItemList['Water_stone'],
    ItemList['xAttack'],
    ItemList['Water_egg'],
]);
const VermillionCityShop = new Shop([
    ItemList['Thunder_stone'],
    ItemList['Lucky_egg'],
    ItemList['Electric_egg'],
]);
const CeladonCityShop = new Shop([
    ItemList['Eevee'],
    ItemList['Porygon'],
    ItemList['Jynx'],
    ItemList['Mr. Mime'],
    ItemList['Lickitung'],
]);
const SaffronCityShop = new Shop([
    ItemList['Moon_stone'],
    ItemList['xClick'],
    ItemList['Leaf_stone'],
    ItemList['Fighting_egg'],
]);
const FuchsiaCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Trade_stone'],
    ItemList['Lucky_egg'],
    ItemList['Dragon_egg'],
]);
const CinnabarIslandShop = new Shop([
    ItemList['Fire_stone'],
    ItemList['Fire_egg'],
    ItemList['SmallRestore'],
    ItemList['Explorer_kit'],
]);
const ViridianCityShop = new Shop([
    ItemList['Pokeball'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Dungeon_ticket'],
]);
const LavenderTownShop = new Shop([
    ItemList['Greatball'],
    ItemList['Item_magnet'],
    ItemList['Lucky_incense'],
    ItemList['Grass_egg'],
]);
// Kanto NPCs
const ViridianCityOldMan = new NPC('Old Man', [
    'Ahh, I\'ve had my coffee now and I feel great!',
    'You can use the Pokeball Selector to select which type of Pokeball to use on specific Pokemon based on caught status.',
]);
const CinnabarIslandResearcher = new NPC('Researcher', [
    'They were trying to clone an ancient Pokémon in the mansion, I wonder if they succeeded.',
    'Apparently the ancient Pokémon escaped, And can be found roaming around Kanto!',
]);
const BigSpender = new NPC('Big Spender', [
    'I love shopping! When I come in, the cashiers know I want tons of items.',
    'You can use the Shop Amount Button settings to make it easy for big purchases, too!',
]);
//Kanto Towns
TownList['Pewter City'] = new Town('Pewter City', GameConstants.Region.kanto, {
    requirements: [
        new RouteKillRequirement(10, 2),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Viridian Forest')),
    ],
    shop: PewterCityShop,
});
TownList['Cerulean City'] = new Town('Cerulean City', GameConstants.Region.kanto, {
    requirements: [new RouteKillRequirement(10, 4)],
    shop: CeruleanCityShop,
    dungeon: dungeonList['Cerulean Cave'],
});
TownList['Vermillion City'] = new Town('Vermillion City', GameConstants.Region.kanto, {
    requirements: [new RouteKillRequirement(10, 6)],
    shop: VermillionCityShop,
});
TownList['Celadon City'] = new Town('Celadon City', GameConstants.Region.kanto, {
    requirements: [new RouteKillRequirement(10, 8)],
    shop: CeladonCityShop,
    npcs: [BigSpender],
});
TownList['Saffron City'] = new Town('Saffron City', GameConstants.Region.kanto, {
    requirements: [new GymBadgeRequirement(BadgeTypes.Rainbow)],
    shop: SaffronCityShop,
});
TownList['Fuchsia City'] = new Town('Fuchsia City', GameConstants.Region.kanto, {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, 18),
            new RouteKillRequirement(10, 15),
        ])],
    shop: FuchsiaCityShop,
});
TownList['Cinnabar Island'] = new Town('Cinnabar Island', GameConstants.Region.kanto, {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, 20),
            new RouteKillRequirement(10, 21),
        ])],
    shop: CinnabarIslandShop,
    dungeon: dungeonList['Pokemon Mansion'],
    npcs: [CinnabarIslandResearcher],
});
TownList['Viridian City'] = new Town('Viridian City', GameConstants.Region.kanto, {
    requirements: [new RouteKillRequirement(10, 1)],
    shop: ViridianCityShop,
    npcs: [ViridianCityOldMan],
});
TownList['Pallet Town'] = new Town('Pallet Town', GameConstants.Region.kanto);
TownList['Lavender Town'] = new Town('Lavender Town', GameConstants.Region.kanto, {
    requirements: [new RouteKillRequirement(10, 10)],
    shop: LavenderTownShop,
    dungeon: dungeonList['Pokemon Tower'],
});
//Kanto Dungeons
TownList['Viridian Forest'] = new DungeonTown('Viridian Forest', GameConstants.Region.kanto, [new RouteKillRequirement(10, 2)]);
TownList['Mt. Moon'] = new DungeonTown('Mt. Moon', GameConstants.Region.kanto, [new RouteKillRequirement(10, 3)]);
TownList['Digletts Cave'] = new DungeonTown('Digletts Cave', GameConstants.Region.kanto, [new RouteKillRequirement(10, 6)]);
TownList['Rock Tunnel'] = new DungeonTown('Rock Tunnel', GameConstants.Region.kanto, [
    new RouteKillRequirement(10, 9),
    new GymBadgeRequirement(BadgeTypes.Cascade),
]);
TownList['Power Plant'] = new DungeonTown('Power Plant', GameConstants.Region.kanto, [
    new RouteKillRequirement(10, 9),
    new GymBadgeRequirement(BadgeTypes.Soul),
]);
TownList['Pokemon Tower'] = new DungeonTown('Pokemon Tower', GameConstants.Region.kanto, [
    new RouteKillRequirement(10, 10),
    new GymBadgeRequirement(BadgeTypes.Rainbow),
]);
TownList['Seafoam Islands'] = new DungeonTown('Seafoam Islands', GameConstants.Region.kanto, [new RouteKillRequirement(10, 19)]);
TownList['Pokemon Mansion'] = new DungeonTown('Pokemon Mansion', GameConstants.Region.kanto, [new OneFromManyRequirement([
        new RouteKillRequirement(10, 20),
        new RouteKillRequirement(10, 21),
    ])]);
TownList['Victory Road'] = new DungeonTown('Victory Road', GameConstants.Region.kanto, [new RouteKillRequirement(10, 23)]);
TownList['Cerulean Cave'] = new DungeonTown('Cerulean Cave', GameConstants.Region.kanto, [new GymBadgeRequirement(BadgeTypes.Elite_KantoChampion)]);
//Johto Shops
const NewBarkTownShop = new Shop([
    ItemList['Pokeball'],
]);
const CherrygroveCityShop = new Shop([
    ItemList['Greatball'],
]);
const VioletCityShop = new Shop([
    ItemList['MediumRestore'],
    ItemList['Togepi'],
    ItemList['Mystery_egg'],
]);
const AzaleaTownShop = new Shop([
    ItemList['Kings_rock'],
    ItemList['Grass_egg'],
]);
const GoldenrodCityShop = new Shop([
    ItemList['Sun_stone'],
    ItemList['Upgrade'],
    ItemList['Soothe_bell'],
]);
const EcruteakCityShop = new Shop([
    ItemList['Greatball'],
    ItemList['Fire_egg'],
]);
const OlivineCityShop = new Shop([
    ItemList['Metal_coat'],
    ItemList['Water_egg'],
    ItemList['Electric_egg'],
]);
const CianwoodCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Fighting_egg'],
]);
const MahoganyTownShop = new Shop([
    ItemList['Fighting_egg'],
]);
const BlackthornCityShop = new Shop([
    ItemList['LargeRestore'],
    ItemList['Dragon_scale'],
]);
// Johto NPCs
const AzaleaOldMan = new NPC('Wise Old Man', [
    'There is an old tale about the Guardian of Ilex Forest.',
    'It says that the mythical pokemon Celebi will appear before anyone who has proven they are a Champion Pokémon Trainer.',
]);
const EcruteakKimonoGirl = new NPC('Kimono Girl', [
    'Legends say that Ho-Oh is searching for a trainer of pure heart.',
    'To prove yourself, you must tame the three legendary beasts of Johto, and bring them to the nearby Tin Tower.',
]);
//Johto Towns
TownList['New Bark Town'] = new Town('New Bark Town', GameConstants.Region.johto, {
    shop: NewBarkTownShop,
});
TownList['Cherrygrove City'] = new Town('Cherrygrove City', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, 29)],
    shop: CherrygroveCityShop,
});
TownList['Violet City'] = new Town('Violet City', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, 31)],
    shop: VioletCityShop,
    dungeon: dungeonList['Sprout Tower'],
});
TownList['Azalea Town'] = new Town('Azalea Town', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, 33)],
    shop: AzaleaTownShop,
    dungeon: dungeonList['Slowpoke Well'],
    npcs: [AzaleaOldMan],
});
TownList['Goldenrod City'] = new Town('Goldenrod City', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, 34)],
    shop: GoldenrodCityShop,
    npcs: [BigSpender],
});
TownList['Ecruteak City'] = new Town('Ecruteak City', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, 37)],
    shop: EcruteakCityShop,
    npcs: [EcruteakKimonoGirl],
});
TownList['Olivine City'] = new Town('Olivine City', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, 39)],
    shop: OlivineCityShop,
});
TownList['Cianwood City'] = new Town('Cianwood City', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, 41)],
    shop: CianwoodCityShop,
});
TownList['Mahogany Town'] = new Town('Mahogany Town', GameConstants.Region.johto, {
    requirements: [new RouteKillRequirement(10, 42)],
    shop: MahoganyTownShop,
});
TownList['Blackthorn City'] = new Town('Blackthorn City', GameConstants.Region.johto, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ice Path'))],
    shop: BlackthornCityShop,
});
//Johto Dungeons
TownList['Sprout Tower'] = new DungeonTown('Sprout Tower', GameConstants.Region.johto, [new RouteKillRequirement(10, 31)]);
TownList['Ruins of Alph'] = new DungeonTown('Ruins of Alph', GameConstants.Region.johto, [new RouteKillRequirement(10, 32)]);
TownList['Union Cave'] = new DungeonTown('Union Cave', GameConstants.Region.johto, [new RouteKillRequirement(10, 32)]);
TownList['Slowpoke Well'] = new DungeonTown('Slowpoke Well', GameConstants.Region.johto, [new RouteKillRequirement(10, 33)]);
TownList['Ilex Forest'] = new DungeonTown('Ilex Forest', GameConstants.Region.johto, [new GymBadgeRequirement(BadgeTypes.Hive)]);
TownList['Burned Tower'] = new DungeonTown('Burned Tower', GameConstants.Region.johto, [new RouteKillRequirement(10, 37)]);
TownList['Tin Tower'] = new DungeonTown('Tin Tower', GameConstants.Region.johto, [
    new GymBadgeRequirement(BadgeTypes.Mineral),
    new GymBadgeRequirement(BadgeTypes.Glacier),
]);
TownList['Whirl Islands'] = new DungeonTown('Whirl Islands', GameConstants.Region.johto, [
    new GymBadgeRequirement(BadgeTypes.Mineral),
    new GymBadgeRequirement(BadgeTypes.Glacier),
]);
TownList['Mt Mortar'] = new DungeonTown('Mt Mortar', GameConstants.Region.johto, [new RouteKillRequirement(10, 42)]);
TownList['Ice Path'] = new DungeonTown('Ice Path', GameConstants.Region.johto, [new RouteKillRequirement(10, 44)]);
TownList['Dark Cave'] = new DungeonTown('Dark Cave', GameConstants.Region.johto, [new RouteKillRequirement(10, 45)]);
TownList['Mt Silver'] = new DungeonTown('Mt Silver', GameConstants.Region.johto, [new RouteKillRequirement(10, 28)]);
//Hoenn Shops
const LittleRootTownShop = new Shop([
    ItemList['Pokeball'],
]);
const RustboroCityShop = new Shop([
    ItemList['Mystery_egg'],
]);
const DewfordTownShop = new Shop([
    ItemList['Fighting_egg'],
]);
const SlateportCityShop = new Shop([
    ItemList['Greatball'],
    ItemList['Water_egg'],
]);
const MauvilleCityShop = new Shop([
    ItemList['Electric_egg'],
]);
const VerdanturfTownShop = new Shop([
    ItemList['Grass_egg'],
    ItemList['Soothe_bell'],
]);
const LavaridgeTownShop = new Shop([
    ItemList['Fire_egg'],
]);
const FallarborTownShop = new Shop([
    ItemList['Moon_stone'],
]);
const FortreeCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Leaf_stone'],
]);
const LilyCoveCityShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Greatball'],
    ItemList['Ultraball'],
    ItemList['SmallRestore'],
    ItemList['MediumRestore'],
    ItemList['LargeRestore'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Lucky_egg'],
    ItemList['Token_collector'],
    ItemList['Item_magnet'],
    ItemList['Lucky_incense'],
]);
const MossdeepCityShop = new Shop([
    ItemList['Beldum'],
    ItemList['Prism_scale'],
]);
const SootopolisCityShop = new Shop([
    ItemList['Water_stone'],
]);
const PacifidlogTownShop = new Shop([
    ItemList['Deepsea_tooth'],
    ItemList['Deepsea_scale'],
]);
const EverGrandeCityShop = new Shop([
    ItemList['Dragon_egg'],
]);
// TODO: finalize items and prices
const BattleFrontierShop = new Shop([
    new PokeballItem(GameConstants.Pokeball.Ultraball, 1, GameConstants.Currency.battlePoint),
    new PokeballItem(GameConstants.Pokeball.Masterball, 500, GameConstants.Currency.battlePoint, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.battlePoint]}` }),
    new EnergyRestore(GameConstants.EnergyRestoreSize.SmallRestore, 10, GameConstants.Currency.battlePoint),
    new EnergyRestore(GameConstants.EnergyRestoreSize.MediumRestore, 20, GameConstants.Currency.battlePoint),
    new EnergyRestore(GameConstants.EnergyRestoreSize.LargeRestore, 40, GameConstants.Currency.battlePoint),
]);
//Hoenn NPCs
const SootopolisWallace = new NPC('Gym Leader Wallace', [
    'The creators of the lands and ocean slumber within the Cave of Origin.',
    'However, they will only awaken when in the presence of a truly great trainer.',
    'You will have to overcome the Pokémon League before you have any chance to encounter them.',
]);
//Hoenn Towns
TownList['Littleroot Town'] = new Town('Littleroot Town', GameConstants.Region.hoenn, {
    shop: LittleRootTownShop,
});
TownList['Oldale Town'] = new Town('Oldale Town', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, 101)],
});
TownList['Petalburg City'] = new Town('Petalburg City', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, 102)],
});
TownList['Rustboro City'] = new Town('Rustboro City', GameConstants.Region.hoenn, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Petalburg Woods'))],
    shop: RustboroCityShop,
});
TownList['Dewford Town'] = new Town('Dewford Town', GameConstants.Region.hoenn, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rusturf Tunnel'))],
    shop: DewfordTownShop,
});
TownList['Slateport City'] = new Town('Slateport City', GameConstants.Region.hoenn, {
    requirements: [
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Granite Cave')),
        new GymBadgeRequirement(BadgeTypes.Knuckle),
    ],
    shop: SlateportCityShop,
});
TownList['Mauville City'] = new Town('Mauville City', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, 110)],
    shop: MauvilleCityShop,
});
TownList['Verdanturf Town'] = new Town('Verdanturf Town', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, 117)],
    shop: VerdanturfTownShop,
});
TownList['Lavaridge Town'] = new Town('Lavaridge Town', GameConstants.Region.hoenn, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Jagged Pass'))],
    shop: LavaridgeTownShop,
});
TownList['Fallarbor Town'] = new Town('Fallarbor Town', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, 113)],
    shop: FallarborTownShop,
});
TownList['Fortree City'] = new Town('Fortree City', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, 119)],
    shop: FortreeCityShop,
});
TownList['LilyCove City'] = new Town('LilyCove City', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, 121)],
    shop: LilyCoveCityShop,
    npcs: [BigSpender],
});
TownList['Mossdeep City'] = new Town('Mossdeep City', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, 125)],
    shop: MossdeepCityShop,
});
TownList['Sootopolis City'] = new Town('Sootopolis City', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, 126), new GymBadgeRequirement(BadgeTypes.Mind)],
    shop: SootopolisCityShop,
    npcs: [SootopolisWallace],
});
TownList['Ever Grande City'] = new Town('Ever Grande City', GameConstants.Region.hoenn, {
    requirements: [new GymBadgeRequirement(BadgeTypes.Rain)],
    shop: EverGrandeCityShop,
});
TownList['Pokemon League Hoenn'] = new Town('Pokemon League', GameConstants.Region.hoenn, {
    requirements: [
        new RouteKillRequirement(10, 128),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Hoenn')),
    ],
});
TownList['Pacifidlog Town'] = new Town('Pacifidlog Town', GameConstants.Region.hoenn, {
    requirements: [new RouteKillRequirement(10, 131)],
    shop: PacifidlogTownShop,
});
TownList['Battle Frontier'] = new Town('Battle Frontier', GameConstants.Region.hoenn, {
    requirements: [new GymBadgeRequirement(BadgeTypes.Elite_HoennChampion)],
    shop: BattleFrontierShop,
});
//Hoenn Dungeons
TownList['Petalburg Woods'] = new DungeonTown('Petalburg Woods', GameConstants.Region.hoenn, [new RouteKillRequirement(10, 104)]);
TownList['Rusturf Tunnel'] = new DungeonTown('Rusturf Tunnel', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, 116),
    new GymBadgeRequirement(BadgeTypes.Stone),
]);
TownList['Granite Cave'] = new DungeonTown('Granite Cave', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rusturf Tunnel'))]);
TownList['Fiery Path'] = new DungeonTown('Fiery Path', GameConstants.Region.hoenn, [new RouteKillRequirement(10, 112)]);
TownList['Meteor Falls'] = new DungeonTown('Meteor Falls', GameConstants.Region.hoenn, [new RouteKillRequirement(10, 114)]);
TownList['Mt. Chimney'] = new DungeonTown('Mt. Chimney', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Meteor Falls'))]);
TownList['Jagged Pass'] = new DungeonTown('Jagged Pass', GameConstants.Region.hoenn, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Chimney'))]);
TownList['New Mauville'] = new DungeonTown('New Mauville', GameConstants.Region.hoenn, [new GymBadgeRequirement(BadgeTypes.Balance)]);
TownList['Mt. Pyre'] = new DungeonTown('Mt. Pyre', GameConstants.Region.hoenn, [new RouteKillRequirement(10, 122)]);
TownList['Shoal Cave'] = new DungeonTown('Shoal Cave', GameConstants.Region.hoenn, [new RouteKillRequirement(10, 125)]);
TownList['Cave of Origin'] = new DungeonTown('Cave of Origin', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, 126),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seafloor Cavern')),
]);
TownList['Seafloor Cavern'] = new DungeonTown('Seafloor Cavern', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, 128),
    new GymBadgeRequirement(BadgeTypes.Mind),
]);
TownList['Sky Pillar'] = new DungeonTown('Sky Pillar', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, 131),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Cave of Origin')),
]);
TownList['Victory Road Hoenn'] = new DungeonTown('Victory Road Hoenn', GameConstants.Region.hoenn, [new GymBadgeRequirement(BadgeTypes.Rain)]);
TownList['Sealed Chamber'] = new DungeonTown('Sealed Chamber', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, 134),
    new GymBadgeRequirement(BadgeTypes.Mind),
]);
//Sinnoh Shops
const TwinleafTownShop = new Shop([
    ItemList['Pokeball'],
]);
const OreburghCityShop = new Shop([
    ItemList['Mystery_egg'],
]);
const EternaCityShop = new Shop([
    ItemList['Grass_egg'],
]);
const HearthomeCityShop = new Shop([
    ItemList['Soothe_bell'],
    ItemList['Fire_egg'],
]);
const SolaceonTownShop = new Shop([
    ItemList['Dawn_stone'],
    ItemList['Dusk_stone'],
    ItemList['Shiny_stone'],
    ItemList['Spiritomb'],
]);
const VeilstoneCityShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Greatball'],
    ItemList['Ultraball'],
    ItemList['SmallRestore'],
    ItemList['MediumRestore'],
    ItemList['LargeRestore'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Lucky_egg'],
    ItemList['Token_collector'],
    ItemList['Item_magnet'],
    ItemList['Lucky_incense'],
]);
const CelesticTownShop = new Shop([
    ItemList['Dragon_egg'],
]);
const CanalaveCityShop = new Shop([
    ItemList['Fighting_egg'],
]);
const PalParkShop = new Shop([
    ItemList['Razor_claw'],
    ItemList['Razor_fang'],
    ItemList['Combee'],
    ItemList['Burmy (plant)'],
    ItemList['Cherubi'],
]);
const SunyshoreCityShop = new Shop([
    ItemList['Electric_egg'],
]);
const SurvivalAreaShop = new Shop([
    ItemList['Electirizer'],
    ItemList['Magmarizer'],
]);
const ResortAreaShop = new Shop([
    ItemList['Reaper_cloth'],
    ItemList['Dubious_disc'],
    ItemList['Protector'],
]);
const PastoriaShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Skorupi'],
    ItemList['Water_egg'],
]);
//Sinnoh NPCs
const FloaramaLeafeonTip = new NPC('Flower Girl', [
    'Something amazing just happened!',
    'My friend was taking their Eevee on a walk through Eterna Forest, and it suddenly evolved into a Leafeon!',
    'Can you believe that?',
]);
const SnowpointGlaceonTip = new NPC('Young Girl', [
    'Someone told me that training an Eevee in Lake Acuity will make it evolve something new.',
    'They must be lying, how can that be true?!',
]);
const OreburghConstructionWorker = new NPC('Construction Worker', [
    'I was doing some exploring in Mt. Coronet last week, and my Nosepass gained a lot of levels.',
    'I had a big suprise when he reached level 20 though!',
]);
const HearthomeContestFan = new NPC('Contest Fan', [
    'My favourite contestant had a big reveal for us this week!',
    'Their prized Magneton had evolved into a Magnezone!',
    'I\'m so happy for them, all of that training in Mt. Coronet must have paid off!',
]);
//Sinnoh Towns
TownList['Twinleaf Town'] = new Town('Twinleaf Town', GameConstants.Region.sinnoh, {
    shop: TwinleafTownShop,
});
TownList['Sandgem Town'] = new Town('Sandgem Town', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, 201)],
});
TownList['Jubilife City'] = new Town('Jubilife City', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, 202)],
});
TownList['Oreburgh City'] = new Town('Oreburgh City', GameConstants.Region.sinnoh, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Oreburgh Gate'))],
    shop: OreburghCityShop,
    npcs: [OreburghConstructionWorker],
});
TownList['Floaroma Town'] = new Town('Floaroma Town', GameConstants.Region.sinnoh, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ravaged Path'))],
    npcs: [FloaramaLeafeonTip],
});
TownList['Eterna City'] = new Town('Eterna City', GameConstants.Region.sinnoh, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Eterna Forest'))],
    shop: EternaCityShop,
});
TownList['Hearthome City'] = new Town('Hearthome City', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, 208)],
    shop: HearthomeCityShop,
    npcs: [HearthomeContestFan],
});
TownList['Solaceon Town'] = new Town('Solaceon Town', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, 209)],
    shop: SolaceonTownShop,
});
TownList['Veilstone City'] = new Town('Veilstone City', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, 215)],
    shop: VeilstoneCityShop,
    npcs: [BigSpender],
});
TownList['Pastoria City'] = new Town('Pastoria City', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, 213)],
    shop: PastoriaShop,
});
TownList['Celestic Town'] = new Town('Celestic Town', GameConstants.Region.sinnoh, {
    requirements: [
        new RouteKillRequirement(10, 210),
        new GymBadgeRequirement(BadgeTypes.Fen),
    ],
    shop: CelesticTownShop,
});
TownList['Pal Park'] = new Town('Pal Park', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, 221)],
    shop: PalParkShop,
});
TownList['Canalave City'] = new Town('Canalave City', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, 218)],
    shop: CanalaveCityShop,
});
TownList['Snowpoint City'] = new Town('Snowpoint City', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, 217)],
    npcs: [SnowpointGlaceonTip],
});
TownList['Sunyshore City'] = new Town('Sunyshore City', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, 222)],
    shop: SunyshoreCityShop,
});
TownList['Pokemon League Sinnoh'] = new Town('Pokemon League Sinnoh', GameConstants.Region.sinnoh, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Sinnoh'))],
});
TownList['Fight Area'] = new Town('Fight Area', GameConstants.Region.sinnoh, {
    requirements: [new GymBadgeRequirement(BadgeTypes.Elite_SinnohChampion)],
});
TownList['Survival Area'] = new Town('Survival Area', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, 225)],
    shop: SurvivalAreaShop,
});
TownList['Resort Area'] = new Town('Resort Area', GameConstants.Region.sinnoh, {
    requirements: [new RouteKillRequirement(10, 229)],
    shop: ResortAreaShop,
});
//Sinnoh Dungeons
TownList['Oreburgh Gate'] = new DungeonTown('Oreburgh Gate', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, 203)]);
TownList['Ravaged Path'] = new DungeonTown('Ravaged Path', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, 204),
    new GymBadgeRequirement(BadgeTypes.Coal),
]);
TownList['Eterna Forest'] = new DungeonTown('Eterna Forest', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, 205),
    new GymBadgeRequirement(BadgeTypes.Coal),
]);
TownList['Old Chateau'] = new DungeonTown('Old Chateau', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, 205),
    new GymBadgeRequirement(BadgeTypes.Forest),
]);
TownList['Wayward Cave'] = new DungeonTown('Wayward Cave', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, 206)]);
TownList['Mt. Coronet South'] = new DungeonTown('Mt. Coronet South', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, 207)]);
TownList['Iron Island'] = new DungeonTown('Iron Island', GameConstants.Region.sinnoh, [new RouteKillRequirement(10, 218)]);
TownList['Mt. Coronet North'] = new DungeonTown('Mt. Coronet North', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, 211),
    new GymBadgeRequirement(BadgeTypes.Mine),
]);
TownList['Distortion World'] = new DungeonTown('Distortion World', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, 214),
    new GymBadgeRequirement(BadgeTypes.Icicle),
]);
TownList['Lake Valor'] = new DungeonTown('Lake Valor', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, 213),
    new GymBadgeRequirement(BadgeTypes.Icicle),
]);
TownList['Lake Verity'] = new DungeonTown('Lake Verity', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, 201),
    new GymBadgeRequirement(BadgeTypes.Icicle),
]);
TownList['Lake Acuity'] = new DungeonTown('Lake Acuity', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, 217),
    new GymBadgeRequirement(BadgeTypes.Icicle),
]);
TownList['Victory Road Sinnoh'] = new DungeonTown('Victory Road Sinnoh', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, 223),
    new GymBadgeRequirement(BadgeTypes.Beacon),
]);
TownList['Spear Pillar'] = new DungeonTown('Spear Pillar', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, 211),
    new GymBadgeRequirement(BadgeTypes.Elite_SinnohChampion),
]);
TownList['Hall of Origin'] = new DungeonTown('Hall of Origin', GameConstants.Region.sinnoh, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Spear Pillar'))]);
TownList['Fullmoon Island'] = new DungeonTown('Fullmoon Island', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeTypes.Elite_SinnohChampion)]);
TownList['Newmoon Island'] = new DungeonTown('Newmoon Island', GameConstants.Region.sinnoh, [new GymBadgeRequirement(BadgeTypes.Elite_SinnohChampion)]);
TownList['Flower Paradise'] = new DungeonTown('Flower Paradise', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, 224),
    new GymBadgeRequirement(BadgeTypes.Elite_SinnohChampion),
]);
TownList['Stark Mountain'] = new DungeonTown('Stark Mountain', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, 227),
    new GymBadgeRequirement(BadgeTypes.Elite_SinnohChampion),
]);
TownList['Snowpoint Temple'] = new DungeonTown('Snowpoint Temple', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, 217),
    new GymBadgeRequirement(BadgeTypes.Elite_SinnohChampion),
]);
//Unova Shops
const AspertiaCityShop = new Shop([
    ItemList['Pokeball'],
]);
const VirbankCityShop = new Shop([
    ItemList['Greatball'],
]);
const CasteliaCityShop = new Shop([
    ItemList['Trade_stone'],
    ItemList['Water_egg'],
]);
const NimbasaCityShop = new Shop([
    ItemList['Grass_egg'],
    ItemList['Electric_egg'],
]);
const MistraltonCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Thunder_stone'],
]);
const LentimasTownShop = new Shop([
    ItemList['Fire_egg'],
]);
const LacunosaTownShop = new Shop([
    ItemList['Fighting_egg'],
]);
const OpelucidCityShop = new Shop([
    ItemList['Pokeball'],
    ItemList['Greatball'],
    ItemList['Ultraball'],
    ItemList['SmallRestore'],
    ItemList['MediumRestore'],
    ItemList['LargeRestore'],
    ItemList['xAttack'],
    ItemList['xClick'],
    ItemList['Lucky_egg'],
    ItemList['Token_collector'],
    ItemList['Item_magnet'],
    ItemList['Lucky_incense'],
]);
const IcirrusCityShop = new Shop([
    ItemList['Dragon_egg'],
]);
const BlackAndWhiteParkShop = new Shop([
    ItemList['Moon_stone'],
    ItemList['Sun_stone'],
]);
const NacreneCityShop = new Shop([
    ItemList['Soothe_bell'],
]);
const StriatornCityShop = new Shop([
    ItemList['Leaf_stone'],
    ItemList['Water_stone'],
    ItemList['Fire_stone'],
]);
const AccumulaTownShop = new Shop([
    ItemList['Dusk_stone'],
    ItemList['Shiny_stone'],
]);
const AnvilleTownShop = new Shop([
    ItemList['Meloetta (pirouette)'],
]);
//Unova Towns
TownList['Aspertia City'] = new Town('Aspertia City', GameConstants.Region.unova, {
    shop: AspertiaCityShop,
});
TownList['Floccesy Town'] = new Town('Floccesy Town', GameConstants.Region.unova, {
    requirements: [new RouteKillRequirement(10, 19)],
});
TownList['Virbank City'] = new Town('Virbank City', GameConstants.Region.unova, {
    requirements: [new GymBadgeRequirement(BadgeTypes.Basic)],
    shop: VirbankCityShop,
});
TownList['Castelia City'] = new Town('Castelia City', GameConstants.Region.unova, {
    requirements: [new GymBadgeRequirement(BadgeTypes.Toxic)],
    shop: CasteliaCityShop,
    dungeon: dungeonList['Castelia Sewers'],
});
TownList['Nimbasa City'] = new Town('Nimbasa City', GameConstants.Region.unova, {
    requirements: [
        new RouteKillRequirement(10, 4),
        new GymBadgeRequirement(BadgeTypes.Insect),
    ],
    shop: NimbasaCityShop,
});
TownList['Driftveil City'] = new Town('Driftveil City', GameConstants.Region.unova, {
    requirements: [
        new RouteKillRequirement(10, 5),
        new GymBadgeRequirement(BadgeTypes.Bolt),
    ],
});
TownList['Mistralton City'] = new Town('Mistralton City', GameConstants.Region.unova, {
    requirements: [
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Chargestone Cave')),
        new GymBadgeRequirement(BadgeTypes.Quake),
    ],
    shop: MistraltonCityShop,
});
TownList['Lentimas Town'] = new Town('Lentimas Town', GameConstants.Region.unova, {
    requirements: [new GymBadgeRequirement(BadgeTypes.Jet)],
    shop: LentimasTownShop,
});
TownList['Undella Town'] = new Town('Undella Town', GameConstants.Region.unova, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))],
});
TownList['Lacunosa Town'] = new Town('Lacunosa Town', GameConstants.Region.unova, {
    requirements: [new RouteKillRequirement(10, 13)],
    shop: LacunosaTownShop,
});
TownList['Opelucid City'] = new Town('Opelucid City', GameConstants.Region.unova, {
    requirements: [new RouteKillRequirement(10, 11)],
    shop: OpelucidCityShop,
});
TownList['Humilau City'] = new Town('Humilau City', GameConstants.Region.unova, {
    requirements: [new RouteKillRequirement(10, 21)],
});
TownList['Pokemon League Unova'] = new Town('Pokemon League Unova', GameConstants.Region.unova, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Unova'))],
});
TownList['Icirrus City'] = new Town('Icirrus City', GameConstants.Region.unova, {
    requirements: [new OneFromManyRequirement([
            new RouteKillRequirement(10, 8),
            new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Twist Mountain')),
        ])],
    shop: IcirrusCityShop,
});
TownList['Black and White Park'] = new Town('Black and White Park', GameConstants.Region.unova, {
    requirements: [new OneFromManyRequirement([
            new MultiRequirement([
                new GymBadgeRequirement(BadgeTypes.Elite_UnovaChampion),
                new RouteKillRequirement(10, 14),
            ]),
            new RouteKillRequirement(10, 15),
        ])],
    shop: BlackAndWhiteParkShop,
});
TownList['Nacrene City'] = new Town('Nacrene City', GameConstants.Region.unova, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pinwheel Forest'))],
    shop: NacreneCityShop,
});
TownList['Striatorn City'] = new Town('Striatorn City', GameConstants.Region.unova, {
    requirements: [new RouteKillRequirement(10, 3)],
    shop: StriatornCityShop,
});
TownList['Accumula Town'] = new Town('Accumula Town', GameConstants.Region.unova, {
    requirements: [new RouteKillRequirement(10, 2)],
    shop: AccumulaTownShop,
});
TownList['Nuvema Town'] = new Town('Nuvema Town', GameConstants.Region.unova, {
    requirements: [new RouteKillRequirement(10, 1)],
});
TownList['Anville Town'] = new Town('Anville Town', GameConstants.Region.unova, {
    requirements: [new ObtainedPokemonRequirement(pokemonMap['Meloetta (aria)'])],
    shop: AnvilleTownShop,
});
//Unova Dungeons
TownList['Pledge Grove'] = new DungeonTown('Pledge Grove', GameConstants.Region.unova, [new ObtainedPokemonRequirement(pokemonMap.Keldeo)]);
TownList['Floccesy Ranch'] = new DungeonTown('Floccesy Ranch', GameConstants.Region.unova, [new RouteKillRequirement(10, 20)]);
TownList['Virbank Complex'] = new DungeonTown('Virbank Complex', GameConstants.Region.unova, 
//Optional dungeon, no unique mons, safe to scrap
[new GymBadgeRequirement(BadgeTypes.Basic)]);
TownList['Liberty Garden'] = new DungeonTown('Liberty Garden', GameConstants.Region.unova, 
//Victini dungeon, maybe unlock later
[new GymBadgeRequirement(BadgeTypes.Toxic)]);
TownList['Castelia Sewers'] = new DungeonTown('Castelia Sewers', GameConstants.Region.unova, [new GymBadgeRequirement(BadgeTypes.Toxic)]);
TownList['Relic Passage'] = new DungeonTown('Relic Passage', GameConstants.Region.unova, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Castelia Sewers'))]);
TownList['Desert Resort'] = new DungeonTown('Desert Resort', GameConstants.Region.unova, [
    new RouteKillRequirement(10, 4),
    new GymBadgeRequirement(BadgeTypes.Insect),
]);
TownList['Relic Castle'] = new DungeonTown('Relic Castle', GameConstants.Region.unova, [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Desert Resort'))]);
TownList['Lostlorn Forest'] = new DungeonTown('Lostlorn Forest', GameConstants.Region.unova, [new RouteKillRequirement(10, 16)]);
TownList['Chargestone Cave'] = new DungeonTown('Chargestone Cave', GameConstants.Region.unova, [new RouteKillRequirement(10, 6)]);
TownList['Mistralton Cave'] = new DungeonTown('Mistralton Cave', GameConstants.Region.unova, [new GymBadgeRequirement(BadgeTypes.Quake)]);
TownList['Celestial Tower'] = new DungeonTown('Celestial Tower', GameConstants.Region.unova, [new RouteKillRequirement(10, 7)]);
TownList['Reversal Mountain'] = new DungeonTown('Reversal Mountain', GameConstants.Region.unova, [new GymBadgeRequirement(BadgeTypes.Jet)]);
TownList['Strange House'] = new DungeonTown('Strange House', GameConstants.Region.unova, 
// Optional dungeon, no unique mons, safe to scrap
[new GymBadgeRequirement(BadgeTypes.Jet)]);
TownList['Undella Bay'] = new DungeonTown('Undella Bay', GameConstants.Region.unova, 
// Should really be a route
[new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))]);
TownList['Seaside Cave'] = new DungeonTown('Seaside Cave', GameConstants.Region.unova, [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Undella Bay')),
    new GymBadgeRequirement(BadgeTypes.Legend),
]);
TownList['Giant Chasm'] = new DungeonTown('Giant Chasm', GameConstants.Region.unova, [
    new RouteKillRequirement(10, 22),
    new GymBadgeRequirement(BadgeTypes.Wave),
]);
TownList['Cave of Being'] = new DungeonTown('Cave of Being', GameConstants.Region.unova, [new RouteKillRequirement(10, 23)]);
TownList['Abundant Shrine'] = new DungeonTown('Abundant Shrine', GameConstants.Region.unova, [
    new RouteKillRequirement(10, 23),
    new ObtainedPokemonRequirement(pokemonMap.Tornadus),
    new ObtainedPokemonRequirement(pokemonMap.Thundurus),
]);
TownList['Victory Road'] = new DungeonTown('Victory Road', GameConstants.Region.unova, [new RouteKillRequirement(10, 23)]);
TownList['Twist Mountain'] = new DungeonTown('Twist Mountain', GameConstants.Region.unova, [new OneFromManyRequirement([
        new MultiRequirement([
            new GymBadgeRequirement(BadgeTypes.Elite_UnovaChampion),
            new RouteKillRequirement(10, 7),
        ]),
        new RouteKillRequirement(10, 8),
    ])]);
TownList['Dragonspiral Tower'] = new DungeonTown('Dragonspiral Tower', GameConstants.Region.unova, [new OneFromManyRequirement([
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Twist Mountain')),
        new RouteKillRequirement(10, 8),
    ])]);
TownList['Moor of Icirrus'] = new DungeonTown('Moor of Icirrus', GameConstants.Region.unova, [
    new RouteKillRequirement(10, 8),
    new ObtainedPokemonRequirement(pokemonMap.Cobalion),
    new ObtainedPokemonRequirement(pokemonMap.Terrakion),
    new ObtainedPokemonRequirement(pokemonMap.Virizion),
]);
TownList['Pinwheel Forest'] = new DungeonTown('Pinwheel Forest', GameConstants.Region.unova, [new GymBadgeRequirement(BadgeTypes.Elite_UnovaChampion)]);
TownList['Wellspring Cave'] = new DungeonTown('Wellspring Cave', GameConstants.Region.unova, 
// Optional dungeon, no unique mons, safe to scrap
[new RouteKillRequirement(10, 3)]);
TownList['Dreamyard'] = new DungeonTown('Dreamyard', GameConstants.Region.unova, [new RouteKillRequirement(10, 3)]);
TownList['P2 Laboratory'] = new DungeonTown('P2 Laboratory', GameConstants.Region.unova, [new RouteKillRequirement(10, 17)]);
//Kalos Shops
const VanivilleTownShop = new Shop([
    ItemList['Pokeball'],
]);
const SantaluneCityShop = new Shop([
    ItemList['Mystery_egg'],
]);
const LumioseCityShop = new Shop([
    ItemList['Greatball'],
    ItemList['Electric_egg'],
]);
const AmbretteTownShop = new Shop([
    ItemList['Water_egg'],
]);
const GeosengeTownShop = new Shop([
    ItemList['Fire_egg'],
]);
const ShalourCityShop = new Shop([
    ItemList['Fighting_egg'],
]);
const CoumarineCityShop = new Shop([
    ItemList['Ultraball'],
    ItemList['Grass_egg'],
]);
const LaverreCityShop = new Shop([
    ItemList['Sachet'],
    ItemList['Whipped_dream'],
]);
const DendemilleTownShop = new Shop([
    ItemList['Dusk_stone'],
    ItemList['Shiny_stone'],
]);
const AnistarCityShop = new Shop([
    ItemList['Sun_stone'],
]);
const CouriwayTownShop = new Shop([
    ItemList['Dragon_egg'],
]);
//Kalos Towns
TownList['Vaniville Town'] = new Town('Vaniville Town', GameConstants.Region.kalos, {
    shop: VanivilleTownShop,
});
TownList['Aquacorde Town'] = new Town('Aquacorde Town', GameConstants.Region.kalos);
TownList['Santalune City'] = new Town('Santalune City', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, 3)],
    shop: SantaluneCityShop,
});
TownList['Lumiose City'] = new Town('Lumiose City', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, 3)],
    shop: LumioseCityShop,
});
TownList['Camphrier Town'] = new Town('Camphrier Town', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, 4)],
});
TownList['Ambrette Town'] = new Town('Ambrette Town', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, 8)],
    shop: AmbretteTownShop,
});
TownList['Cyllage City'] = new Town('Cyllage City', GameConstants.Region.kalos, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glittering Cave'))],
});
TownList['Geosenge Town'] = new Town('Geosenge Town', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, 10)],
    shop: GeosengeTownShop,
});
TownList['Shalour City'] = new Town('Shalour City', GameConstants.Region.kalos, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reflection Cave'))],
    shop: ShalourCityShop,
});
TownList['Coumarine City'] = new Town('Coumarine City', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, 12)],
    shop: CoumarineCityShop,
});
TownList['Laverre City'] = new Town('Laverre City', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, 14)],
    shop: LaverreCityShop,
});
TownList['Dendemille Town'] = new Town('Dendemille Town', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, 15)],
    shop: DendemilleTownShop,
});
TownList['Anistar City'] = new Town('Anistar City', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, 17)],
    shop: AnistarCityShop,
});
TownList['Couriway Town'] = new Town('Couriway Town', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, 18)],
    shop: CouriwayTownShop,
});
TownList['Snowbelle City'] = new Town('Snowbelle City', GameConstants.Region.kalos, {
    requirements: [new RouteKillRequirement(10, 19)],
});
TownList['Pokémon League Kalos'] = new Town('Pokémon League Kalos', GameConstants.Region.kalos, {
    requirements: [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Kalos'))],
});
//Kalos Dungeons
TownList['Santalune Forest'] = new DungeonTown('Santalune Forest', GameConstants.Region.kalos, [new RouteKillRequirement(10, 2)]);
TownList['Parfum Palace'] = new DungeonTown('Parfum Palace', GameConstants.Region.kalos, [new RouteKillRequirement(10, 6)]);
TownList['Connecting Cave'] = new DungeonTown('Connecting Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, 7)]);
TownList['Glittering Cave'] = new DungeonTown('Glittering Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, 9)]);
TownList['Reflection Cave'] = new DungeonTown('Reflection Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, 11)]);
//Tower of Mastery?
TownList['Azure bay'] = new DungeonTown('Azure bay', GameConstants.Region.kalos, [new RouteKillRequirement(10, 12)]);
//Sea Spirit's Den?
//Kalos Power Plant?
TownList['Lost Hotel'] = new DungeonTown('Lost Hotel', GameConstants.Region.kalos, [new RouteKillRequirement(10, 15)]);
TownList['Frost Cavern'] = new DungeonTown('Frost Cavern', GameConstants.Region.kalos, [new RouteKillRequirement(10, 15)]);
TownList['Team Flare Secret HQ'] = new DungeonTown('Team Flare Secret HQ', GameConstants.Region.kalos, [new GymBadgeRequirement(BadgeTypes.Psychic)]);
TownList['Terminus Cave'] = new DungeonTown('Terminus Cave', GameConstants.Region.kalos, [new RouteKillRequirement(10, 18)]);
TownList['Pokémon Village'] = new DungeonTown('Pokémon Village', GameConstants.Region.kalos, [new RouteKillRequirement(10, 20)]);
TownList['Victory Road Kalos'] = new DungeonTown('Victory Road Kalos', GameConstants.Region.kalos, [
    new GymBadgeRequirement(BadgeTypes.Iceberg),
    new OneFromManyRequirement([
        new RouteKillRequirement(10, 21),
        new RouteKillRequirement(10, 22),
    ]),
]);
//Unknown Cave?
/* eslint-disable array-bracket-newline */
///<reference path="Town.ts"/>
class PokemonLeague extends Town {
    constructor(name, region, requirements, shop, gyms) {
        super(name, region, { requirements, shop });
        this.gym(null);
        this.gymList = ko.observableArray();
        for (const gym of gyms) {
            this.gymList.push(ko.observable(gymList[gym]));
        }
    }
    setupGymTowns() {
        for (const gym of this.gymList()) {
            TownList[gym().town] = TownList[this.name()];
        }
    }
}
// Share a shop across all Elite 4s
const indigoPlateauShop = new Shop([
    new PokeballItem(GameConstants.Pokeball.Masterball, 10000000, GameConstants.Currency.money, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.money]}` }),
    new PokeballItem(GameConstants.Pokeball.Masterball, 75000, GameConstants.Currency.dungeonToken, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.dungeonToken]}` }),
    new PokeballItem(GameConstants.Pokeball.Masterball, 3000, GameConstants.Currency.questPoint, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.questPoint]}` }),
    new PokeballItem(GameConstants.Pokeball.Masterball, 3000, GameConstants.Currency.farmPoint, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.farmPoint]}` }),
    new PokeballItem(GameConstants.Pokeball.Masterball, 50, GameConstants.Currency.diamond, { multiplier: 1.35, multiplierDecrease: false, saveName: `${GameConstants.Pokeball[GameConstants.Pokeball.Masterball]}|${GameConstants.Currency[GameConstants.Currency.diamond]}` }),
    ItemList['RareCandy'],
    ItemList['Protein'],
]);
TownList['Indigo Plateau Kanto'] = new PokemonLeague('Indigo Plateau Kanto', GameConstants.Region.kanto, [
    new RouteKillRequirement(10, 23),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road')),
], indigoPlateauShop, ['Elite Lorelei', 'Elite Bruno', 'Elite Agatha', 'Elite Lance', 'Champion Blue']);
TownList['Indigo Plateau Kanto'].setupGymTowns();
TownList['Indigo Plateau Johto'] = new PokemonLeague('Indigo Plateau Johto', GameConstants.Region.johto, [new RouteKillRequirement(10, 27)], indigoPlateauShop, ['Elite Will', 'Elite Koga', 'Elite Bruno2', 'Elite Karen', 'Champion Lance']);
TownList['Indigo Plateau Johto'].setupGymTowns();
TownList['Pokemon League Hoenn'] = new PokemonLeague('Pokemon League Hoenn', GameConstants.Region.hoenn, [
    new RouteKillRequirement(10, 128),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Hoenn')),
], indigoPlateauShop, ['Elite Sidney', 'Elite Phoebe', 'Elite Glacia', 'Elite Drake', 'Champion Wallace']);
TownList['Pokemon League Hoenn'].setupGymTowns();
TownList['Pokemon League Sinnoh'] = new PokemonLeague('Pokemon League Sinnoh', GameConstants.Region.sinnoh, [
    new RouteKillRequirement(10, 223),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Sinnoh')),
], indigoPlateauShop, ['Elite Aaron', 'Elite Bertha', 'Elite Flint', 'Elite Lucian', 'Champion Cynthia']);
TownList['Pokemon League Sinnoh'].setupGymTowns();
TownList['Pokemon League Unova'] = new PokemonLeague('Pokemon League Unova', GameConstants.Region.unova, [
    new RouteKillRequirement(10, 23),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Unova')),
], indigoPlateauShop, ['Elite Shauntal', 'Elite Marshal', 'Elite Grimsley', 'Elite Caitlin', 'Champion Iris']);
TownList['Pokemon League Unova'].setupGymTowns();
TownList['Pokemon League Kalos'] = new PokemonLeague('Pokemon League Kalos', GameConstants.Region.kalos, [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, 21),
        new RouteKillRequirement(10, 22),
    ]),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Kalos')),
], indigoPlateauShop, ['Elite Malva', 'Elite Siebold', 'Elite Wikstrom', 'Elite Drasna', 'Champion Diantha']);
TownList['Pokemon League Kalos'].setupGymTowns();
///<reference path="PokemonLeague.ts"/>
/*
class IndigoPlateau extends PokemonLeague {

    constructor(shop?: Shop) {
        super("Indigo Plateau Kanto", [23], shop, null, "Victory Road");
        this.gym(null);
        this.gymList = ko.observableArray<KnockoutObservable<Gym>>();
        this.gymList.push(ko.observable(gymList["Elite Lorelei"]));
        this.gymList.push(ko.observable(gymList["Elite Bruno"]));
        this.gymList.push(ko.observable(gymList["Elite Agatha"]));
        this.gymList.push(ko.observable(gymList["Elite Lance"]));
        this.gymList.push(ko.observable(gymList["Champion Blue"]));

        //todo add champion
    }

}
*/
/*
TownList["Elite Lorelei"] = TownList["Indigo Plateau Kanto"];
TownList["Elite Bruno"] = TownList["Indigo Plateau Kanto"];
TownList["Elite Agatha"] = TownList["Indigo Plateau Kanto"];
TownList["Elite Lance"] = TownList["Indigo Plateau Kanto"];
TownList["Champion Blue"] = TownList["Indigo Plateau Kanto"];
*/
class DamageCalculator {
    static totalDamage() {
        const ignoreRegionMultiplier = DamageCalculator.region() == GameConstants.Region.none;
        return App.game.party.calculatePokemonAttack(DamageCalculator.type1(), DamageCalculator.type2(), ignoreRegionMultiplier, DamageCalculator.region(), DamageCalculator.includeBreeding(), DamageCalculator.baseAttackOnly());
    }
    static getDamageByTypes() {
        const typedamage = new Array(GameHelper.enumLength(PokemonType) - 1).fill(0);
        const ignoreRegionMultiplier = this.region() == GameConstants.Region.none;
        for (const pokemon of App.game.party.caughtPokemon) {
            const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
            if (dataPokemon.type1 === PokemonType.None) {
                continue;
            }
            const attack = App.game.party.calculateOnePokemonAttack(pokemon, this.type1(), this.type2(), this.region(), ignoreRegionMultiplier, this.includeBreeding(), this.baseAttackOnly());
            typedamage[dataPokemon.type1] += attack / 2;
            const otherType = dataPokemon.type2 !== PokemonType.None ? dataPokemon.type2 : dataPokemon.type1;
            typedamage[otherType] += attack / 2;
        }
        return typedamage;
    }
    static getTypeDetail() {
        return App.game.party.caughtPokemon.filter(pokemon => {
            const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
            return dataPokemon.type1 == DamageCalculator.detailType() || dataPokemon.type2 == DamageCalculator.detailType();
        }).reduce((details, pokemon) => {
            details.push(DamageCalculator.getOneTypeDetail(pokemon));
            return details;
        }, []).sort((a, b) => b.damage - a.damage);
    }
    static getOneTypeDetail(pokemon) {
        const ignoreRegionMultiplier = DamageCalculator.region() == GameConstants.Region.none;
        const dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
        return {
            id: dataPokemon.id,
            name: dataPokemon.name,
            type1: dataPokemon.type1,
            type2: dataPokemon.type2,
            damage: App.game.party.calculateOnePokemonAttack(pokemon, DamageCalculator.type1(), DamageCalculator.type2(), DamageCalculator.region(), ignoreRegionMultiplier, DamageCalculator.includeBreeding(), DamageCalculator.baseAttackOnly()),
        };
    }
}
DamageCalculator.type1 = ko.observable(PokemonType.None);
DamageCalculator.type2 = ko.observable(PokemonType.None);
DamageCalculator.region = ko.observable(GameConstants.Region.none);
DamageCalculator.includeBreeding = ko.observable(false);
DamageCalculator.baseAttackOnly = ko.observable(false);
DamageCalculator.detailType = ko.observable(PokemonType.None);
DamageCalculator.observableTypeDamageArray = ko.pureComputed(DamageCalculator.getDamageByTypes, DamageCalculator);
DamageCalculator.observableTypeDetails = ko.pureComputed(DamageCalculator.getTypeDetail);
DamageCalculator.observableTotalDamage = ko.pureComputed(DamageCalculator.totalDamage);
class TypeHelper {
    //@formatter:on
    /*eslint-enable */
    static getAttackModifier(a1, a2, d1, d2) {
        if (a1 == PokemonType.None || d1 == PokemonType.None) {
            return 1;
        }
        //TODO factor in shard value
        let m1 = TypeHelper.typeMatrix[a1][d1];
        m1 += (App.game.shards.getShardUpgrade(a1, this.valueToType(m1)) * Shards.SHARD_UPGRADE_STEP);
        let m2 = 1, m3 = 1, m4 = 1;
        if (d2 != PokemonType.None) {
            m2 = TypeHelper.typeMatrix[a1][d2];
            m2 += (App.game.shards.getShardUpgrade(a1, this.valueToType(m2)) * Shards.SHARD_UPGRADE_STEP);
        }
        if (a2 != PokemonType.None) {
            m3 = TypeHelper.typeMatrix[a2][d1];
            m3 += (App.game.shards.getShardUpgrade(a2, this.valueToType(m3)) * Shards.SHARD_UPGRADE_STEP);
        }
        if (a2 != PokemonType.None && d2 != PokemonType.None) {
            m4 = TypeHelper.typeMatrix[a2][d2];
            m4 += (App.game.shards.getShardUpgrade(a2, this.valueToType(m4)) * Shards.SHARD_UPGRADE_STEP);
        }
        return m1 * m2 * m3 * m4;
    }
    static typeToValue(type) {
        return GameConstants.TypeEffectivenessValue[GameConstants.TypeEffectivenessValue[type]];
    }
    static valueToType(value) {
        switch (value) {
            case GameConstants.TypeEffectivenessValue.Immune:
                return GameConstants.TypeEffectiveness.Immune;
            case GameConstants.TypeEffectivenessValue.NotVery:
                return GameConstants.TypeEffectiveness.NotVery;
            case GameConstants.TypeEffectivenessValue.Normal:
                return GameConstants.TypeEffectiveness.Normal;
            case GameConstants.TypeEffectivenessValue.Very:
                return GameConstants.TypeEffectiveness.Very;
        }
    }
}
//@formatter:off
/*eslint-disable */
TypeHelper.typeMatrix = [
    //                E              F
    //                L              I                   P
    // N              E              G    P    G    F    S                   D
    // O         W    C    G         H    O    R    L    Y              G    R         S    F  <- Defending type
    // R    F    A    T    R         T    I    O    Y    C         R    H    A    D    T    A
    // M    I    T    R    A    I    I    S    U    I    H    B    O    O    G    A    E    I   Attack type
    // A    R    E    I    S    C    N    O    N    N    I    U    C    S    O    R    E    R        |
    // L    E    R    C    S    E    G    N    D    G    C    G    K    T    N    K    L    Y        v
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.5, 0, 1, 1, 0.5, 1],
    [1, 0.5, 0.5, 1, 2, 2, 1, 1, 1, 1, 1, 2, 0.5, 1, 0.5, 1, 2, 1],
    [1, 2, 0.5, 1, 0.5, 1, 1, 1, 2, 1, 1, 1, 2, 1, 0.5, 1, 1, 1],
    [1, 1, 2, 0.5, 0.5, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0.5, 1, 1, 1],
    [1, 0.5, 2, 1, 0.5, 1, 1, 0.5, 2, 0.5, 1, 0.5, 2, 1, 0.5, 1, 0.5, 1],
    [1, 0.5, 0.5, 1, 2, 0.5, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 0.5, 1],
    [2, 1, 1, 1, 1, 2, 1, 0.5, 1, 0.5, 0.5, 0.5, 2, 0, 1, 2, 2, 0.5],
    [1, 1, 1, 1, 2, 1, 1, 0.5, 0.5, 1, 1, 1, 0.5, 0.5, 1, 1, 0, 2],
    [1, 2, 1, 2, 0.5, 1, 1, 2, 1, 0, 1, 0.5, 2, 1, 1, 1, 2, 1],
    [1, 1, 1, 0.5, 2, 1, 2, 1, 1, 1, 1, 2, 0.5, 1, 1, 1, 0.5, 1],
    [1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 0.5, 1, 1, 1, 1, 0, 0.5, 1],
    [1, 0.5, 1, 1, 2, 1, 0.5, 0.5, 1, 0.5, 2, 1, 1, 0.5, 1, 2, 0.5, 0.5],
    [1, 2, 1, 1, 1, 2, 0.5, 1, 0.5, 2, 1, 2, 1, 1, 1, 1, 0.5, 1],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 0.5, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0.5, 0],
    [1, 1, 1, 1, 1, 1, 0.5, 1, 1, 1, 2, 1, 1, 2, 1, 0.5, 1, 0.5],
    [1, 0.5, 0.5, 0.5, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0.5, 2],
    [1, 0.5, 1, 1, 1, 1, 2, 0.5, 1, 1, 1, 1, 1, 1, 2, 2, 0.5, 1],
];
TypeHelper.typeColors = [
    '595c3b',
    'b10818',
    '294a94',
    'b57b31',
    '4a944a',
    '42a59c',
    'b54a4a',
    '7b42c6',
    '946b4a',
    '218cb5',
    'ce6363',
    '8cb521',
    'a58c4a',
    '605a72',
    '8c424a',
    '4a6b84',
    '737373',
    'd694ce',
];
TypeHelper.typeColorsLocked = [
    'd3d4c4',
    'fb9d9d',
    '99b6ff',
    'ffda99',
    'aff1a7',
    'b5efef',
    'f1bba7',
    'e7ccff',
    'e3d1b5',
    '99dfff',
    'ffb5ad',
    'dbf99f',
    'e3d1b5',
    'c8c3d5',
    'e7b1b1',
    'bcccdc',
    'cccccc',
    'ffc6e7',
];
class DailyDeal {
    constructor() {
        this.item1 = DailyDeal.randomItem();
        this.amount1 = DailyDeal.randomAmount();
        this.item2 = DailyDeal.randomItem();
        this.amount2 = DailyDeal.randomAmount();
    }
    static randomItem() {
        return UndergroundItem.list[Math.floor(UndergroundItem.list.length * SeededRand.next())];
    }
    static randomAmount() {
        return Math.floor(3 * SeededRand.next()) + 1;
    }
    static generateDeals(maxDeals, date) {
        SeededRand.seedWithDate(date);
        DailyDeal.list.removeAll();
        const temp = [];
        const maxTries = maxDeals * 10;
        let i = 0;
        while (i < maxTries && temp.length < maxDeals) {
            const deal = new DailyDeal();
            if (deal.isValid(temp)) {
                temp.push(deal);
            }
            i++;
        }
        DailyDeal.list.push(...temp);
    }
    isValid(dealList) {
        const item1Name = this.item1.name;
        const item2Name = this.item2.name;
        if (item1Name == item2Name) {
            return false;
        }
        if (this.item1.isStone()) {
            return false;
        }
        if (DailyDeal.sameDealExists(item1Name, item2Name, dealList)) {
            return false;
        }
        if (DailyDeal.reverseDealExists(item1Name, item2Name, dealList)) {
            return false;
        }
        return true;
    }
    static sameDealExists(name1, name2, dealList) {
        for (const deal of dealList) {
            if (deal.item1.name == name1 && deal.item2.name == name2) {
                return true;
            }
        }
        return false;
    }
    static reverseDealExists(name1, name2, dealList) {
        for (const deal of dealList) {
            if (deal.item2.name == name1) {
                if (deal.item1.name == name2) {
                    return true;
                }
                else {
                    return DailyDeal.reverseDealExists(deal.item1.name, name2, dealList);
                }
            }
        }
        return false;
    }
    static canUse(i) {
        const deal = DailyDeal.list.peek()[i];
        const index = player.mineInventoryIndex(deal.item1.id);
        if (index > -1) {
            return player.mineInventory[index].amount() >= deal.amount1;
        }
        else {
            return false;
        }
    }
    static use(i, tradeTimes = 1) {
        const deal = DailyDeal.list.peek()[i];
        const item1Index = player.mineInventoryIndex(deal.item1.id);
        if (DailyDeal.canUse(i)) {
            const amt = player.mineInventory[item1Index].amount();
            const maxTrades = Math.floor(amt / deal.amount1);
            tradeTimes = Math.min(tradeTimes, maxTrades);
            player.mineInventory[item1Index].amount(amt - (deal.amount1 * tradeTimes));
            Underground.gainMineItem(deal.item2.id, deal.amount2 * tradeTimes);
            GameHelper.incrementObservable(App.game.statistics.undergroundDailyDealTrades);
            Underground.sortMineItems(Underground.lastPropSort, false);
        }
    }
}
DailyDeal.list = ko.observableArray();
class Mine {
    static loadMine() {
        const tmpGrid = [];
        const tmpRewardGrid = [];
        Mine.rewardNumbers = [];
        Mine.itemsBuried(0);
        Mine.prospectResult(null);
        for (let i = 0; i < this.sizeY; i++) {
            const row = [];
            const rewardRow = [];
            for (let j = 0; j < this.sizeX; j++) {
                row.push(ko.observable(Math.min(5, Math.max(1, Math.floor(Math.random() * 2 + Math.random() * 3) + 1))));
                rewardRow.push(0);
            }
            tmpGrid.push(row);
            tmpRewardGrid.push(rewardRow);
        }
        Mine.grid = tmpGrid;
        Mine.rewardGrid = tmpRewardGrid;
        for (let i = 0; i < Underground.getMaxItems(); i++) {
            const item = UndergroundItem.getRandomItem();
            const x = Mine.getRandomCoord(this.sizeX, item.space[0].length);
            const y = Mine.getRandomCoord(this.sizeY, item.space.length);
            const res = Mine.canAddReward(x, y, item);
            if (res) {
                Mine.addReward(x, y, item);
            }
        }
        Mine.loadingNewLayer = false;
        Mine.itemsFound(0);
        Underground.showMine();
    }
    static getRandomCoord(max, size) {
        return Math.floor(Math.random() * (max - size - 1)) + 1;
    }
    static canAddReward(x, y, reward) {
        if (Mine.alreadyHasRewardId(reward.id)) {
            return false;
        }
        if (y + reward.space.length >= this.sizeY || x + reward.space[0].length >= this.sizeX) {
            return false;
        }
        for (let i = 0; i < reward.space.length; i++) {
            for (let j = 0; j < reward.space[i].length; j++) {
                if (reward.space[i][j] !== 0) {
                    if (Mine.rewardGrid[i + y][j + x] !== 0) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    static alreadyHasRewardId(id) {
        for (const row of Mine.rewardGrid) {
            for (const item of row) {
                if (item.value === id) {
                    return true;
                }
            }
        }
        return false;
    }
    static addReward(x, y, reward) {
        for (let i = 0; i < reward.space.length; i++) {
            for (let j = 0; j < reward.space[i].length; j++) {
                if (reward.space[i][j] !== 0) {
                    Mine.rewardGrid[i + y][j + x] = {
                        sizeX: reward.space[i].length,
                        sizeY: reward.space.length,
                        x: j,
                        y: i,
                        value: reward.space[i][j],
                        revealed: 0,
                    };
                }
            }
        }
        GameHelper.incrementObservable(Mine.itemsBuried);
        Mine.rewardNumbers.push(reward.id);
    }
    static prospect() {
        if (Mine.prospectResult()) {
            $('#mine-prospect-result').tooltip('show');
            setTimeout(() => $('#mine-prospect-result').tooltip('hide'), 4000);
            return;
        }
        if (Underground.energy < Underground.PROSPECT_ENERGY) {
            return;
        }
        Underground.energy -= Underground.PROSPECT_ENERGY;
        const rewards = Mine.rewardSummary();
        Mine.updateProspectResult(rewards);
    }
    static rewardSummary() {
        return Mine.rewardNumbers.reduce((res, id) => {
            const reward = UndergroundItem.list.find(x => x.id == id);
            if (ItemList[reward.valueType]) {
                res.evoItems++;
            }
            else {
                switch (reward.valueType) {
                    case 'Diamond': {
                        res.totalValue += reward.value;
                        break;
                    }
                    case 'Mine Egg': {
                        res.fossils++;
                        break;
                    }
                    default: {
                        res.plates++;
                    }
                }
            }
            return res;
        }, { fossils: 0, plates: 0, evoItems: 0, totalValue: 0 });
    }
    static updateProspectResult(summary) {
        const text = [];
        if (summary.fossils) {
            text.push(`Fossils: ${summary.fossils}`);
        }
        if (summary.evoItems) {
            text.push(`Evolution Items: ${summary.evoItems}`);
        }
        if (summary.plates) {
            text.push(`Shard Plates: ${summary.plates}`);
        }
        text.push(`Diamond Value: ${summary.totalValue}`);
        Mine.prospectResult(text.join('<br>'));
        $('#mine-prospect-result').tooltip('show');
        setTimeout(() => $('#mine-prospect-result').tooltip('hide'), 2000);
    }
    static click(i, j) {
        if (Mine.toolSelected() == Mine.Tool.Hammer) {
            Mine.hammer(i, j);
        }
        else {
            Mine.chisel(i, j);
        }
    }
    static hammer(x, y) {
        if (Underground.energy >= Underground.HAMMER_ENERGY) {
            if (x < 0 || y < 0) {
                return;
            }
            let hasMined = false;
            for (let i = -1; i < 2; i++) {
                for (let j = -1; j < 2; j++) {
                    if (Mine.grid[Mine.normalizeY(x + i)][Mine.normalizeX(y + j)]() > 0) {
                        hasMined = true;
                    }
                    this.breakTile(x + i, y + j, 1);
                }
            }
            if (hasMined) {
                Underground.energy -= Underground.HAMMER_ENERGY;
            }
        }
    }
    static chisel(x, y) {
        if (Mine.grid[x][y]() > 0) {
            if (Underground.energy >= Underground.CHISEL_ENERGY) {
                this.breakTile(x, y, 2);
                Underground.energy -= Underground.CHISEL_ENERGY;
            }
        }
    }
    static bomb() {
        const tiles = Underground.getBombEfficiency();
        if (Underground.energy >= Underground.BOMB_ENERGY) {
            for (let i = 1; i < tiles; i++) {
                const x = GameConstants.randomIntBetween(1, this.sizeY - 2);
                const y = GameConstants.randomIntBetween(1, this.sizeX - 2);
                this.breakTile(x, y, 2);
            }
            Underground.energy -= Underground.BOMB_ENERGY;
        }
    }
    static skipLayer(shouldConfirm = true) {
        if (!this.skipsRemaining()) {
            return false;
        }
        if (!shouldConfirm || confirm('Skip this mine layer?')) {
            setTimeout(Mine.completed, 1500);
            Mine.loadingNewLayer = true;
            GameHelper.incrementObservable(this.skipsRemaining, -1);
            return true;
        }
    }
    static breakTile(_x, _y, layers = 1) {
        const x = Mine.normalizeY(_x);
        const y = Mine.normalizeX(_y);
        const newlayer = Math.max(0, Mine.grid[x][y]() - layers);
        Mine.grid[x][y](newlayer);
        const reward = Mine.rewardGrid[x][y];
        if (newlayer == 0 && reward != 0 && reward.revealed != 1) {
            reward.revealed = 1;
            $(`div[data-i=${x}][data-j=${y}]`).html(`<div class="mineReward size-${reward.sizeX}-${reward.sizeY} pos-${reward.x}-${reward.y}" style="background-image: url('assets/images/underground/${reward.value}.png');"></div>`);
            Mine.checkItemsRevealed();
        }
    }
    static normalizeX(x) {
        return Math.min(this.sizeX - 1, Math.max(0, x));
    }
    static normalizeY(y) {
        return Math.min(this.sizeY - 1, Math.max(0, y));
    }
    static checkItemsRevealed() {
        for (let i = 0; i < Mine.rewardNumbers.length; i++) {
            if (Mine.checkItemRevealed(Mine.rewardNumbers[i])) {
                Underground.gainMineItem(Mine.rewardNumbers[i]);
                const itemName = Underground.getMineItemById(Mine.rewardNumbers[i]).name;
                Notifier.notify({
                    message: `You found ${GameHelper.anOrA(itemName)} ${GameConstants.humanifyString(itemName)}`,
                    type: NotificationConstants.NotificationOption.success,
                });
                Mine.itemsFound(Mine.itemsFound() + 1);
                GameHelper.incrementObservable(App.game.statistics.undergroundItemsFound);
                Mine.rewardNumbers.splice(i, 1);
                i--;
                Mine.checkCompleted();
            }
        }
    }
    static checkItemRevealed(id) {
        for (let i = 0; i < this.sizeX; i++) {
            for (let j = 0; j < this.sizeY; j++) {
                if (Mine.rewardGrid[j][i] != 0) {
                    if (Mine.rewardGrid[j][i].value == id) {
                        if (Mine.rewardGrid[j][i].revealed === 0) {
                            return false;
                        }
                    }
                }
            }
        }
        App.game.oakItems.use(OakItems.OakItem.Cell_Battery);
        return true;
    }
    static checkCompleted() {
        if (Mine.itemsFound() >= Mine.itemsBuried()) {
            setTimeout(Mine.completed, 1500);
            Mine.loadingNewLayer = true;
            GameHelper.incrementObservable(App.game.statistics.undergroundLayersMined);
            if (this.skipsRemaining() < this.maxSkips) {
                GameHelper.incrementObservable(this.skipsRemaining);
            }
        }
    }
    static completed() {
        Notifier.notify({
            message: 'You dig deeper...',
            type: NotificationConstants.NotificationOption.info,
        });
        ko.cleanNode(document.getElementById('mineBody'));
        Mine.loadMine();
        ko.applyBindings(null, document.getElementById('mineBody'));
    }
    static loadSavedMine(mine) {
        var _a, _b;
        this.grid = mine.grid.map(row => row.map(val => ko.observable(val))),
            this.rewardGrid = mine.rewardGrid;
        this.itemsFound(mine.itemsFound);
        this.itemsBuried(mine.itemsBuried);
        this.rewardNumbers = mine.rewardNumbers;
        this.loadingNewLayer = false;
        this.prospectResult((_a = mine.prospectResult) !== null && _a !== void 0 ? _a : this.prospectResult());
        this.skipsRemaining((_b = mine.skipsRemaining) !== null && _b !== void 0 ? _b : this.maxSkips);
        Underground.showMine();
    }
    static save() {
        if (this.grid == null) {
            // This part should only get called when game saves for the first time after catching starter
            ko.cleanNode(document.getElementById('mineBody'));
            Mine.loadMine();
            ko.applyBindings(null, document.getElementById('mineBody'));
        }
        const mineSave = {
            grid: this.grid.map(row => row.map(val => val())),
            rewardGrid: this.rewardGrid,
            itemsFound: this.itemsFound(),
            itemsBuried: this.itemsBuried(),
            rewardNumbers: this.rewardNumbers,
            prospectResult: this.prospectResult(),
            skipsRemaining: this.skipsRemaining(),
        };
        return mineSave;
    }
}
Mine.sizeX = 25;
Mine.sizeY = 12;
Mine.maxSkips = 5;
Mine.itemsFound = ko.observable(0);
Mine.itemsBuried = ko.observable(0);
Mine.prospectResult = ko.observable(null);
Mine.skipsRemaining = ko.observable(Mine.maxSkips);
// 0 represents the Mine.Tool.Chisel but it's not loaded here yet.
Mine.toolSelected = ko.observable(0);
Mine.loadingNewLayer = true;
(function (Mine) {
    let Tool;
    (function (Tool) {
        Tool[Tool["Chisel"] = 0] = "Chisel";
        Tool[Tool["Hammer"] = 1] = "Hammer";
    })(Tool = Mine.Tool || (Mine.Tool = {}));
})(Mine || (Mine = {}));
class SeededRand {
    static next() {
        this.state = (this.state * this.MULTIPLIER + this.OFFSET) % this.MOD;
        return this.state / this.MOD;
    }
    static seedWithDate(d) {
        this.state = Number((d.getFullYear() - 1900) * d.getDate() + 1000 * d.getMonth() + 100000 * d.getDate());
    }
    static seed(state) {
        this.state = Math.abs(state);
    }
    static intBetween(min, max) {
        return Math.floor((max - min + 1) * SeededRand.next() + min);
    }
    static boolean() {
        return !!this.intBetween(0, 1);
    }
    static fromArray(arr) {
        return arr[SeededRand.intBetween(0, arr.length - 1)];
    }
    static fromEnum(arr) {
        arr = Object.keys(arr).map(Number).filter(item => item >= 0);
        return this.fromArray(arr);
    }
}
SeededRand.state = 12345;
SeededRand.MOD = 233280;
SeededRand.OFFSET = 49297;
SeededRand.MULTIPLIER = 9301;
class Underground {
    static getMaxEnergy() {
        return Underground.BASE_ENERGY_MAX + this.getUpgrade(Underground.Upgrades.Energy_Max).calculateBonus();
    }
    static getMaxItems() {
        return Underground.BASE_ITEMS_MAX + this.getUpgrade(Underground.Upgrades.Items_Max).calculateBonus();
    }
    static getEnergyGain() {
        return Underground.BASE_ENERGY_GAIN + this.getUpgrade(Underground.Upgrades.Energy_Gain).calculateBonus();
    }
    static getEnergyRegenTime() {
        return Underground.BASE_ENERGY_REGEN_TIME - this.getUpgrade(Underground.Upgrades.Energy_Regen_Time).calculateBonus();
    }
    static getDailyDealsMax() {
        return Underground.BASE_DAILY_DEALS_MAX + this.getUpgrade(Underground.Upgrades.Daily_Deals_Max).calculateBonus();
    }
    static getBombEfficiency() {
        return Underground.BASE_BOMB_EFFICIENCY + this.getUpgrade(Underground.Upgrades.Bomb_Efficiency).calculateBonus();
    }
    static getUpgrade(upgrade) {
        for (let i = 0; i < this.upgradeList.length; i++) {
            if (this.upgradeList[i].name == upgrade) {
                return this.upgradeList[i];
            }
        }
    }
    static showMine() {
        let html = '';
        for (let i = 0; i < Mine.grid.length; i++) {
            html += "<div class='row'>";
            for (let j = 0; j < Mine.grid[0].length; j++) {
                html += Underground.mineSquare(Mine.grid[i][j](), i, j);
            }
            html += '</div>';
        }
        $('#mineBody').html(html);
    }
    static mineSquare(amount, i, j) {
        if (Mine.rewardGrid[i][j] != 0 && Mine.grid[i][j]() === 0) {
            Mine.rewardGrid[i][j].revealed = 1;
            return `<div data-bind='css: Underground.calculateCssClass(${i},${j})' data-i='${i}' data-j='${j}'><div class="mineReward size-${Mine.rewardGrid[i][j].sizeX}-${Mine.rewardGrid[i][j].sizeY} pos-${Mine.rewardGrid[i][j].x}-${Mine.rewardGrid[i][j].y}" style="background-image: url('assets/images/underground/${Mine.rewardGrid[i][j].value}.png');"></div></div>`;
        }
        else {
            return `<div data-bind='css: Underground.calculateCssClass(${i},${j})' data-i='${i}' data-j='${j}'></div>`;
        }
    }
    static calculateCssClass(i, j) {
        return `col-sm-1 rock${Math.max(Mine.grid[i][j](), 0)} mineSquare ${Mine.Tool[Mine.toolSelected()]}Selected`;
    }
    static gainMineItem(id, num = 1) {
        const index = player.mineInventoryIndex(id);
        const item = Underground.getMineItemById(id);
        if (item.isStone()) {
            const evostone = ItemList[item.valueType];
            evostone.gain(num);
            return;
        }
        if (index == -1) {
            const tempItem = {
                name: item.name,
                amount: ko.observable(num),
                id: id,
                value: item.value,
                valueType: item.valueType,
            };
            player.mineInventory.push(tempItem);
        }
        else {
            const amt = player.mineInventory[index].amount();
            player.mineInventory[index].amount(amt + num);
            this.sortMineItems(this.lastPropSort, false);
        }
    }
    static getMineItemById(id) {
        for (const item of UndergroundItem.list) {
            if (item.id == id) {
                return item;
            }
        }
    }
    static gainEnergy() {
        if (this.energy < this.getMaxEnergy()) {
            const oakMultiplier = App.game.oakItems.calculateBonus(OakItems.OakItem.Cell_Battery);
            this.energy = Math.min(this.getMaxEnergy(), this.energy + (oakMultiplier * this.getEnergyGain()));
            if (this.energy === this.getMaxEnergy()) {
                Notifier.notify({
                    message: 'Your mining energy has reached maximum capacity!',
                    type: NotificationConstants.NotificationOption.success,
                    timeout: 1e4,
                    sound: NotificationConstants.NotificationSound.underground_energy_full,
                    setting: NotificationConstants.NotificationSetting.underground_energy_full,
                });
            }
        }
    }
    static gainEnergyThroughItem(item) {
        // Restore a percentage of maximum energy
        const effect = GameConstants.EnergyRestoreEffect[GameConstants.EnergyRestoreSize[item]];
        const gain = Math.min(this.getMaxEnergy() - this.energy, effect * this.getMaxEnergy());
        this.energy = this.energy + gain;
        Notifier.notify({
            message: `You restored ${gain} mining energy!`,
            type: NotificationConstants.NotificationOption.success,
        });
    }
    static sortMineItems(prop, flip = true) {
        const prevEl = document.querySelector(`[data-undergroundsort=${Underground.lastPropSort}]`);
        const nextEl = prop == this.lastPropSort ? prevEl : document.querySelector(`[data-undergroundsort=${prop}]`);
        // If new sort by, update old sort by
        if (prop != this.lastPropSort) {
            // Remove sort direction from previous element
            if (prevEl) {
                prevEl.textContent = this.lastPropSort;
            }
            this.lastPropSort = prop;
        }
        else if (flip) {
            // Flip sort direction
            this.sortDirection *= -1;
        }
        // Update element text to dispaly sort direction
        if (nextEl) {
            nextEl.textContent = `${prop} ${this.sortDirection > 0 ? '▴' : '▾'}`;
        }
        player.mineInventory.sort((a, b) => {
            switch (prop) {
                case 'Amount':
                    return (a.amount() - b.amount()) * this.sortDirection;
                case 'Value':
                    return (a.value - b.value) * this.sortDirection;
                case 'Item':
                    return a.name > b.name ? 1 * this.sortDirection : -1 * this.sortDirection;
            }
        });
    }
    static sellMineItem(id, amount = 1) {
        for (let i = 0; i < player.mineInventory.length; i++) {
            const item = player.mineInventory[i];
            if (item.id == id) {
                if (item.valueType == 'Mine Egg') {
                    amount = 1;
                }
                const curAmt = item.amount();
                if (curAmt > 0) {
                    const sellAmt = Math.min(curAmt, amount);
                    const success = Underground.gainProfit(item, sellAmt);
                    if (success) {
                        player.mineInventory[i].amount(curAmt - sellAmt);
                        this.sortMineItems(this.lastPropSort, false);
                    }
                    return;
                }
            }
        }
    }
    static gainProfit(item, amount) {
        let success = true;
        switch (item.valueType) {
            case 'Diamond':
                App.game.wallet.gainDiamonds(item.value * amount);
                break;
            case 'Mine Egg':
                if (!App.game.breeding.hasFreeEggSlot()) {
                    return false;
                }
                success = App.game.breeding.gainEgg(App.game.breeding.createFossilEgg(item.name));
                break;
            default:
                const type = item.valueType.charAt(0).toUpperCase() + item.valueType.slice(1); //Capitalizes string
                const typeNum = PokemonType[type];
                App.game.shards.gainShards(GameConstants.PLATE_VALUE * amount, typeNum);
        }
        return success;
    }
    static openUndergroundModal() {
        if (this.canAccess()) {
            $('#mineModal').modal('show');
        }
        else {
            Notifier.notify({
                message: 'You need the Explorer Kit to access this location.<br/><i>Check out the shop at Cinnabar Island</i>',
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static canAccess() {
        return MapHelper.accessToRoute(11, 0) && App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Explorer_kit);
    }
    static calculateItemEffect(item) {
        const effect = GameConstants.EnergyRestoreEffect[GameConstants.EnergyRestoreSize[item]];
        return effect * this.getMaxEnergy();
    }
    static load(saveObject) {
        if (!saveObject) {
            console.warn('Underground not loaded.');
            return;
        }
        const upgrades = saveObject['upgrades'];
        for (const item in Underground.Upgrades) {
            if (isNaN(Number(item))) {
                Underground.getUpgrade(Underground.Upgrades[item]).level = upgrades[item] || 0;
            }
        }
        this.energy = saveObject['energy'] || 0;
        const mine = saveObject['mine'];
        if (mine) {
            Mine.loadSavedMine(mine);
        }
        else {
            Mine.loadMine();
        }
    }
    static save() {
        const undergroundSave = {};
        const upgradesSave = {};
        for (const item in Underground.Upgrades) {
            if (isNaN(Number(item))) {
                upgradesSave[item] = Underground.getUpgrade(Underground.Upgrades[item]).level;
            }
        }
        undergroundSave['upgrades'] = upgradesSave;
        undergroundSave['energy'] = this.energy;
        undergroundSave['mine'] = Mine.save();
        return undergroundSave;
    }
    // Knockout getters/setters
    static get energy() {
        return this._energy();
    }
    static set energy(value) {
        this._energy(value);
    }
}
Underground.saveKey = 'underground';
Underground.energyTick = ko.observable(60);
Underground.counter = 0;
Underground.sortDirection = -1;
Underground.lastPropSort = 'none';
Underground._energy = ko.observable(0);
Underground.upgradeList = [];
Underground.rewardCssClass = ko.pureComputed(function () {
    return `col-sm-1 mineReward mineSquare ${Mine.Tool[Mine.toolSelected()]}Selected`;
});
$(document).ready(function () {
    $('body').on('click', '.mineSquare', function () {
        Mine.click(parseInt(this.dataset.i, 10), parseInt(this.dataset.j, 10));
    });
});
(function (Underground) {
    let Upgrades;
    (function (Upgrades) {
        Upgrades[Upgrades["Energy_Max"] = 0] = "Energy_Max";
        Upgrades[Upgrades["Items_Max"] = 1] = "Items_Max";
        Upgrades[Upgrades["Energy_Gain"] = 2] = "Energy_Gain";
        Upgrades[Upgrades["Energy_Regen_Time"] = 3] = "Energy_Regen_Time";
        Upgrades[Upgrades["Daily_Deals_Max"] = 4] = "Daily_Deals_Max";
        Upgrades[Upgrades["Bomb_Efficiency"] = 5] = "Bomb_Efficiency";
    })(Upgrades = Underground.Upgrades || (Underground.Upgrades = {}));
    Underground.BASE_ENERGY_MAX = 50;
    Underground.BASE_ITEMS_MAX = 3;
    Underground.BASE_ENERGY_GAIN = 3;
    Underground.BASE_ENERGY_REGEN_TIME = 60;
    Underground.BASE_DAILY_DEALS_MAX = 3;
    Underground.BASE_BOMB_EFFICIENCY = 10;
    Underground.CHISEL_ENERGY = 1;
    Underground.HAMMER_ENERGY = 3;
    Underground.BOMB_ENERGY = 10;
    Underground.PROSPECT_ENERGY = 15;
})(Underground || (Underground = {}));
class UndergroundItem {
    constructor(name, id, space, value = 1, valueType = 'Diamond') {
        this.name = name;
        this.id = id;
        this.space = space;
        this.value = value;
        this.valueType = valueType;
    }
    static addItem(name, id, space, ...rest) {
        UndergroundItem.list.push(new UndergroundItem(name, id, space, ...rest));
    }
    static initialize() {
    }
    static getRandomItem() {
        const i = Math.floor(Math.random() * (UndergroundItem.list.length));
        return UndergroundItem.list[i] || UndergroundItem.list[0];
    }
    isStone() {
        return ItemList[this.valueType] instanceof EvolutionStone;
    }
    static getFullResourceName(valuetype, amt) {
        if (valuetype != 'Diamond' && amt >= 50) {
            valuetype += ' shard';
        }
        if (amt > 1) {
            valuetype += 's';
        }
        return GameConstants.humanifyString(valuetype);
    }
}
UndergroundItem.list = [];
UndergroundItem.addItem('Helix Fossil', 1, [[0, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 0]], 0, 'Mine Egg');
UndergroundItem.addItem('Dome Fossil', 2, [[2, 2, 2, 2, 2], [2, 2, 2, 2, 2], [2, 2, 2, 2, 2], [0, 2, 2, 2, 0]], 0, 'Mine Egg');
UndergroundItem.addItem('Old Amber', 3, [[0, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 0]], 0, 'Mine Egg');
UndergroundItem.addItem('Root Fossil', 4, [[0, 0, 4, 4, 4], [0, 0, 4, 4, 4], [4, 0, 0, 4, 4], [4, 4, 4, 4, 4], [0, 4, 4, 4, 0]], 0, 'Mine Egg');
UndergroundItem.addItem('Claw Fossil', 5, [[5, 5, 5, 0, 0], [5, 5, 5, 5, 0], [0, 5, 5, 5, 5], [0, 0, 0, 5, 5]], 0, 'Mine Egg');
UndergroundItem.addItem('Armor Fossil', 6, [[0, 6, 6, 6, 0], [0, 6, 6, 6, 0], [6, 6, 6, 6, 6], [0, 6, 6, 6, 0]], 0, 'Mine Egg');
UndergroundItem.addItem('Skull Fossil', 7, [[7, 7, 7, 7], [7, 7, 7, 7], [7, 7, 7, 7], [0, 7, 7, 0]], 0, 'Mine Egg');
UndergroundItem.addItem('Rare Bone', 8, [[8, 0, 0, 0, 0, 8], [8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 8]], 3);
UndergroundItem.addItem('Star Piece', 9, [[0, 9, 0], [9, 9, 9], [0, 9, 0]], 5);
UndergroundItem.addItem('Revive', 10, [[0, 10, 0], [10, 10, 10], [0, 10, 0]], 2);
UndergroundItem.addItem('Max Revive', 11, [[11, 11, 11], [11, 11, 11], [11, 11, 11]], 4);
UndergroundItem.addItem('Iron Ball', 12, [[12, 12, 12], [12, 12, 12], [12, 12, 12]], 2);
UndergroundItem.addItem('Heart Scale', 13, [[13, 0], [13, 13]], 10);
UndergroundItem.addItem('Light Clay', 14, [[14, 0, 14, 0], [14, 14, 14, 0], [14, 14, 14, 14], [0, 14, 0, 14]], 2);
UndergroundItem.addItem('Odd Keystone', 15, [[15, 15, 15, 15], [15, 15, 15, 15], [15, 15, 15, 15], [15, 15, 15, 15]], 6);
UndergroundItem.addItem('Hard Stone', 16, [[16, 16], [16, 16]], 4);
UndergroundItem.addItem('Fire Stone', 17, [[17, 17, 17], [17, 17, 17], [17, 17, 17]], 1, 'Fire_stone');
UndergroundItem.addItem('Water Stone', 18, [[18, 18, 18], [18, 18, 18], [18, 18, 18]], 1, 'Water_stone');
UndergroundItem.addItem('Thunder Stone', 19, [[19, 19, 19], [19, 19, 19], [19, 19, 19]], 1, 'Thunder_stone');
UndergroundItem.addItem('Leaf Stone', 20, [[20, 20, 20], [20, 20, 20], [20, 20, 20]], 1, 'Leaf_stone');
UndergroundItem.addItem('Moon Stone', 21, [[21, 21, 21], [21, 21, 21], [21, 21, 21]], 1, 'Moon_stone');
UndergroundItem.addItem('Sun Stone', 22, [[22, 22, 22], [22, 22, 22], [22, 22, 22]], 1, 'Sun_stone');
UndergroundItem.addItem('Oval Stone', 23, [[23, 23, 23], [23, 23, 23], [23, 23, 23]], 3);
UndergroundItem.addItem('Everstone', 24, [[24, 24, 24], [24, 24, 24]], 3);
UndergroundItem.addItem('Smooth Rock', 25, [[25, 25, 25], [25, 25, 25], [25, 25, 25]], 2);
UndergroundItem.addItem('Heat Rock', 26, [[26, 26, 26], [26, 26, 26]], 2);
UndergroundItem.addItem('Icy Rock', 27, [[27, 27, 27], [27, 27, 27], [27, 27, 27]], 2);
UndergroundItem.addItem('Damp Rock', 28, [[28, 28, 28], [28, 28, 28], [28, 0, 28]], 2);
UndergroundItem.addItem('Draco Plate', 29, [[29, 29, 29, 29], [29, 29, 29, 29], [29, 29, 29, 29]], 100, 'dragon');
UndergroundItem.addItem('Dread Plate', 30, [[30, 30, 30, 30], [30, 30, 30, 30], [30, 30, 30, 30]], 100, 'dark');
UndergroundItem.addItem('Earth Plate', 31, [[31, 31, 31, 31], [31, 31, 31, 31], [31, 31, 31, 31]], 100, 'ground');
UndergroundItem.addItem('Fist Plate', 32, [[32, 32, 32, 32], [32, 32, 32, 32], [32, 32, 32, 32]], 100, 'fighting');
UndergroundItem.addItem('Flame Plate', 33, [[33, 33, 33, 33], [33, 33, 33, 33], [33, 33, 33, 33]], 100, 'fire');
UndergroundItem.addItem('Icicle Plate', 34, [[34, 34, 34, 34], [34, 34, 34, 34], [34, 34, 34, 34]], 100, 'ice');
UndergroundItem.addItem('Insect Plate', 35, [[35, 35, 35, 35], [35, 35, 35, 35], [35, 35, 35, 35]], 100, 'bug');
UndergroundItem.addItem('Iron Plate', 36, [[36, 36, 36, 36], [36, 36, 36, 36], [36, 36, 36, 36]], 100, 'steel');
UndergroundItem.addItem('Meadow Plate', 37, [[37, 37, 37, 37], [37, 37, 37, 37], [37, 37, 37, 37]], 100, 'grass');
UndergroundItem.addItem('Mind Plate', 38, [[38, 38, 38, 38], [38, 38, 38, 38], [38, 38, 38, 38]], 100, 'psychic');
UndergroundItem.addItem('Sky Plate', 39, [[39, 39, 39, 39], [39, 39, 39, 39], [39, 39, 39, 39]], 100, 'flying');
UndergroundItem.addItem('Splash Plate', 40, [[40, 40, 40, 40], [40, 40, 40, 40], [40, 40, 40, 40]], 100, 'water');
UndergroundItem.addItem('Spooky Plate', 41, [[41, 41, 41, 41], [41, 41, 41, 41], [41, 41, 41, 41]], 100, 'ghost');
UndergroundItem.addItem('Stone Plate', 42, [[42, 42, 42, 42], [42, 42, 42, 42], [42, 42, 42, 42]], 100, 'rock');
UndergroundItem.addItem('Toxic Plate', 43, [[43, 43, 43, 43], [43, 43, 43, 43], [43, 43, 43, 43]], 100, 'poison');
UndergroundItem.addItem('Zap Plate', 44, [[44, 44, 44, 44], [44, 44, 44, 44], [44, 44, 44, 44]], 100, 'electric');
UndergroundItem.addItem('Pixie Plate', 45, [[45, 45, 45, 45], [45, 45, 45, 45], [45, 45, 45, 45]], 100, 'fairy');
class Amount {
    constructor(amount, currency) {
        this.amount = amount;
        this.currency = currency;
    }
    toString() {
        return `Amount(${this.amount}, ${GameConstants.Currency[this.currency]})`;
    }
}
///<reference path="../GameConstants.ts"/>
///<reference path="Amount.ts"/>
class AmountFactory {
    static createArray(amounts, currency) {
        const array = [];
        for (let i = 0; i < amounts.length; i++) {
            array.push(new Amount(amounts[i], currency));
        }
        return array;
    }
}
///<reference path="../wallet/AmountFactory.ts"/>
///<reference path="../underground/Underground.ts"/>
class UndergroundUpgrade extends Upgrade {
    constructor(name, displayName, maxLevel, costList, bonusList, increasing = true) {
        super(name, displayName, maxLevel, costList, bonusList, increasing);
    }
    canBuy() {
        return super.canBuy() && App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Explorer_kit);
    }
}
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Energy_Max, 'Max Energy', 10, AmountFactory.createArray(GameHelper.createArray(50, 500, 50), GameConstants.Currency.diamond), GameHelper.createArray(0, 100, 10)));
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Items_Max, 'Max items', 4, AmountFactory.createArray(GameHelper.createArray(200, 800, 200), GameConstants.Currency.diamond), GameHelper.createArray(0, 4, 1)));
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Energy_Gain, 'Energy restored', 17, AmountFactory.createArray(GameHelper.createArray(100, 1700, 100), GameConstants.Currency.diamond), GameHelper.createArray(0, 17, 1)));
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Energy_Regen_Time, 'Energy regen time', 20, AmountFactory.createArray(GameHelper.createArray(20, 400, 20), GameConstants.Currency.diamond), GameHelper.createArray(0, 20, 1), false));
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Daily_Deals_Max, 'Daily deals', 2, AmountFactory.createArray(GameHelper.createArray(150, 300, 150), GameConstants.Currency.diamond), GameHelper.createArray(0, 2, 1)));
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Bomb_Efficiency, 'Bomb Efficiency', 5, AmountFactory.createArray(GameHelper.createArray(50, 250, 50), GameConstants.Currency.diamond), GameHelper.createArray(0, 10, 2)));
class Information {
    constructor() { }
    static show(options = {}) {
        return introJs().setOptions(Object.assign(Object.assign({}, this.defaultOptions), options)).start();
    }
    static hide() {
        return introJs().exit();
    }
}
Information.defaultOptions = {
    showStepNumbers: false,
    hideNext: true,
    hidePrev: true,
    exitOnOverlayClick: false,
    showBullets: false,
};
class Preload {
    static itemLoading(item = 0) {
        this.itemsToLoad.push(item);
        this.updateProgressBar();
    }
    static itemLoaded(item = 0) {
        this.itemsLoaded.push(item);
        this.updateProgressBar();
    }
    static itemErrored(item = 0) {
        this.itemsErrored.push(item);
        this.updateProgressBar();
    }
    static updateProgressBar() {
        const toLoad = this.itemsToLoad.length;
        const loaded = this.itemsLoaded.length;
        const errored = this.itemsErrored.length;
        // Update the progress bar
        const progressBarEl = document.getElementById('preload-progress-bar');
        progressBarEl.style.width = `${(loaded + errored) / toLoad * 100}%`;
        // Update the text
        const progressTextEl = document.getElementById('preload-progress-text');
        progressTextEl.innerText = `${loaded + errored} / ${toLoad}`;
    }
    static hideSplashScreen(fast = false) {
        if (fast) {
            $('.loader').hide();
        }
        else {
            $('.loader').fadeOut('slow');
        }
    }
    static load(skipWait = false) {
        console.log(`[${GameConstants.formatDate(new Date())}] %cPreloading Images..`, 'color:#8e44ad;font-weight:900;');
        if (skipWait) {
            return new Promise(resolve => {
                //If you want to skip waiting, resolve immediately
                resolve();
                Preload.loadTowns();
                Preload.loadUndergroundItems();
                // Preload.loadMap();
                // Preload.loadPokemon(),
                Preload.hideSplashScreen(true);
            });
        }
        else {
            return new Promise(resolve => {
                // Incase something is taking too long to load
                const forceLoad = setTimeout(() => {
                    console.log(`[${GameConstants.formatDate(new Date())}] %cPreloading images taking too long, Skipping..`, 'color:#c0392b;font-weight:900;');
                    resolve();
                }, GameConstants.MAX_LOAD_TIME);
                Promise.all([
                    Preload.loadTowns(),
                    Preload.loadUndergroundItems(),
                    // Preload.loadMap(),
                    // Preload.loadPokemon(),
                    Preload.minimumTime(),
                ]).then(() => {
                    clearTimeout(forceLoad);
                    resolve();
                }).catch((reason => {
                    console.log(`[${GameConstants.formatDate(new Date())}] %cPreload images failed..`, 'color:#c0392b;font-weight:900;');
                    console.error('Preload images failed:', reason);
                    clearTimeout(forceLoad);
                    resolve();
                }));
            });
        }
    }
    static loadTowns() {
        var _a;
        const p = Array();
        for (const name in TownList) {
            // Skip unreleased towns unless a feature flag has enabled them
            if (!((_a = window.featureFlags) === null || _a === void 0 ? void 0 : _a.preloadUnreleasedTowns) && TownList[name].region() > GameConstants.MAX_AVAILABLE_REGION) {
                continue;
            }
            // Skip fake towns that exist for the Elite
            if (name.includes('Elite') || name.includes('Champion')) {
                continue;
            }
            Preload.itemLoading(name);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(`town-${name}`);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(`town-${name}`);
                    console.warn('Failed to load town image:', name);
                    resolve();
                };
                img.src = `assets/images/towns/${name}.png`;
            }));
        }
        return Promise.all(p);
    }
    static loadPokemon() {
        const p = Array();
        for (let i = 1; i <= GameConstants.TotalPokemonsPerRegion[GameConstants.MAX_AVAILABLE_REGION]; i++) {
            Preload.itemLoading(i);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(i);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(i);
                    console.warn('Failed to load image for pokemon:', i);
                    resolve();
                };
                img.src = `assets/images/pokemon/${i}.png`;
            }));
        }
        return Promise.all(p);
    }
    static loadUndergroundItems() {
        const p = Array();
        UndergroundItem.list.forEach(item => {
            Preload.itemLoading(item.id);
            p.push(new Promise(resolve => {
                const img = new Image();
                img.onload = () => {
                    Preload.itemLoaded(item.id);
                    resolve();
                };
                img.onerror = () => {
                    Preload.itemErrored(item.id);
                    console.warn('Failed to load image for Underground item:', item.name);
                    resolve();
                };
                img.src = `assets/images/underground/${item.id}.png`;
            }));
        });
        return Promise.all(p);
    }
    static minimumTime() {
        return new Promise(resolve => {
            setTimeout(() => {
                resolve();
            }, GameConstants.MIN_LOAD_TIME);
        });
    }
    static loadMap() {
        // TODO: preload the map background images?
        /*
        return new Promise<number>(resolve => {
            let img = new Image();
            img.onload = () => {
                document.querySelector('image')
                    .setAttributeNS('http://www.w3.org/1999/xlink', 'href', 'assets/images/kanto.png');
                resolve();
            };
            img.onerror = () => {
                console.log('Failed to load map image:', name);
                resolve();
            }
            img.src = 'assets/images/kanto.png';
        })
        */
    }
}
Preload.itemsToLoad = [];
Preload.itemsLoaded = [];
Preload.itemsErrored = [];
class Wallet {
    constructor() {
        this.name = 'Wallet';
        this.saveKey = 'wallet';
        this.defaults = {
            currencies: new Array(GameHelper.enumLength(GameConstants.Currency)).fill(0),
        };
        this.currencies = new ArrayOfObservables(this.defaults.currencies);
    }
    gainMoney(base, origin) {
        App.game.oakItems.use(OakItems.OakItem.Amulet_Coin);
        let money = base;
        money *= App.game.oakItems.calculateBonus(OakItems.OakItem.Amulet_Coin);
        money *= AchievementHandler.getMoneyMultiplier();
        money *= EffectEngineRunner.getMoneyMultiplier();
        money = Math.floor(money);
        GameHelper.incrementObservable(App.game.statistics.totalMoney, money);
        GameController.animateCurrency(money, 'playerMoney');
        this.addAmount(new Amount(money, Currency.money));
        return money;
    }
    gainDungeonTokens(base, origin) {
        let tokens = base;
        tokens *= EffectEngineRunner.getDungeonTokenMultiplier();
        tokens = Math.floor(tokens);
        GameHelper.incrementObservable(App.game.statistics.totalDungeonTokens, tokens);
        GameController.animateCurrency(tokens, 'playerMoneyDungeon');
        this.addAmount(new Amount(tokens, Currency.dungeonToken));
    }
    gainQuestPoints(base, origin) {
        let points = base;
        points = Math.floor(points);
        GameHelper.incrementObservable(App.game.statistics.totalQuestPoints, points);
        GameController.animateCurrency(points, 'playerMoneyQuest');
        this.addAmount(new Amount(points, Currency.questPoint));
    }
    gainDiamonds(base, origin) {
        let diamonds = base;
        diamonds = Math.floor(diamonds);
        GameHelper.incrementObservable(App.game.statistics.totalDiamonds, diamonds);
        this.addAmount(new Amount(diamonds, Currency.diamond));
    }
    gainFarmPoints(base, origin) {
        let points = base;
        points = Math.floor(points);
        GameHelper.incrementObservable(App.game.statistics.totalFarmPoints, points);
        this.addAmount(new Amount(points, Currency.farmPoint));
    }
    gainBattlePoints(base) {
        let bPoints = base;
        bPoints = Math.floor(bPoints);
        GameHelper.incrementObservable(App.game.statistics.totalBattlePoints, bPoints);
        this.addAmount(new Amount(bPoints, Currency.battlePoint));
    }
    addAmount(amount) {
        if (isNaN(amount.amount) || amount.amount <= 0) {
            console.trace('Could not add amount:', amount);
            amount.amount = 1;
        }
        this.currencies[amount.currency] += amount.amount;
    }
    hasAmount(amount) {
        return this.currencies[amount.currency] >= amount.amount;
    }
    loseAmount(amount) {
        if (isNaN(amount.amount) || amount.amount <= 0) {
            console.trace('Could not remove amount:', amount);
            amount.amount = 1;
        }
        this.currencies[amount.currency] -= amount.amount;
    }
    initialize() {
    }
    canAccess() {
        return true;
    }
    fromJSON(json) {
        if (json == null) {
            return;
        }
        if (json['currencies'] == null) {
            this.currencies = new ArrayOfObservables(this.defaults.currencies);
        }
        else {
            const currenciesJson = json.currencies;
            currenciesJson.forEach((value, index) => {
                this.currencies[index] = value;
            });
        }
    }
    toJSON() {
        return {
            currencies: [...this.currencies],
        };
    }
    update(delta) {
        // This method intentionally left blank
    }
}
class RegionRoute {
    constructor(region, number, pokemon, requirements = [], orderNumber) {
        this.region = region;
        this.number = number;
        this.pokemon = pokemon;
        this.requirements = requirements;
        this.orderNumber = orderNumber;
        this.orderNumber = orderNumber || number;
    }
    isUnlocked() {
        return this.requirements.every(requirement => requirement.isCompleted());
    }
}
/**
 * Datalist of all Pokémon that are encountered on the routes
 * No need to ever use this list, use RouteHelper instead
 * If you ever need to use this list, request changes in RouteHelper instead.
 */
class RoutePokemon {
    constructor({ land = [], water = [], headbutt = [] }) {
        this.land = land;
        this.water = water;
        this.headbutt = headbutt;
    }
}
///<reference path="RoutePokemon.ts"/>
/**
 * Helper class to retrieve information from RoutePokemon
 */
class RouteHelper {
    /**
     * Retrieves a list of all Pokémon that can be caught on that route.
     * @param route
     * @param region
     * @param includeHeadbutt
     * @returns {string[]} list of all Pokémons that can be caught
     */
    static getAvailablePokemonList(route, region, includeHeadbutt = true) {
        // If the route is somehow higher than allowed, use the first route to generateWildPokemon Pokémon
        if (!MapHelper.validRoute(route, region)) {
            route = GameConstants.RegionRoute[region][0];
        }
        const routeData = Routes.getRoute(region, route);
        const possiblePokemons = routeData.pokemon;
        if (possiblePokemons == null) {
            return ['Rattata'];
        }
        let pokemonList = possiblePokemons.land;
        if (App.game.keyItems.hasKeyItem(KeyItems.KeyItem.Super_rod) || possiblePokemons.land.length == 0) {
            pokemonList = pokemonList.concat(possiblePokemons.water);
        }
        if (includeHeadbutt) {
            pokemonList = pokemonList.concat(possiblePokemons.headbutt);
        }
        return pokemonList;
    }
    /**
     * Checks if all Pokémons on this route are caught by the player.
     * @param route
     * @param region
     * @param includeShiny
     * @param includeHeadbutt
     * @returns {boolean} true if all Pokémon on this route are caught.
     */
    static routeCompleted(route, region, includeShiny, includeHeadbutt = true) {
        const possiblePokemon = RouteHelper.getAvailablePokemonList(route, region, includeHeadbutt);
        return RouteHelper.listCompleted(possiblePokemon, includeShiny);
    }
    static listCompleted(possiblePokemon, includeShiny) {
        for (let i = 0; i < possiblePokemon.length; i++) {
            if (!App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(possiblePokemon[i]).id)) {
                return false;
            }
            if (includeShiny && !App.game.party.alreadyCaughtPokemon(PokemonHelper.getPokemonByName(possiblePokemon[i]).id, true)) {
                return false;
            }
        }
        return true;
    }
}
///<reference path="RegionRoute.ts"/>
///<reference path="../badgeCase/BadgeTypes.ts"/>
class Routes {
    constructor() { }
    static add(route) {
        this.regionRoutes.push(route);
        // Sort the routes so we can normalize the route number
        this.sortRegionRoutes();
    }
    static sortRegionRoutes() {
        this.regionRoutes
            .sort((routeA, routeB) => routeA.orderNumber - routeB.orderNumber)
            .sort((routeA, routeB) => routeA.region - routeB.region);
    }
    static getRoute(region, route) {
        return this.regionRoutes.find(routeData => routeData.region == region && routeData.number == route);
    }
    static getRoutesByRegion(region) {
        return this.regionRoutes.filter(routeData => routeData.region == region);
    }
    static normalizedNumber(region, route) {
        if (region == GameConstants.Region.none) {
            return route;
        }
        return this.regionRoutes.findIndex(routeData => routeData.region == region && routeData.number == route) + 1;
    }
}
Routes.regionRoutes = [];
/*
KANTO
*/
Routes.add(new RegionRoute(GameConstants.Region.kanto, 1, new RoutePokemon({
    land: ['Pidgey', 'Rattata'],
})));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 2, new RoutePokemon({
    land: ['Caterpie', 'Weedle', 'Rattata', 'Nidoran(F)', 'Nidoran(M)'],
}), [new RouteKillRequirement(10, 1)]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 3, new RoutePokemon({
    land: ['Pidgey', 'Rattata', 'Spearow', 'Sandshrew', 'Jigglypuff', 'Mankey'],
}), [
    new RouteKillRequirement(10, 2),
    new GymBadgeRequirement(BadgeTypes.Boulder),
]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 4, new RoutePokemon({
    land: ['Rattata', 'Spearow', 'Ekans', 'Sandshrew', 'Mankey'],
    water: ['Poliwag', 'Goldeen', 'Psyduck', 'Krabby', 'Seaking'],
}), [
    new RouteKillRequirement(10, 3),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Moon')),
]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 24, new RoutePokemon({
    land: ['Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Pidgey', 'Pidgey', 'Pidgeotto', 'Oddish', 'Venonat', 'Abra', 'Bellsprout'],
    water: ['Poliwag', 'Goldeen', 'Psyduck', 'Krabby', 'Seaking'],
}), [new RouteKillRequirement(10, 4)], 4.1));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 25, new RoutePokemon({
    land: ['Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Pidgey', 'Pidgeotto', 'Oddish', 'Venonat', 'Abra', 'Bellsprout'],
    water: ['Poliwag', 'Goldeen', 'Psyduck', 'Krabby'],
}), [new RouteKillRequirement(10, 24)], 4.2));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 5, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Jigglypuff', 'Oddish', 'Meowth', 'Mankey', 'Abra', 'Bellsprout'],
}), [
    // Need to reach bills house
    new RouteKillRequirement(10, 25),
]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 6, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Jigglypuff', 'Oddish', 'Meowth', 'Mankey', 'Abra', 'Bellsprout'],
    water: ['Poliwag', 'Goldeen', 'Shellder', 'Krabby'],
}), [new RouteKillRequirement(10, 5)]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 11, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Raticate', 'Rattata', 'Spearow', 'Ekans', 'Sandshrew', 'Drowzee'],
    water: ['Poliwag', 'Goldeen', 'Tentacool', 'Shellder', 'Krabby', 'Horsea'],
}), [new RouteKillRequirement(10, 6)], 6.1));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 9, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Ekans', 'Sandshrew', 'Nidoran(F)', 'Nidoran(M)', 'Nidorina', 'Nidorino'],
}), [
    new RouteKillRequirement(10, 6),
    new GymBadgeRequirement(BadgeTypes.Cascade),
]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 10, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Ekans', 'Sandshrew', 'Nidoran(F)', 'Nidoran(M)', 'Machop', 'Magnemite', 'Voltorb'],
    water: ['Poliwag', 'Goldeen', 'Poliwhirl', 'Slowpoke', 'Krabby', 'Kingler', 'Horsea'],
}), [
    new RouteKillRequirement(10, 9),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Rock Tunnel')),
]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 7, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Vulpix', 'Jigglypuff', 'Oddish', 'Meowth', 'Mankey', 'Growlithe', 'Abra', 'Bellsprout'],
}), [new RouteKillRequirement(10, 10)], 10.1));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 8, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Ekans', 'Sandshrew', 'Vulpix', 'Jigglypuff', 'Meowth', 'Mankey', 'Growlithe', 'Abra', 'Kadabra'],
}), [new RouteKillRequirement(10, 7)], 10.2));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 12, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Bellsprout', 'Weepinbell', 'Farfetch\'d', 'Snorlax'],
    water: ['Slowbro', 'Magikarp', 'Poliwag', 'Goldeen', 'Tentacool', 'Krabby', 'Horsea', 'Seadra'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokemon Tower'))]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 13, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Bellsprout', 'Weepinbell', 'Farfetch\'d', 'Ditto'],
    water: ['Slowbro', 'Magikarp', 'Poliwag', 'Goldeen', 'Tentacool', 'Krabby', 'Horsea', 'Seadra'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, 12),
        new RouteKillRequirement(10, 14),
    ]),
]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 14, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Venomoth', 'Bellsprout', 'Weepinbell', 'Ditto'],
    water: ['Poliwag', 'Goldeen'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, 13),
        new RouteKillRequirement(10, 15),
    ]),
]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 15, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Oddish', 'Gloom', 'Venonat', 'Venomoth', 'Bellsprout', 'Weepinbell', 'Ditto'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, 18),
        new RouteKillRequirement(10, 14),
    ]),
]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 16, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Doduo', 'Snorlax'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pokemon Tower'))]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 17, new RoutePokemon({
    land: ['Raticate', 'Spearow', 'Fearow', 'Ponyta', 'Doduo', 'Dodrio'],
    water: ['Poliwag', 'Goldeen', 'Tentacool', 'Shellder', 'Krabby'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, 16),
        new RouteKillRequirement(10, 18),
    ]),
]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 18, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Doduo'],
    water: ['Poliwag', 'Goldeen', 'Tentacool', 'Shellder', 'Krabby'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, 17),
        new RouteKillRequirement(10, 15),
    ]),
]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 19, new RoutePokemon({
    water: ['Tentacool', 'Magikarp', 'Poliwag', 'Goldeen', 'Tentacruel', 'Shellder', 'Horsea', 'Staryu'],
}), [new GymBadgeRequirement(BadgeTypes.Soul)]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 20, new RoutePokemon({
    water: ['Tentacool', 'Magikarp', 'Poliwag', 'Goldeen', 'Tentacruel', 'Shellder', 'Horsea', 'Staryu'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, 21),
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seafoam Islands')),
    ]),
]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 21, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Rattata', 'Raticate', 'Tangela'],
    water: ['Magikarp', 'Poliwag', 'Goldeen', 'Tentacruel', 'Shellder', 'Horsea', 'Staryu'],
}), [new GymBadgeRequirement(BadgeTypes.Soul)]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 22, new RoutePokemon({
    land: ['Rattata', 'Spearow', 'Nidoran(F)', 'Nidoran(M)', 'Mankey'],
    water: ['Poliwag', 'Poliwhirl', 'Goldeen'],
}), [new GymBadgeRequirement(BadgeTypes.Earth)]));
Routes.add(new RegionRoute(GameConstants.Region.kanto, 23, new RoutePokemon({
    land: ['Spearow', 'Fearow', 'Ekans', 'Arbok', 'Sandshrew', 'Sandslash', 'Nidorina', 'Nidorino', 'Mankey', 'Primeape', 'Ditto'],
    water: ['Poliwag', 'Goldeen', 'Poliwhirl', 'Slowbro', 'Kingler', 'Seadra', 'Seaking'],
}), [new RouteKillRequirement(10, 22)]));
/*
JOHTO
*/
Routes.add(new RegionRoute(GameConstants.Region.johto, 29, new RoutePokemon({
    land: ['Pidgey', 'Rattata', 'Sentret', 'Hoothoot'],
    headbutt: ['Exeggcute', 'Ledyba', 'Spinarak', 'Hoothoot', 'Pineco'],
}), [new GymBadgeRequirement(BadgeTypes.Elite_KantoChampion)]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 30, new RoutePokemon({
    land: ['Pidgey', 'Rattata', 'Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Zubat', 'Hoothoot', 'Ledyba', 'Spinarak'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, 29)]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 31, new RoutePokemon({
    land: ['Pidgey', 'Rattata', 'Caterpie', 'Metapod', 'Weedle', 'Kakuna', 'Zubat', 'Poliwag', 'Hoothoot', 'Ledyba', 'Spinarak', 'Bellsprout'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp'],
    headbutt: ['Spearow', 'Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Aipom', 'Pineco', 'Heracross'],
}), [new RouteKillRequirement(10, 30)]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 32, new RoutePokemon({
    land: ['Rattata', 'Ekans', 'Zubat', 'Bellsprout', 'Mareep', 'Hoppip', 'Wooper'],
    water: ['Tentacool', 'Tentacruel', 'Quagsire', 'Magikarp', 'Qwilfish'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Pineco'],
}), [new GymBadgeRequirement(BadgeTypes.Zephyr)]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 33, new RoutePokemon({
    land: ['Spearow', 'Rattata', 'Ekans', 'Zubat', 'Hoppip'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Union Cave'))]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 34, new RoutePokemon({
    land: ['Rattata', 'Abra', 'Drowzee', 'Ditto'],
    water: ['Tentacool', 'Tentacruel', 'Krabby', 'Magikarp', 'Staryu', 'Corsola', 'Kingler'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ilex Forest'))]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 35, new RoutePokemon({
    land: ['Pidgey', 'Nidoran(F)', 'Nidoran(M)', 'Abra', 'Drowzee', 'Ditto', 'Hoothoot', 'Yanma'],
    water: ['Psyduck', 'Golduck', 'Poliwag', 'Magikarp'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, 34)]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 36, new RoutePokemon({
    land: ['Pidgey', 'Nidoran(M)', 'Nidoran(F)', 'Vulpix', 'Growlithe', 'Hoothoot', 'Stantler', 'Sudowoodo'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new GymBadgeRequirement(BadgeTypes.Plain)]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 37, new RoutePokemon({
    land: ['Pidgey', 'Pidgeotto', 'Vulpix', 'Growlithe', 'Hoothoot', 'Ledyba', 'Spinarak', 'Stantler'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, 36)]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 38, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Meowth', 'Magnemite', 'Farfetch\'d', 'Tauros', 'Snubbull', 'Miltank'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, 37)]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 39, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Meowth', 'Magnemite', 'Farfetch\'d', 'Tauros', 'Miltank'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, 38)]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 40, new RoutePokemon({
    water: ['Tentacool', 'Tentacruel', 'Krabby', 'Magikarp', 'Staryu', 'Corsola', 'Kingler'],
}), [
    new RouteKillRequirement(10, 39),
    new GymBadgeRequirement(BadgeTypes.Fog),
]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 41, new RoutePokemon({
    water: ['Tentacool', 'Tentacruel', 'Mantine', 'Magikarp', 'Chinchou', 'Shellder'],
}), [new RouteKillRequirement(10, 40)]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 42, new RoutePokemon({
    land: ['Spearow', 'Zubat', 'Mankey', 'Mareep', 'Flaaffy'],
    water: ['Goldeen', 'Seaking', 'Magikarp'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [new GymBadgeRequirement(BadgeTypes.Fog)]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 43, new RoutePokemon({
    land: ['Pidgeotto', 'Venonat', 'Noctowl', 'Mareep', 'Flaaffy', 'Girafarig'],
    water: ['Magikarp', 'Poliwag'],
    headbutt: ['Venonat', 'Exeggcute', 'Hoothoot', 'Pineco'],
}), [new RouteKillRequirement(10, 42)]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 44, new RoutePokemon({
    land: ['Bellsprout', 'Weepinbell', 'Lickitung', 'Tangela'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp', 'Remoraid'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [
    new GymBadgeRequirement(BadgeTypes.Mineral),
    new GymBadgeRequirement(BadgeTypes.Glacier),
]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 45, new RoutePokemon({
    land: ['Geodude', 'Graveler', 'Gligar', 'Teddiursa', 'Skarmory', 'Phanpy'],
    water: ['Magikarp', 'Poliwag', 'Dratini'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ice Path'))]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 46, new RoutePokemon({
    land: ['Spearow', 'Rattata', 'Geodude'],
    headbutt: ['Spearow', 'Aipom', 'Heracross'],
}), [new RouteKillRequirement(10, 29)], 29.1));
Routes.add(new RegionRoute(GameConstants.Region.johto, 47, new RoutePokemon({
    land: ['Raticate', 'Spearow', 'Fearow', 'Gloom', 'Farfetch\'d', 'Ditto', 'Noctowl', 'Miltank'],
    water: ['Tentacool', 'Seel', 'Staryu', 'Magikarp', 'Shellder', 'Chinchou', 'Lanturn'],
    headbutt: ['Metapod', 'Butterfree', 'Kakuna', 'Beedrill', 'Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco', 'Heracross'],
}), [new GymBadgeRequirement(BadgeTypes.Mineral)]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 48, new RoutePokemon({
    land: ['Fearow', 'Vulpix', 'Gloom', 'Diglett', 'Growlithe', 'Farfetch\'d', 'Tauros', 'Hoppip', 'Girafarig'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, 47)]));
Routes.add(new RegionRoute(GameConstants.Region.johto, 26, new RoutePokemon({
    land: ['Raticate', 'Arbok', 'Sandslash', 'Ponyta', 'Doduo', 'Dodrio', 'Quagsire'],
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Shellder', 'Chinchou', 'Lanturn'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new RouteKillRequirement(10, 27)], 50));
Routes.add(new RegionRoute(GameConstants.Region.johto, 27, new RoutePokemon({
    land: ['Raticate', 'Arbok', 'Sandslash', 'Ponyta', 'Doduo', 'Dodrio', 'Quagsire'],
    water: ['Tentacool', 'Tentacruel', 'Magikarp', 'Shellder', 'Chinchou', 'Lanturn'],
    headbutt: ['Exeggcute', 'Hoothoot', 'Ledyba', 'Spinarak', 'Pineco'],
}), [new GymBadgeRequirement(BadgeTypes.Rising)], 49));
Routes.add(new RegionRoute(GameConstants.Region.johto, 28, new RoutePokemon({
    land: ['Ponyta', 'Tangela', 'Donphan', 'Ursaring', 'Rapidash', 'Doduo', 'Dodrio', 'Sneasel', 'Murkrow'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp'],
    headbutt: ['Natu', 'Aipom', 'Heracross'],
}), [new GymBadgeRequirement(BadgeTypes.Elite_JohtoChampion)], 51));
/*
HOENN
*/
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 101, new RoutePokemon({
    land: ['Wurmple', 'Poochyena', 'Zigzagoon'],
}), [new GymBadgeRequirement(BadgeTypes.Elite_JohtoChampion)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 102, new RoutePokemon({
    land: ['Surskit', 'Poochyena', 'Wurmple', 'Lotad', 'Zigzagoon', 'Ralts', 'Seedot'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Corphish'],
}), [new RouteKillRequirement(10, 101)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 103, new RoutePokemon({
    land: ['Poochyena', 'Wingull', 'Zigzagoon'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, 101)], 101.1));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 104, new RoutePokemon({
    land: ['Poochyena', 'Wurmple', 'Marill', 'Taillow', 'Wingull'],
    water: ['Wingull', 'Pelipper', 'Magikarp'],
}), [new RouteKillRequirement(10, 102)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 105, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new GymBadgeRequirement(BadgeTypes.Balance)], 115.1));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 106, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, 105),
        new RouteKillRequirement(10, 107),
    ]),
], 115.2));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 107, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, 106),
        new RouteKillRequirement(10, 108),
    ]),
], 115.3));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 108, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, 107),
        new RouteKillRequirement(10, 109),
    ]),
], 115.4));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 109, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new GymBadgeRequirement(BadgeTypes.Balance)], 115.5));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 110, new RoutePokemon({
    land: ['Poochyena', 'Gulpin', 'Minun', 'Oddish', 'Wingull', 'Plusle'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Granite Cave')),
    new GymBadgeRequirement(BadgeTypes.Knuckle),
]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 111, new RoutePokemon({
    land: ['Sandshrew', 'Trapinch', 'Baltoy', 'Cacnea'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Barboach'],
    headbutt: ['Geodude'],
}), [new GymBadgeRequirement(BadgeTypes.Dynamo)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 112, new RoutePokemon({
    land: ['Numel', 'Marill'],
}), [new RouteKillRequirement(10, 111)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 113, new RoutePokemon({
    land: ['Spinda', 'Slugma', 'Skarmory'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Fiery Path'))]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 114, new RoutePokemon({
    land: ['Zangoose', 'Surskit', 'Swablu', 'Lotad', 'Lombre', 'Seviper', 'Nuzleaf'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Barboach'],
    headbutt: ['Geodude'],
}), [new RouteKillRequirement(10, 113)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 115, new RoutePokemon({
    land: ['Swablu', 'Taillow', 'Swellow', 'Jigglypuff', 'Wingull'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Meteor Falls'))]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 116, new RoutePokemon({
    land: ['Poochyena', 'Whismur', 'Nincada', 'Abra', 'Taillow', 'Skitty'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Petalburg Woods'))], 104.1));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 117, new RoutePokemon({
    land: ['Surskit', 'Poochyena', 'Oddish', 'Marill', 'Illumise', 'Volbeat', 'Seedot'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Corphish'],
}), [new RouteKillRequirement(10, 110)], 110.1));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 118, new RoutePokemon({
    land: ['Zigzagoon', 'Linoone', 'Wingull', 'Kecleon'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Carvanha', 'Sharpedo'],
}), [new GymBadgeRequirement(BadgeTypes.Balance)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 119, new RoutePokemon({
    land: ['Zigzagoon', 'Linoone', 'Oddish', 'Tropius', 'Kecleon', 'Castform', 'Castform (sunny)', 'Castform (rainy)', 'Castform (snowy)'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Carvanha'],
}), [new RouteKillRequirement(10, 118)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 120, new RoutePokemon({
    land: ['Surskit', 'Poochyena', 'Mightyena', 'Oddish', 'Marill', 'Absol', 'Kecleon', 'Seedot'],
    water: ['Marill', 'Goldeen', 'Magikarp', 'Barboach'],
}), [new RouteKillRequirement(10, 119)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 121, new RoutePokemon({
    land: ['Poochyena', 'Shuppet', 'Mightyena', 'Oddish', 'Gloom', 'Wingull', 'Kecleon'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new RouteKillRequirement(10, 120)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 122, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [
    new RouteKillRequirement(10, 121),
    new GymBadgeRequirement(BadgeTypes.Feather),
]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 123, new RoutePokemon({
    land: ['Poochyena', 'Shuppet', 'Mightyena', 'Oddish', 'Gloom', 'Wingull', 'Kecleon'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer'],
}), [new RouteKillRequirement(10, 122)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 124, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Clamperl', 'Relicanth'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Pyre'))]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 125, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, 124)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 126, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Clamperl', 'Relicanth'],
}), [new RouteKillRequirement(10, 124)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 127, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, 125),
        new RouteKillRequirement(10, 126),
    ]),
]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 128, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Luvdisc', 'Wailmer', 'Corsola'],
}), [new RouteKillRequirement(10, 127)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 129, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Wailord', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, 128)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 130, new RoutePokemon({
    land: ['Wynaut'],
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, 129)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 131, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo'],
}), [new RouteKillRequirement(10, 130)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 132, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Horsea'],
}), [new RouteKillRequirement(10, 131)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 133, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Horsea'],
}), [new RouteKillRequirement(10, 132)]));
Routes.add(new RegionRoute(GameConstants.Region.hoenn, 134, new RoutePokemon({
    water: ['Tentacool', 'Wingull', 'Pelipper', 'Magikarp', 'Wailmer', 'Sharpedo', 'Horsea'],
}), [new RouteKillRequirement(10, 133)]));
/*
SINNOH
*/
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 201, new RoutePokemon({
    land: ['Starly', 'Bidoof', 'Kricketot'],
}), [new GymBadgeRequirement(BadgeTypes.Elite_HoennChampion)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 202, new RoutePokemon({
    land: ['Starly', 'Bidoof', 'Kricketot', 'Shinx'],
}), [new RouteKillRequirement(10, 201)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 203, new RoutePokemon({
    land: ['Zubat', 'Abra', 'Starly', 'Bidoof', 'Kricketot', 'Shinx'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Seaking', 'Gyarados'],
}), [new RouteKillRequirement(10, 202)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 204, new RoutePokemon({
    land: ['Zubat', 'Wurmple', 'Starly', 'Bidoof', 'Kricketot', 'Shinx', 'Budew'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Seaking', 'Gyarados'],
}), [new RouteKillRequirement(10, 202)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 205, new RoutePokemon({
    land: ['Bidoof', 'Hoothoot', 'Wurmple', 'Silcoon', 'Beautifly', 'Cascoon', 'Dustox', 'Kricketot', 'Budew', 'Drifloon'],
    water: ['Wingull', 'Pelipper', 'Buizel', 'Tentacool', 'Tentacruel', 'Shellos (west)', 'Gastrodon (west)', 'Magikarp', 'Finneon', 'Shellder', 'Gyarados', 'Lumineon', 'Psyduck', 'Golduck', 'Barboach', 'Whiscash'],
}), [
    new RouteKillRequirement(10, 204),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Ravaged Path')),
]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 206, new RoutePokemon({
    land: ['Zubat', 'Machop', 'Geodude', 'Ponyta', 'Gligar', 'Kricketot', 'Kricketune', 'Stunky', 'Bronzor'],
}), [
    new RouteKillRequirement(10, 205),
    new GymBadgeRequirement(BadgeTypes.Forest),
]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 207, new RoutePokemon({
    land: ['Zubat', 'Machop', 'Geodude', 'Ponyta', 'Kricketot'],
}), [new RouteKillRequirement(10, 206)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 208, new RoutePokemon({
    land: ['Zubat', 'Machop', 'Ralts', 'Meditite', 'Roselia', 'Bidoof', 'Bibarel', 'Budew'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Barboach', 'Gyarados', 'Whiscash', 'Seaking'],
}), [
    new RouteKillRequirement(10, 207),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Coronet South')),
]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 209, new RoutePokemon({
    land: ['Zubat', 'Gastly', 'Chansey', 'Ralts', 'Roselia', 'Duskull', 'Starly', 'Staravia', 'Bibarel', 'Bonsly', 'Mime Jr.'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Seaking', 'Gyarados'],
}), [
    new RouteKillRequirement(10, 208),
    new GymBadgeRequirement(BadgeTypes.Relic),
]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 210, new RoutePokemon({
    land: ['Geodude', 'Ponyta', 'Chansey', 'Scyther', 'Hoothoot', 'Noctowl', 'Roselia', 'Staravia', 'Kricketune', 'Bonsly', 'Mime jr.', 'Machop', 'Machoke', 'Meditite', 'Swablu', 'Bibarel'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Barboach', 'Whiscash', 'Gyarados'],
}), [new RouteKillRequirement(10, 209)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 211, new RoutePokemon({
    land: ['Zubat', 'Machop', 'Geodude', 'Ponyta', 'Hoothoot', 'Meditite', 'Bidoof', 'Machoke', 'Graveler', 'Noctowl', 'Chingling', 'Bronzor'],
}), [
    new RouteKillRequirement(10, 213),
    new GymBadgeRequirement(BadgeTypes.Fen),
]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 212, new RoutePokemon({
    land: ['Ralts', 'Kirlia', 'Roselia', 'Starly', 'Staravia', 'Kricketune', 'Budew', 'Croagunk'],
    water: ['Marill', 'Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Gyarados', 'Seaking'],
}), [
    new RouteKillRequirement(10, 213),
    new GymBadgeRequirement(BadgeTypes.Fen),
]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 213, new RoutePokemon({
    land: ['Chatot'],
    water: ['Buizel', 'Floatzel', 'Tentacool', 'Tentacruel', 'Wingull', 'Pelipper', 'Shellos (east)', 'Gastrodon (east)', 'Magikarp', 'Remoraid', 'Gyarados', 'Octillery', 'Sharpedo'],
}), [new RouteKillRequirement(10, 214)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 214, new RoutePokemon({
    land: ['Zubat', 'Geodude', 'Graveler', 'Ponyta', 'Rhyhorn', 'Sudowoodo', 'Girafarig', 'Houndour', 'Kricketune', 'Stunky', 'Hippopotas'],
    water: ['Psyduck', 'Golduck', 'Magikarp', 'Goldeen', 'Seaking', 'Gyarados'],
}), [new RouteKillRequirement(10, 215)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 215, new RoutePokemon({
    land: ['Abra', 'Kadabra', 'Geodude', 'Ponyta', 'Lickitung', 'Scyther', 'Staravia', 'Kricketune', 'Marill'],
}), [new RouteKillRequirement(10, 210)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 216, new RoutePokemon({
    land: ['Zubat', 'Machoke', 'Graveler', 'Noctowl', 'Sneasel', 'Meditite', 'Snorunt', 'Snover'],
}), [
    new RouteKillRequirement(10, 218),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Mt. Coronet North')),
]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 217, new RoutePokemon({
    land: ['Zubat', 'Machoke', 'Noctowl', 'Sneasel', 'Swinub', 'Meditite', 'Medicham', 'Snorunt', 'Snover'],
}), [new RouteKillRequirement(10, 216)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 218, new RoutePokemon({
    land: ['Mr. Mime', 'Glameow', 'Chatot'],
    water: ['Wingull', 'Floatzel', 'Shellos (west)', 'Gastrodon (west)', 'Tentacool', 'Tentacruel', 'Pelipper', 'Magikarp', 'Finneon', 'Gyarados', 'Lumineon'],
}), [
    new RouteKillRequirement(10, 213),
    new GymBadgeRequirement(BadgeTypes.Fen),
]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 219, new RoutePokemon({
    water: ['Tentacool', 'Tentacruel', 'Wingull', 'Pelipper', 'Magikarp', 'Finneon', 'Lumineon', 'Gyarados', 'Clamperl'],
}), [
    new RouteKillRequirement(10, 213),
    new GymBadgeRequirement(BadgeTypes.Fen),
]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 220, new RoutePokemon({
    water: ['Tentacool', 'Tentacruel', 'Wingull', 'Pelipper', 'Magikarp', 'Finneon', 'Lumineon', 'Gyarados', 'Chinchou', 'Lanturn'],
}), [new RouteKillRequirement(10, 219)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 221, new RoutePokemon({
    land: ['Sudowoodo', 'Girafarig', 'Roselia', 'Stunky', 'Skuntank'],
    water: ['Wingull', 'Floatzel', 'Shellos (west)', 'Gastrodon (west)', 'Tentacool', 'Tentacruel', 'Pelipper', 'Magikarp', 'Finneon', 'Lumineon', 'Gyarados', 'Clamperl'],
}), [new RouteKillRequirement(10, 220)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 222, new RoutePokemon({
    land: ['Magnemite', 'Magneton', 'Mr. Mime', 'Electabuzz', 'Luxio', 'Glameow', 'Purugly', 'Chatot'],
    water: ['Wingull', 'Pelipper', 'Floatzel', 'Gastrodon (east)', 'Tentacool', 'Tentacruel', 'Magikarp', 'Remoraid', 'Gyarados', 'Octillery', 'Sharpedo'],
}), [
    new RouteKillRequirement(10, 217),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Distortion World')),
]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 223, new RoutePokemon({
    water: ['Tentacruel', 'Pelipper', 'Mantyke', 'Magikarp', 'Remoraid', 'Octillery', 'Gyarados', 'Wailmer', 'Wailord'],
}), [
    new RouteKillRequirement(10, 222),
    new GymBadgeRequirement(BadgeTypes.Beacon),
]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 224, new RoutePokemon({
    land: ['Oddish', 'Gloom', 'Bellsprout', 'Weepinbell', 'Beautifly', 'Dustox', 'Roselia', 'Chatot'],
    water: ['Pelipper', 'Buizel', 'Floatzel', 'Shellos (east)', 'Gastrodon (east)', 'Tentacruel', 'Magikarp', 'Remoraid', 'Gyarados', 'Octillery', 'Luvdisc'],
}), [
    new RouteKillRequirement(10, 223),
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Victory Road Sinnoh')),
]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 225, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Machoke', 'Graveler', 'Roselia', 'Skuntank', 'Banette'],
    water: ['Psyduck', 'Golduck', 'Poliwhirl', 'Magikarp', 'Barboach', 'Gyarados', 'Whiscash'],
}), [
    new RouteKillRequirement(10, 224),
    new GymBadgeRequirement(BadgeTypes.Elite_SinnohChampion),
]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 226, new RoutePokemon({
    land: ['Rattata', 'Raticate', 'Spearow', 'Fearow', 'Machoke', 'Graveler', 'Banette'],
    water: ['Golduck', 'Tentacruel', 'Seel', 'Dewgong', 'Wingull', 'Pelipper', 'Spheal', 'Sealeo', 'Magikarp', 'Horsea', 'Seadra', 'Gyarados', 'Relicanth'],
}), [new RouteKillRequirement(10, 225)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 227, new RoutePokemon({
    land: ['Fearow', 'Golbat', 'Graveler', 'Weezing', 'Rhyhorn', 'Rhydon', 'Skarmory', 'Numel', 'Camerupt', 'Banette'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp', 'Barboach', 'Gyarados', 'Whiscash'],
}), [new RouteKillRequirement(10, 226)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 228, new RoutePokemon({
    land: ['Diglett', 'Dugtrio', 'Rhydon', 'Cacnea', 'Cacturne', 'Hippowdon'],
    water: ['Poliwag', 'Poliwhirl', 'Magikarp', 'Barboach', 'Whiscash', 'Gyarados'],
}), [new RouteKillRequirement(10, 226)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 229, new RoutePokemon({
    land: ['Pidgey', 'Oddish', 'Gloom', 'Bellsprout', 'Weepinbell', 'Scyther', 'Pinsir', 'Ledian', 'Ariados', 'Beautifly', 'Dustox', 'Volbeat', 'Illumise', 'Roselia', 'Purugly'],
    water: ['Wingull', 'Pelipper', 'Surskit', 'Masquerain', 'Magikarp', 'Goldeen', 'Gyarados', 'Seaking'],
}), [new RouteKillRequirement(10, 228)]));
Routes.add(new RegionRoute(GameConstants.Region.sinnoh, 230, new RoutePokemon({
    land: ['Oddish', 'Gloom', 'Bellsprout', 'Weepinbell', 'Beautifly', 'Dustox', 'Roselia'],
    water: ['Golduck', 'Wingull', 'Pelipper', 'Floatzel', 'Gastrodon (east)', 'Tentacruel', 'Seel', 'Dewgong', 'Spheal', 'Sealeo', 'Magikarp', 'Remoraid', 'Gyarados', 'Octillery', 'Wailmer', 'Wailord'],
}), [new RouteKillRequirement(10, 229)]));
// TODO: from here down:
// the pokemon are mostly correct, but some data may be wrong/missing
// No requirements have been done
// No route order has been set
/*
UNOVA
*/
Routes.add(new RegionRoute(GameConstants.Region.unova, 1, new RoutePokemon({
    land: ['Jigglypuff', 'Watchog', 'Herdier', 'Scrafty'],
    water: ['Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, 2)]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 2, new RoutePokemon({
    land: ['Jigglypuff', 'Lickitung', 'Watchog', 'Herdier', 'Liepard'],
}), [new RouteKillRequirement(10, 3)]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 3, new RoutePokemon({
    land: ['Yanma', 'Watchog', 'Herdier', 'Purrloin', 'Tranquill'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Pinwheel Forest'))]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 4, new RoutePokemon({
    land: ['Sandile', 'Darumaka', 'Trubbish', 'Minccino', 'Scraggy'],
    water: ['Frillish'],
}), [new GymBadgeRequirement(BadgeTypes.Toxic)]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 5, new RoutePokemon({
    land: ['Gothita', 'Minccino', 'Trubbish', 'Liepard', 'Solosis'],
}), [
    new RouteKillRequirement(10, 4),
    new GymBadgeRequirement(BadgeTypes.Insect),
]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 6, new RoutePokemon({
    land: ['Marill', 'Deerling (Spring)', 'Deerling (Autumn)', 'Karrablast', 'Tranquill', 'Foongus', 'Swadloon', 'Shelmet'],
    water: ['Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [
    new RouteKillRequirement(10, 5),
    new GymBadgeRequirement(BadgeTypes.Bolt),
]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 7, new RoutePokemon({
    land: ['Zangoose', 'Seviper', 'Cubchoo', 'Deerling (Summer)', 'Deerling (Winter)', 'Watchog', 'Tranquill', 'Foongus'],
}), [
    new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Chargestone Cave')),
    new GymBadgeRequirement(BadgeTypes.Quake),
]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 8, new RoutePokemon({
    land: ['Croagunk', 'Palpitoad', 'Karrablast', 'Shelmet', 'Stunfisk'],
}), [
    new OneFromManyRequirement([
        new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Twist Mountain')),
        new MultiRequirement([
            new RouteKillRequirement(10, 9),
            new GymBadgeRequirement(BadgeTypes.Elite_UnovaChampion),
        ]),
    ]),
]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 9, new RoutePokemon({
    land: ['Muk', 'Liepard', 'Garbodor', 'Minccino', 'Gothorita', 'Duosion', 'Pawniard'],
}), [new RouteKillRequirement(10, 11)]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 11, new RoutePokemon({
    land: ['Golduck', 'Marill', 'Gligar', 'Zangoose', 'Seviper', 'Karrablast', 'Amoonguss', 'Shelmet'],
    water: ['Buizel', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, 12)]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 12, new RoutePokemon({
    land: ['Pinsir', 'Heracross', 'Roselia', 'Combee', 'Tranquill', 'Sewaddle'],
}), [new RouteKillRequirement(10, 13)]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 13, new RoutePokemon({
    land: ['Tangela', 'Pelipper', 'Drifblim', 'Absol', 'Lunatone', 'Solrock'],
    water: ['Staryu', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Frillish'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 14, new RoutePokemon({
    land: ['Golduck', 'Swablu', 'Mienfoo', 'Drifblim', 'Absol', 'Altaria'],
    water: ['Buizel', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Reversal Mountain'))]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 15, new RoutePokemon({
    land: ['Sandslash', 'Gligar', 'Pupitar'],
}), [
    new OneFromManyRequirement([
        new RouteKillRequirement(10, 14),
        new RouteKillRequirement(10, 16),
    ]),
    new GymBadgeRequirement(BadgeTypes.Elite_UnovaChampion),
]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 16, new RoutePokemon({
    land: ['Gothita', 'Minccino', 'Trubbish', 'Liepard', 'Solosis'],
}), [
    new RouteKillRequirement(10, 4),
    new GymBadgeRequirement(BadgeTypes.Insect),
]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 17, new RoutePokemon({
    land: ['Frillish', 'Alomomola'],
}), [new RouteKillRequirement(10, 1)]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 18, new RoutePokemon({
    land: ['Tropius', 'Carnivine', 'Watchog', 'Crustle', 'Scrafty'],
    water: ['Frillish', 'Alomomola'],
}), [new RouteKillRequirement(10, 17)]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 19, new RoutePokemon({
    land: ['Patrat', 'Purrloin'],
    water: ['Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new GymBadgeRequirement(BadgeTypes.Elite_SinnohChampion)]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 20, new RoutePokemon({
    land: ['Sunkern', 'Pidove', 'Venipede', 'Patrat', 'Purrloin', 'Sewaddle'],
    water: ['Azurill', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, 19)]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 21, new RoutePokemon({
    water: ['Mantyke', 'Remoraid', 'Spheal', 'Luvdisc'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Seaside Cave'))]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 22, new RoutePokemon({
    land: ['Golduck', 'Marill', 'Delibird', 'Pelipper', 'Lunatone', 'Solrock', 'Amoonguss', 'Mienfoo'],
    water: ['Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, 21)]));
Routes.add(new RegionRoute(GameConstants.Region.unova, 23, new RoutePokemon({
    land: ['Golduck', 'Gligar', 'Amoonguss', 'Mienfoo', 'Bouffalant', 'Rufflet', 'Vullaby'],
    water: ['Buizel', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Giant Chasm'))]));
/*
KALOS
*/
Routes.add(new RegionRoute(GameConstants.Region.kalos, 1, new RoutePokemon({
    land: ['Rattata'],
}), [new GymBadgeRequirement(BadgeTypes.Elite_UnovaChampion)]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 2, new RoutePokemon({
    land: ['Fletchling', 'Bunnelby', 'Scatterbug'],
}), [new GymBadgeRequirement(BadgeTypes.Elite_UnovaChampion)]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 3, new RoutePokemon({
    land: ['Burmy (plant)', 'Burmy (trash)', 'Burmy (sand)', 'Bunnelby', 'Fletchling', 'Dunsparce'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Santalune Forest'))]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 4, new RoutePokemon({
    land: ['Flabébé', 'Ralts', 'Combee', 'Budew', 'Skitty'],
}), [new GymBadgeRequirement(BadgeTypes.Bug)]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 5, new RoutePokemon({
    land: ['Pancham', 'Furfrou', 'Abra', 'Gulpin', 'Doduo'],
}), [new RouteKillRequirement(10, 4)]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 6, new RoutePokemon({
    land: ['Honedge', 'Espurr', 'Kecleon', 'Sentret', 'Nincada'],
}), [new RouteKillRequirement(10, 5)]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 7, new RoutePokemon({
    land: ['Flabébé', 'Spritzee', 'Swirlix', 'Ducklett', 'Croagunk', 'Roselia', 'Smeargle'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Parfum Palace'))]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 8, new RoutePokemon({
    land: ['Inkay', 'Mienfoo', 'Drifloon', 'Absol', 'Bagon', 'Zangoose', 'Spoink'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Connecting Cave'))]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 9, new RoutePokemon({
    land: ['Hippopotas', 'Sandile', 'Helioptile'],
}), [new RouteKillRequirement(10, 8)]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 10, new RoutePokemon({
    land: ['Snubbull', 'Houndour', 'Electrike', 'Sigilyph', 'Emolga', 'Golett', 'Hawlucha'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Glittering Cave'))]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 11, new RoutePokemon({
    land: ['Hariyama', 'Staravia', 'Chingling', 'Stunky', 'Throh', 'Sawk', 'Dedenne'],
}), [new GymBadgeRequirement(BadgeTypes.Cliff)]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 12, new RoutePokemon({
    land: ['Slowpoke', 'Exeggcute', 'Pinsir', 'Tauros', 'Heracross', 'Miltank', 'Pachirisu', 'Chatot'],
    water: ['Lapras', 'Luvdisc', 'Huntail', 'Gorebyss', 'Binacle'],
}), [new GymBadgeRequirement(BadgeTypes.Rumble)]
//Replace req with Tower of Mastery dungeon if implemented.
));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 13, new RoutePokemon({
    land: ['Dugtrio', 'Trapinch', 'Gible', 'Graveler', 'Slugma'],
}), [new RouteKillRequirement(10, 12)]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 14, new RoutePokemon({
    land: ['Weepinbell', 'Haunter', 'Quagsire', 'Skorupi', 'Carnivine', 'Karrablast', 'Shelmet', 'Goomy'],
    water: ['Stunfisk'],
}), [new GymBadgeRequirement(BadgeTypes.Voltage)]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 15, new RoutePokemon({
    land: ['Mightyena', 'Skorupi', 'Watchog', 'Liepard', 'Foongus', 'Pawniard', 'Klefki'],
    water: ['Lombre', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new GymBadgeRequirement(BadgeTypes.Fairy)]
//Replace req with Pokéball Factory dungeon if implemented.
));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 16, new RoutePokemon({
    land: ['Skorupi', 'Pumpkaboo', 'Floatzel', 'Foongus', 'Phantump', 'Klefki'],
    water: ['Lombre', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)'],
}), [new RouteKillRequirement(10, 15)]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 17, new RoutePokemon({
    land: ['Sneasel', 'Delibird', 'Snover', 'Abomasnow'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Frost Cavern'))]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 18, new RoutePokemon({
    land: ['Pupitar', 'Lairon', 'Torkoal', 'Gurdurr', 'Heatmor', 'Durant'],
}), [new ClearDungeonRequirement(1, GameConstants.getDungeonIndex('Team Flare Secret HQ'))]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 19, new RoutePokemon({
    land: ['Quagsire', 'Drapion', 'Carnivine', 'Karrablast', 'Shelmet', 'Sliggoo'],
    water: ['Stunfisk', 'Politoed'],
}), [new RouteKillRequirement(10, 18)]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 20, new RoutePokemon({
    land: ['Jigglypuff', 'Noctowl', 'Zoroark', 'Gothorita', 'Amoonguss', 'Trevenant'],
}), [new RouteKillRequirement(10, 19)]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 21, new RoutePokemon({
    land: ['Scyther', 'Ursaring', 'Spinda', 'Altaria', 'Floatzel'],
    water: ['Lombre', 'Basculin (Red-Striped)', 'Basculin (Blue-Striped)', 'Dratini', 'Dragonair'],
}), [new RouteKillRequirement(10, 19)]));
Routes.add(new RegionRoute(GameConstants.Region.kalos, 22, new RoutePokemon({
    land: ['Psyduck', 'Farfetch\'d', 'Dunsparce', 'Azurill', 'Bidoof', 'Riolu', 'Bunnelby', 'Litleo'],
    water: ['Azumarill'],
}), [new RouteKillRequirement(10, 3)]));
/*
ALOLA
*/
Routes.add(new RegionRoute(GameConstants.Region.alola, 1, new RoutePokemon({
    land: ['Pikipek', 'Yungoos', 'Grubbin'],
})));
Routes.add(new RegionRoute(GameConstants.Region.alola, 3, new RoutePokemon({
    land: ['Cutiefly', 'Rockruff', 'Oricorio', 'Crabrawler'],
})));
Routes.add(new RegionRoute(GameConstants.Region.alola, 5, new RoutePokemon({
    land: ['Mudbray', 'Dewpider', 'Salandit', 'Stufful'],
})));
Routes.add(new RegionRoute(GameConstants.Region.alola, 14, new RoutePokemon({
    land: ['Turtonator', 'Togedemaru', 'Mimikyu'],
})));
/*
GALAR
*/
Routes.add(new RegionRoute(GameConstants.Region.galar, 1, new RoutePokemon({
    land: ['Skwovet', 'Rookidee', 'Blipbug', 'Wooloo', 'Nickit'],
})));
Routes.add(new RegionRoute(GameConstants.Region.galar, 2, new RoutePokemon({
    land: ['Skwovet', 'Rookidee', 'Nickit', 'Chewtle', 'Yamper'],
})));
Routes.add(new RegionRoute(GameConstants.Region.galar, 3, new RoutePokemon({
    land: ['Gossifleur', 'Rookidee', 'Corvisquire', 'Skwovet', 'Rolycoly', 'Sizzlipede'],
})));
Routes.add(new RegionRoute(GameConstants.Region.galar, 4, new RoutePokemon({
    land: ['Yamper', 'Wooloo', 'Milcery'],
})));
Routes.add(new RegionRoute(GameConstants.Region.galar, 5, new RoutePokemon({
    land: ['Dottler', 'Applin', 'Eldegoss'],
})));
Routes.add(new RegionRoute(GameConstants.Region.galar, 6, new RoutePokemon({
    land: ['Silicobra'],
})));
Routes.add(new RegionRoute(GameConstants.Region.galar, 7, new RoutePokemon({
    land: ['Thievul', 'Toxel', 'Corviknight', 'Perrserker', 'Morpeko'],
})));
Routes.add(new RegionRoute(GameConstants.Region.galar, 8, new RoutePokemon({
    land: ['Sandaconda', 'Falinks'],
})));
Routes.add(new RegionRoute(GameConstants.Region.galar, 9, new RoutePokemon({
    land: ['Cramorant', 'Clobbopus', 'Grapploct', 'Pincurchin'],
})));
Routes.add(new RegionRoute(GameConstants.Region.galar, 10, new RoutePokemon({
    land: ['Snom', 'Duraludon', 'Stonjourner', 'Eiscue'],
})));
class MapHelper {
    static returnToMap() {
        if (player.currentTown()) {
            return this.moveToTown(player.currentTown());
        }
        if (player.route()) {
            return this.moveToRoute(player.route(), player.region);
        }
    }
    static routeExist(route, region) {
        return !!Routes.getRoute(region, route);
    }
    static normalizeRoute(route, region) {
        return Routes.normalizedNumber(region, route);
    }
    static calculateBattleCssClass() {
        var _a;
        const area = player.route() || ((_a = player.town()) === null || _a === void 0 ? void 0 : _a.name()) || undefined;
        if (GameConstants.WaterAreas[player.region].has(area)) {
            return 'water';
        }
        else if (GameConstants.IceAreas[player.region].has(area)) {
            return 'ice';
        }
        else if (GameConstants.ForestAreas[player.region].has(area)) {
            return 'forest';
        }
        else if (GameConstants.CaveAreas[player.region].has(area)) {
            return 'cave';
        }
        else if (GameConstants.GemCaveAreas[player.region].has(area)) {
            return 'cave-gem';
        }
        else if (GameConstants.PowerPlantAreas[player.region].has(area)) {
            return 'power-plant';
        }
        else if (GameConstants.MansionAreas[player.region].has(area)) {
            return 'mansion';
        }
        else if (GameConstants.GraveyardAreas[player.region].has(area)) {
            return 'graveyard';
        }
    }
    static calculateRouteCssClass(route, region) {
        let cls;
        if (player.route() == route && player.region == region) {
            cls = 'currentRoute';
        }
        else if (MapHelper.accessToRoute(route, region)) {
            if (App.game.statistics.routeKills[route]() >= GameConstants.ROUTE_KILLS_NEEDED) {
                cls = 'unlockedRoute';
            }
            else {
                cls = 'unlockedUnfinishedRoute';
            }
        }
        else {
            cls = 'lockedRoute';
        }
        // Water routes
        if (GameConstants.WaterAreas[region].has(route)) {
            cls = `${cls} waterRoute`;
        }
        return cls;
    }
    static calculateTownCssClass(town) {
        // TODO(@Isha) this is very weird, refactor this.
        if (App.game.keyItems.hasKeyItem(KeyItems.KeyItem[town])) {
            return 'city unlockedTown';
        }
        if (player.currentTown() == town) {
            return 'city currentTown';
        }
        if (MapHelper.accessToTown(town)) {
            if (dungeonList.hasOwnProperty(town)) {
                if (App.game.statistics.dungeonsCleared[GameConstants.getDungeonIndex(town)]()) {
                    return 'dungeon completedDungeon';
                }
                return 'dungeon unlockedDungeon';
            }
            if (gymList.hasOwnProperty(town)) {
                const gym = gymList[town];
                // If defeated the previous gym, but not this one
                const gymIndex = GameConstants.getGymIndex(town);
                if (Gym.isUnlocked(gym) && !App.game.badgeCase.hasBadge(gym.badgeReward)) {
                    return 'city unlockedUnfinishedTown';
                }
            }
            return 'city unlockedTown';
        }
        if (dungeonList.hasOwnProperty(town)) {
            return 'dungeon';
        }
        return 'city';
    }
    static accessToTown(townName) {
        const town = TownList[townName];
        if (!town) {
            return false;
        }
        return town.isUnlocked();
    }
    static moveToTown(townName) {
        var _a;
        if (MapHelper.accessToTown(townName)) {
            App.game.gameState = GameConstants.GameState.idle;
            player.route(0);
            const town = TownList[townName];
            if (town instanceof DungeonTown) {
                town.dungeon().calculateAllPokemonNames();
            }
            player.town(town);
            player.currentTown(townName);
            Battle.enemyPokemon(null);
            //this should happen last, so all the values all set beforehand
            App.game.gameState = GameConstants.GameState.town;
            GameController.applyRouteBindings();
        }
        else {
            const town = TownList[townName];
            const reqsList = [];
            (_a = town.requirements) === null || _a === void 0 ? void 0 : _a.forEach(requirement => {
                if (!requirement.isCompleted()) {
                    reqsList.push(requirement.hint());
                }
            });
            Notifier.notify({
                message: `You don't have access to that location yet.<br/>${reqsList.join('<br/>')}`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
    }
    static validRoute(route = 0, region = 0) {
        return route >= GameConstants.RegionRoute[region][0] && route <= GameConstants.RegionRoute[region][1];
    }
    static openShipModal() {
        const openModal = () => {
            $('#ShipModal').modal('show');
        };
        switch (player.region) {
            case 0:
                if (TownList['Vermillion City'].isUnlocked() && player.highestRegion() > 0) {
                    openModal();
                    return;
                }
            case 1:
                if (TownList['Olivine City'].isUnlocked()) {
                    openModal();
                    return;
                }
            case 2:
                if (TownList['Slateport City'].isUnlocked()) {
                    openModal();
                    return;
                }
            case 3:
                if (TownList['Canalave City'].isUnlocked()) {
                    openModal();
                    return;
                }
        }
        Notifier.notify({
            message: 'You cannot access this dock yet',
            type: NotificationConstants.NotificationOption.warning,
        });
    }
    static ableToTravel() {
        return player.highestRegion() < GameConstants.MAX_AVAILABLE_REGION && new Set(App.game.party.caughtPokemon.filter(p => p.id > 0 && PokemonHelper.calcNativeRegion(p.name) <= player.highestRegion()).map(p => Math.floor(p.id))).size >= GameConstants.TotalPokemonsPerRegion[player.highestRegion()];
    }
    static travelToNextRegion() {
        if (MapHelper.ableToTravel()) {
            player.highestRegion(player.highestRegion() + 1);
            MapHelper.moveToTown(GameConstants.StartingTowns[player.highestRegion()]);
            player.region = player.highestRegion();
        }
    }
}
MapHelper.moveToRoute = function (route, region) {
    var _a;
    if (isNaN(route)) {
        return;
    }
    let genNewEnemy = false;
    if (route != player.route()) {
        genNewEnemy = true;
    }
    if (this.accessToRoute(route, region)) {
        player.route(route);
        player.region = region;
        player.currentTown('');
        if (genNewEnemy) {
            Battle.generateNewEnemy();
        }
        App.game.gameState = GameConstants.GameState.fighting;
        GameController.applyRouteBindings();
    }
    else {
        if (!MapHelper.routeExist(route, region)) {
            return Notifier.notify({
                message: `Route ${route} does not exist in the ${GameConstants.Region[region]} region.`,
                type: NotificationConstants.NotificationOption.warning,
            });
        }
        const routeData = Routes.getRoute(region, route);
        const reqsList = [];
        (_a = routeData.requirements) === null || _a === void 0 ? void 0 : _a.forEach(requirement => {
            if (!requirement.isCompleted()) {
                reqsList.push(requirement.hint());
            }
        });
        Notifier.notify({
            message: `You don't have access to that route yet.<br/>${reqsList.join('<br/>')}`,
            type: NotificationConstants.NotificationOption.warning,
        });
    }
};
MapHelper.accessToRoute = function (route, region) {
    return this.routeExist(route, region) && Routes.getRoute(region, route).isUnlocked();
};
