/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/modules/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/modules/DataStore/BadgeStore.ts":
/*!*********************************************!*\
  !*** ./src/modules/DataStore/BadgeStore.ts ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return BadgeCase; });\n///<reference path=\"../../scripts/badgeCase/BadgeTypes.ts\"/>\r\n///<reference path=\"../../scripts/GameConstants.ts\"/>\r\n///<reference path=\"../../scripts/ArrayOfObservables.ts\"/>\r\n// TODO: Convert to imports after ./scripts have been converted to modules\r\nconst GameConstants = __webpack_require__(/*! ../../scripts/GameConstants */ \"./src/scripts/GameConstants.ts\");\r\nconst emptyBadgeList = new Array(GameConstants.RegionGyms.flat().length).fill(false);\r\nclass BadgeCase {\r\n    constructor() {\r\n        this.name = 'Badge Case';\r\n        this.saveKey = 'badgeCase';\r\n        this.defaults = {};\r\n        this.badgeList = new ArrayOfObservables(emptyBadgeList);\r\n    }\r\n    badgeCount() {\r\n        return this.badgeList.reduce((a, b) => (+a) + (+b), 0);\r\n    }\r\n    gainBadge(badge) {\r\n        this.badgeList[badge] = true;\r\n    }\r\n    hasBadge(badge) {\r\n        if (badge == null || badge == BadgeTypes.None) {\r\n            return true;\r\n        }\r\n        return !!this.badgeList[badge];\r\n    }\r\n    initialize() {\r\n        // This method intentionally left blank\r\n    }\r\n    canAccess() {\r\n        return true;\r\n    }\r\n    fromJSON(json) {\r\n        if (json == null) {\r\n            return;\r\n        }\r\n        json.forEach((hasBadge, index) => {\r\n            this.badgeList[index] = hasBadge;\r\n        });\r\n    }\r\n    toJSON() {\r\n        let shouldReturn = false;\r\n        // We only want to save upto the highest badge we have obtained, everything else is assumed to be false\r\n        return [...this.badgeList].reverse().filter(i => shouldReturn || i && (shouldReturn = i)).reverse();\r\n    }\r\n    update(delta) {\r\n        // This method intentionally left blank\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/modules/DataStore/BadgeStore.ts?");

/***/ }),

/***/ "./src/modules/DataStore/StatisticStore.ts":
/*!*************************************************!*\
  !*** ./src/modules/DataStore/StatisticStore.ts ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Statistics; });\nclass Statistics {\r\n    constructor() {\r\n        this.saveKey = 'statistics';\r\n        this.defaults = {};\r\n        this.selectedPokemonID = ko.observable(1);\r\n        this.observables = [\r\n            'secondsPlayed',\r\n            'clickAttacks',\r\n            'questsCompleted',\r\n            'totalShardsGained',\r\n            'totalMoney',\r\n            'totalDungeonTokens',\r\n            'totalQuestPoints',\r\n            'totalDiamonds',\r\n            'totalFarmPoints',\r\n            'totalBattlePoints',\r\n            'totalPokemonCaptured',\r\n            'totalPokemonDefeated',\r\n            'totalPokemonEncountered',\r\n            'totalPokemonHatched',\r\n            'totalShinyPokemonCaptured',\r\n            'totalShinyPokemonDefeated',\r\n            'totalShinyPokemonEncountered',\r\n            'totalShinyPokemonHatched',\r\n            'undergroundItemsFound',\r\n            'undergroundLayersMined',\r\n            'undergroundDailyDealTrades',\r\n            'totalBerriesHarvested',\r\n            'battleFrontierTotalStagesCompleted',\r\n            'battleFrontierHighestStageCompleted',\r\n        ];\r\n        this.arrayObservables = [\r\n            'gymsDefeated',\r\n            'dungeonsCleared',\r\n            'pokeballsUsed',\r\n            'pokeballsBought',\r\n            'shardsGained',\r\n            'oakItemUses',\r\n            'berriesHarvested',\r\n            'routeKills',\r\n        ];\r\n        // These will allow negative values (special events etc)\r\n        this.objectObservables = [\r\n            'pokemonCaptured',\r\n            'pokemonDefeated',\r\n            'pokemonEncountered',\r\n            'pokemonHatched',\r\n            'shinyPokemonCaptured',\r\n            'shinyPokemonDefeated',\r\n            'shinyPokemonEncountered',\r\n            'shinyPokemonHatched',\r\n        ];\r\n        for (const prop of this.observables) {\r\n            this[prop] = ko.observable(0).extend({ numeric: 0 });\r\n        }\r\n        for (const array of this.arrayObservables) {\r\n            this[array] = new Proxy([ko.observable(0).extend({ numeric: 0 })], {\r\n                get: (statistics, prop) => {\r\n                    if (statistics[prop]) {\r\n                        return statistics[prop];\r\n                    }\r\n                    // If it's not an int or less than zero, we do not want to set it\r\n                    const id = Math.floor(+prop);\r\n                    if (isNaN(id) || id < 0 || id != +prop) {\r\n                        if (isNaN(id)) {\r\n                            console.trace(`[Statistics] [${array}] Invalid property requested:`, prop);\r\n                        }\r\n                        return () => 0;\r\n                    }\r\n                    statistics[id] = ko.observable(0).extend({ numeric: 0 });\r\n                    return statistics[id];\r\n                },\r\n                // TODO: fixup typescript errors\r\n                // This makes it so the stats observable can't be accidently changed\r\n                // set: () => {},\r\n                has: function (target, prop) {\r\n                    // This is needed for map, forEach etc to work,\r\n                    // because they want to check if target.hasOwnProperty(\"0\") first.\r\n                    // The ko function doesn't seem to have any OwnProperties anyway, so no harm here (don't quote me)\r\n                    return Reflect.has(target, prop);\r\n                },\r\n            });\r\n        }\r\n        for (const array of this.objectObservables) {\r\n            this[array] = new Proxy({ 0: ko.observable(0).extend({ numeric: 0 }) }, {\r\n                get: (statistics, prop) => {\r\n                    if (statistics[prop]) {\r\n                        return statistics[prop];\r\n                    }\r\n                    switch (prop) {\r\n                        case 'highestID':\r\n                            let highestID = 0;\r\n                            Object.entries(statistics).forEach(([key, val]) => {\r\n                                if (!isNaN(+key) && +key > highestID && val() > 0) {\r\n                                    highestID = +key;\r\n                                }\r\n                            });\r\n                            return highestID;\r\n                    }\r\n                    // If it's not an int or less than zero, we do not want to set it\r\n                    const id = +prop;\r\n                    if (isNaN(id)) {\r\n                        console.trace(`[Statistics] [${array}] Invalid property requested:`, prop);\r\n                        return () => 0;\r\n                    }\r\n                    return (val) => {\r\n                        if (!isNaN(+val)) {\r\n                            statistics[prop] = ko.observable(val).extend({ numeric: 0 });\r\n                            return val;\r\n                        }\r\n                        return 0;\r\n                    };\r\n                },\r\n                // TODO: fixup typescript errors\r\n                // This makes it so the stats observable can't be accidently changed\r\n                // set: () => {},\r\n                has: function (target, prop) {\r\n                    // This is needed for map, forEach etc to work,\r\n                    // because they want to check if target.hasOwnProperty(\"0\") first.\r\n                    // The ko function doesn't seem to have any OwnProperties anyway, so no harm here (don't quote me)\r\n                    return Reflect.has(target, prop);\r\n                },\r\n            });\r\n        }\r\n    }\r\n    toJSON() {\r\n        const saveObject = {};\r\n        for (const prop of this.observables) {\r\n            saveObject[prop] = this[prop]();\r\n        }\r\n        for (const array of this.arrayObservables) {\r\n            saveObject[array] = this[array].map(x => x());\r\n        }\r\n        for (const object of this.objectObservables) {\r\n            saveObject[object] = {};\r\n            Object.entries(this[object]).forEach(([key, val]) => {\r\n                saveObject[object][key] = val();\r\n            });\r\n        }\r\n        return saveObject;\r\n    }\r\n    fromJSON(json) {\r\n        var _a;\r\n        if (!json) {\r\n            return;\r\n        }\r\n        for (const prop of this.observables) {\r\n            this[prop](json[prop] || 0);\r\n        }\r\n        for (const array of this.arrayObservables) {\r\n            (_a = json[array]) === null || _a === void 0 ? void 0 : _a.forEach((el, index) => {\r\n                if (this[array] && this[array][index] && +el) {\r\n                    this[array][index](+el);\r\n                }\r\n            });\r\n        }\r\n        for (const object of this.objectObservables) {\r\n            if (json[object]) {\r\n                Object.entries(json[object]).forEach(([key, val]) => {\r\n                    const num = +val;\r\n                    if (!isNaN(num) && num) {\r\n                        this[object][key](num);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/modules/DataStore/StatisticStore.ts?");

/***/ }),

/***/ "./src/modules/DataStore/index.ts":
/*!****************************************!*\
  !*** ./src/modules/DataStore/index.ts ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _BadgeStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BadgeStore */ \"./src/modules/DataStore/BadgeStore.ts\");\n/* harmony import */ var _StatisticStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StatisticStore */ \"./src/modules/DataStore/StatisticStore.ts\");\n\r\n\r\nconst DataStore = {\r\n    badge: _BadgeStore__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\r\n    statistics: _StatisticStore__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\r\n};\r\n/* harmony default export */ __webpack_exports__[\"default\"] = (DataStore);\r\n\n\n//# sourceURL=webpack:///./src/modules/DataStore/index.ts?");

/***/ }),

/***/ "./src/modules/index.ts":
/*!******************************!*\
  !*** ./src/modules/index.ts ***!
  \******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _temporaryWindowInjection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./temporaryWindowInjection */ \"./src/modules/temporaryWindowInjection.ts\");\n\r\n\n\n//# sourceURL=webpack:///./src/modules/index.ts?");

/***/ }),

/***/ "./src/modules/temporaryWindowInjection.ts":
/*!*************************************************!*\
  !*** ./src/modules/temporaryWindowInjection.ts ***!
  \*************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _DataStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DataStore */ \"./src/modules/DataStore/index.ts\");\n// TODO: Remove temporary code after all code in ../scripts has been ported.\r\n// This is only here so that the code in ../scripts can use the new functionality\r\n\r\nObject.assign(window, {\r\n    DataStore: _DataStore__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\r\n    BadgeCase: _DataStore__WEBPACK_IMPORTED_MODULE_0__[\"default\"].badge,\r\n    Statistics: _DataStore__WEBPACK_IMPORTED_MODULE_0__[\"default\"].statistics,\r\n});\r\n\n\n//# sourceURL=webpack:///./src/modules/temporaryWindowInjection.ts?");

/***/ }),

/***/ "./src/scripts/GameConstants.ts":
/*!**************************************!*\
  !*** ./src/scripts/GameConstants.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\r\n * Contains all game constants for easy access.\r\n */\r\nvar GameConstants;\r\n(function (GameConstants) {\r\n    // Ticks\r\n    GameConstants.TICK_TIME = 100;\r\n    GameConstants.BATTLE_TICK = 1000;\r\n    GameConstants.BATTLE_FRONTIER_TICK = 500;\r\n    GameConstants.UNDERGROUND_TICK = 1000;\r\n    GameConstants.DUNGEON_TIME = 6000;\r\n    GameConstants.DUNGEON_TICK = 10;\r\n    GameConstants.EFFECT_ENGINE_TICK = 1000;\r\n    GameConstants.SAVE_TICK = 10000;\r\n    GameConstants.GYM_TIME = 3000;\r\n    GameConstants.GYM_COUNTDOWN = 1000;\r\n    GameConstants.GYM_TICK = 10;\r\n    GameConstants.ACHIEVEMENT_TICK = 1000;\r\n    GameConstants.MIN_LOAD_TIME = 500; // 0.5 Seconds\r\n    GameConstants.MAX_LOAD_TIME = 20000; // 20 Seconds\r\n    GameConstants.MAX_AVAILABLE_REGION = 3; // Sinnoh\r\n    GameConstants.TotalPokemonsPerRegion = [\r\n        151,\r\n        251,\r\n        386,\r\n        493,\r\n        649,\r\n        721,\r\n        809,\r\n        893,\r\n    ];\r\n    GameConstants.ITEM_USE_TIME = 30;\r\n    GameConstants.SECOND = 1000;\r\n    GameConstants.MINUTE = 1000 * 60;\r\n    GameConstants.HOUR = 1000 * 60 * 60;\r\n    GameConstants.DAY = 1000 * 60 * 60 * 24;\r\n    GameConstants.ROAMING_MIN_CHANCE = 8192;\r\n    GameConstants.ROAMING_MAX_CHANCE = 4096;\r\n    // Shinies\r\n    GameConstants.SHINY_CHANCE_BATTLE = 8192;\r\n    GameConstants.SHINY_CHANCE_DUNGEON = 4096;\r\n    GameConstants.SHINY_CHANCE_SHOP = 2048;\r\n    GameConstants.SHINY_CHANCE_STONE = 2048;\r\n    GameConstants.SHINY_CHANCE_SAFARI = 2048;\r\n    GameConstants.SHINY_CHANCE_BREEDING = 1024;\r\n    GameConstants.ITEM_PRICE_MULTIPLIER = 1.00045;\r\n    GameConstants.ITEM_PRICE_DEDUCT = 1.0005;\r\n    GameConstants.PLATE_VALUE = 100;\r\n    // Breeding\r\n    GameConstants.BREEDING_ATTACK_BONUS = 25;\r\n    GameConstants.BerryDistribution = [0.39, 0.63, 0.78, 0.87, 0.93, 0.96, 0.98, 1];\r\n    // Dungeons\r\n    GameConstants.DUNGEON_SIZE = 5;\r\n    GameConstants.DUNGEON_CHEST_SHOW = 2;\r\n    GameConstants.DUNGEON_MAP_SHOW = 4;\r\n    // Achievements\r\n    let AchievementOption;\r\n    (function (AchievementOption) {\r\n        AchievementOption[AchievementOption[\"less\"] = 0] = \"less\";\r\n        AchievementOption[AchievementOption[\"equal\"] = 1] = \"equal\";\r\n        AchievementOption[AchievementOption[\"more\"] = 2] = \"more\";\r\n    })(AchievementOption = GameConstants.AchievementOption || (GameConstants.AchievementOption = {}));\r\n    let DungeonTile;\r\n    (function (DungeonTile) {\r\n        DungeonTile[DungeonTile[\"empty\"] = 0] = \"empty\";\r\n        DungeonTile[DungeonTile[\"enemy\"] = 1] = \"enemy\";\r\n        DungeonTile[DungeonTile[\"chest\"] = 2] = \"chest\";\r\n        DungeonTile[DungeonTile[\"boss\"] = 3] = \"boss\";\r\n    })(DungeonTile = GameConstants.DungeonTile || (GameConstants.DungeonTile = {}));\r\n    // Held item chance\r\n    GameConstants.ROUTE_HELD_ITEM_CHANCE = 512;\r\n    GameConstants.DUNGEON_HELD_ITEM_CHANCE = 128;\r\n    //Shards from battle\r\n    GameConstants.DUNGEON_SHARDS = 3;\r\n    GameConstants.DUNGEON_BOSS_SHARDS = 20;\r\n    GameConstants.GYM_SHARDS = 5;\r\n    GameConstants.SAFARI_BATTLE_CHANCE = 5;\r\n    GameConstants.SAFARI_BASE_POKEBALL_COUNT = 30;\r\n    GameConstants.LEGAL_WALK_BLOCKS = [\r\n        0,\r\n        10,\r\n        11,\r\n        12,\r\n        13,\r\n        14,\r\n        15,\r\n        16,\r\n        17,\r\n        18,\r\n        19,\r\n        20,\r\n        21,\r\n        22,\r\n        23,\r\n        24,\r\n    ];\r\n    GameConstants.SAFARI_OUT_OF_BALLS = 'Game Over!<br>You have run out of safari balls to use.';\r\n    //Quests\r\n    // Numbers calculated by Dimava assumes ability to 1 shot on high routes and some use oak items,\r\n    //   which are now nerfed slightly until upgraded, so those numbers may need further adjusting\r\n    const questBase = 1; // change this to scale all quest points\r\n    GameConstants.DEFEAT_POKEMONS_BASE_REWARD = questBase * 1;\r\n    GameConstants.CAPTURE_POKEMONS_BASE_REWARD = GameConstants.DEFEAT_POKEMONS_BASE_REWARD / 0.8; // Defeat reward divided by chance to catch (guessed)\r\n    GameConstants.GAIN_MONEY_BASE_REWARD = questBase * 0.0017; // Dimava\r\n    GameConstants.GAIN_TOKENS_BASE_REWARD = GameConstants.CAPTURE_POKEMONS_BASE_REWARD / 13; // <route number> tokens gained for every capture\r\n    GameConstants.HATCH_EGGS_BASE_REWARD = questBase * 33; // Dimava\r\n    GameConstants.MINE_LAYERS_BASE_REWARD = questBase * 720; // Average of 1/4 squares revealed = 75 energy ~ 12 minutes ~ 720 pokemons\r\n    GameConstants.SHINY_BASE_REWARD = questBase * 3000; // Dimava\r\n    GameConstants.USE_OAK_ITEM_BASE_REWARD = GameConstants.DEFEAT_POKEMONS_BASE_REWARD; // not balanced at all for some oak items\r\n    GameConstants.ACTIVE_QUEST_MULTIPLIER = 4;\r\n    // Some active quests may be quicker if passive pokemon attack is used instead of active clicking\r\n    // This number is used to estimate time taken in terms of clicks, for reward calculation\r\n    GameConstants.QUEST_CLICKS_PER_SECOND = 5;\r\n    GameConstants.QuestTypes = [\r\n        'DefeatPokemons',\r\n        'CapturePokemons',\r\n        'GainMoney',\r\n        'GainTokens',\r\n        'GainShards',\r\n        'HatchEggs',\r\n        'MineLayers',\r\n        'CatchShinies',\r\n        'DefeatGym',\r\n        'DefeatDungeon',\r\n        'UsePokeball',\r\n        'UseOakItem',\r\n        'HarvestBerriesQuest',\r\n    ];\r\n    GameConstants.QUESTS_PER_SET = 10;\r\n    /**\r\n     * idle: The game is not doing anything, the battle view isn't shown\r\n     * paused: The battle view is shown, but there are no game ticks\r\n     * fighting: On a route and battling a pokemon\r\n     * gym: Battling a gym\r\n     * dungeon: Exploring a dungeon\r\n     * safari: Exploring the safari zone\r\n     * town: In a town/pre-dungeon, town view is not shown\r\n     */\r\n    let GameState;\r\n    (function (GameState) {\r\n        GameState[GameState[\"idle\"] = 0] = \"idle\";\r\n        GameState[GameState[\"paused\"] = 1] = \"paused\";\r\n        GameState[GameState[\"fighting\"] = 2] = \"fighting\";\r\n        GameState[GameState[\"gym\"] = 3] = \"gym\";\r\n        GameState[GameState[\"dungeon\"] = 4] = \"dungeon\";\r\n        GameState[GameState[\"safari\"] = 5] = \"safari\";\r\n        GameState[GameState[\"town\"] = 6] = \"town\";\r\n        GameState[GameState[\"shop\"] = 7] = \"shop\";\r\n        GameState[GameState[\"battleFrontier\"] = 8] = \"battleFrontier\";\r\n    })(GameState = GameConstants.GameState || (GameConstants.GameState = {}));\r\n    let Pokeball;\r\n    (function (Pokeball) {\r\n        Pokeball[Pokeball[\"None\"] = -1] = \"None\";\r\n        Pokeball[Pokeball[\"Pokeball\"] = 0] = \"Pokeball\";\r\n        Pokeball[Pokeball[\"Greatball\"] = 1] = \"Greatball\";\r\n        Pokeball[Pokeball[\"Ultraball\"] = 2] = \"Ultraball\";\r\n        Pokeball[Pokeball[\"Masterball\"] = 3] = \"Masterball\";\r\n    })(Pokeball = GameConstants.Pokeball || (GameConstants.Pokeball = {}));\r\n    let Currency;\r\n    (function (Currency) {\r\n        Currency[Currency[\"money\"] = 0] = \"money\";\r\n        Currency[Currency[\"questPoint\"] = 1] = \"questPoint\";\r\n        Currency[Currency[\"dungeonToken\"] = 2] = \"dungeonToken\";\r\n        Currency[Currency[\"diamond\"] = 3] = \"diamond\";\r\n        Currency[Currency[\"farmPoint\"] = 4] = \"farmPoint\";\r\n        Currency[Currency[\"battlePoint\"] = 5] = \"battlePoint\";\r\n    })(Currency = GameConstants.Currency || (GameConstants.Currency = {}));\r\n    let TypeEffectiveness;\r\n    (function (TypeEffectiveness) {\r\n        TypeEffectiveness[TypeEffectiveness[\"Immune\"] = 0] = \"Immune\";\r\n        TypeEffectiveness[TypeEffectiveness[\"NotVery\"] = 1] = \"NotVery\";\r\n        TypeEffectiveness[TypeEffectiveness[\"Normal\"] = 2] = \"Normal\";\r\n        TypeEffectiveness[TypeEffectiveness[\"Very\"] = 3] = \"Very\";\r\n    })(TypeEffectiveness = GameConstants.TypeEffectiveness || (GameConstants.TypeEffectiveness = {}));\r\n    let TypeEffectivenessValue;\r\n    (function (TypeEffectivenessValue) {\r\n        TypeEffectivenessValue[TypeEffectivenessValue[\"Immune\"] = 0] = \"Immune\";\r\n        TypeEffectivenessValue[TypeEffectivenessValue[\"NotVery\"] = 0.5] = \"NotVery\";\r\n        TypeEffectivenessValue[TypeEffectivenessValue[\"Normal\"] = 1] = \"Normal\";\r\n        TypeEffectivenessValue[TypeEffectivenessValue[\"Very\"] = 2] = \"Very\";\r\n    })(TypeEffectivenessValue = GameConstants.TypeEffectivenessValue || (GameConstants.TypeEffectivenessValue = {}));\r\n    function humanifyString(str) {\r\n        return str.replace(/[_-]+/g, ' ');\r\n    }\r\n    GameConstants.humanifyString = humanifyString;\r\n    function camelCaseToString(str) {\r\n        return str.replace(/[\\s_-]?([A-Z])/g, ' $1').replace(/\\b\\w/g, (w) => (w.replace(/\\w/, (c) => c.toUpperCase()))).trim();\r\n    }\r\n    GameConstants.camelCaseToString = camelCaseToString;\r\n    function formatDate(date) {\r\n        return date.toISOString().replace(/T/, ' ').replace(/.\\d+Z/, '');\r\n    }\r\n    GameConstants.formatDate = formatDate;\r\n    function formatTime(time) {\r\n        if (time == 0) {\r\n            return 'Ready';\r\n        }\r\n        time = parseInt(`${time}`, 10); // don't forget the second param\r\n        const hours = `${Math.floor(time / 3600)}`.padStart(2, '0');\r\n        const minutes = `${Math.floor((time - (hours * 3600)) / 60)}`.padStart(2, '0');\r\n        const seconds = `${time - (hours * 3600) - (minutes * 60)}`.padStart(2, '0');\r\n        return `${hours}:${minutes}:${seconds}`;\r\n    }\r\n    GameConstants.formatTime = formatTime;\r\n    function formatTimeShortWords(time) {\r\n        if (isNaN(+time) || time == 0) {\r\n            return 'now';\r\n        }\r\n        time = Math.abs(time);\r\n        if (time > GameConstants.DAY) {\r\n            const days = Math.ceil(time / GameConstants.DAY);\r\n            return `${time % GameConstants.DAY ? '< ' : ''}${days} day${days == 1 ? '' : 's'}`;\r\n        }\r\n        if (time > GameConstants.HOUR) {\r\n            const hours = Math.ceil(time / GameConstants.HOUR);\r\n            return `${time % GameConstants.HOUR ? '< ' : ''}${hours} hour${hours == 1 ? '' : 's'}`;\r\n        }\r\n        const minutes = Math.ceil(time / GameConstants.MINUTE);\r\n        return `${time % GameConstants.MINUTE ? '< ' : ''}${minutes} min${minutes == 1 ? '' : 's'}`;\r\n    }\r\n    GameConstants.formatTimeShortWords = formatTimeShortWords;\r\n    function formatNumber(num) {\r\n        if (isNaN(+num)) {\r\n            return '0';\r\n        }\r\n        const suffixes = ['K', 'M', 'B', 'T', 'QD', 'QT'];\r\n        let returnNum = num;\r\n        let suffixCounter = -1;\r\n        while (returnNum >= 1e3 && (suffixCounter < suffixes.length - 1)) {\r\n            returnNum /= 1e3;\r\n            suffixCounter++;\r\n        }\r\n        if (returnNum > 1e3) {\r\n            return '∞';\r\n        }\r\n        if (suffixCounter > -1) {\r\n            const returnNumString = String(Math.floor(returnNum * 10) / 10);\r\n            return `${returnNumString}${suffixes[suffixCounter]}`;\r\n        }\r\n        return num.toString();\r\n    }\r\n    GameConstants.formatNumber = formatNumber;\r\n    let Region;\r\n    (function (Region) {\r\n        Region[Region[\"none\"] = -1] = \"none\";\r\n        Region[Region[\"kanto\"] = 0] = \"kanto\";\r\n        Region[Region[\"johto\"] = 1] = \"johto\";\r\n        Region[Region[\"hoenn\"] = 2] = \"hoenn\";\r\n        Region[Region[\"sinnoh\"] = 3] = \"sinnoh\";\r\n        Region[Region[\"unova\"] = 4] = \"unova\";\r\n        Region[Region[\"kalos\"] = 5] = \"kalos\";\r\n        Region[Region[\"alola\"] = 6] = \"alola\";\r\n        Region[Region[\"galar\"] = 7] = \"galar\";\r\n    })(Region = GameConstants.Region || (GameConstants.Region = {}));\r\n    GameConstants.RegionRoute = {\r\n        0: [1, 25],\r\n        1: [26, 48],\r\n        2: [101, 134],\r\n        3: [201, 230],\r\n    };\r\n    function randomIntBetween(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n    GameConstants.randomIntBetween = randomIntBetween;\r\n    function randomElement(array) {\r\n        return array[GameConstants.randomIntBetween(0, array.length - 1)];\r\n    }\r\n    GameConstants.randomElement = randomElement;\r\n    // Return a random element from the array, with an exponential distribution\r\n    // The last element has a 1/ratio chance of being chosen, one before last is 1/(ratio^2), etc\r\n    // The logarithm is clipped up to 0, so the first two elements will have equal chance\r\n    function expRandomElement(array, ratio) {\r\n        const r = Math.random();\r\n        const logr = Math.log(r) / Math.log(ratio);\r\n        const n = Math.floor(logr + array.length);\r\n        const x = GameConstants.clipNumber(n, 0, array.length - 1);\r\n        return array[x];\r\n    }\r\n    GameConstants.expRandomElement = expRandomElement;\r\n    function clipNumber(num, min, max) {\r\n        return Math.min(Math.max(num, min), max);\r\n    }\r\n    GameConstants.clipNumber = clipNumber;\r\n    GameConstants.TypeColor = [\r\n        '#A8A77A',\r\n        '#EE8130',\r\n        '#6390F0',\r\n        '#F7D02C',\r\n        '#7AC74C',\r\n        '#96D9D6',\r\n        '#C22E28',\r\n        '#A33EA1',\r\n        '#E2BF65',\r\n        '#A98FF3',\r\n        '#F95587',\r\n        '#A6B91A',\r\n        '#B6A136',\r\n        '#735797',\r\n        '#6F35FC',\r\n        '#705746',\r\n        '#B7B7CE',\r\n        '#D685AD',\r\n    ];\r\n    GameConstants.ROUTE_KILLS_NEEDED = 10;\r\n    GameConstants.WaterAreas = {\r\n        0: new Set(['Cerulean City', 19, 20, 21, 24]),\r\n        1: new Set([40, 41, 'Slowpoke Well']),\r\n        2: new Set([105, 106, 107, 108, 109, 118, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 'Shoal Cave', 'Seafloor Cavern']),\r\n        3: new Set([218, 219, 220, 223, 230, 'Lake Verity', 'Lake Valor', 'Pastoria City']),\r\n        4: new Set(['Undella Bay', 'Humilau City']),\r\n    };\r\n    GameConstants.IceAreas = {\r\n        0: new Set(['Seafoam Islands']),\r\n        1: new Set(['Mahogany Town', 'Ice Path', 'Whirl Islands']),\r\n        2: new Set(['Sootopolis City']),\r\n        3: new Set([216, 217, 'Lake Acuity', 'Snowpoint City']),\r\n    };\r\n    GameConstants.ForestAreas = {\r\n        0: new Set([25, 'Fuchsia City', 'Viridian Forest']),\r\n        1: new Set([36, 38, 43, 'Azalea Town', 'Ilex Forest']),\r\n        2: new Set([119, 'Petalburg Woods']),\r\n        3: new Set([201, 204, 'Eterna Forest', 'Eterna City', 'Fullmoon Island', 'Newmoon Island']),\r\n        4: new Set(['Lostlorn Forest', 'Pinwheel Forest', 'Giant Chasm', 'Pledge Grove', 'Castelia City']),\r\n    };\r\n    GameConstants.CaveAreas = {\r\n        0: new Set(['Pewter City', 'Digletts Cave', 'Mt. Moon', 'Rock Tunnel', 'Victory Road']),\r\n        1: new Set(['Cianwood City', 'Ruins of Alph', 'Union Cave', 'Mt Mortar', 'Dark Cave']),\r\n        2: new Set(['Rustboro City', 'Dewford Town', 'Rusturf Tunnel', 'Granite Cave', 'New Mauville', 'Meteor Falls', 'Victory Road Hoenn']),\r\n        3: new Set(['Oreburgh Gate', 'Oreburgh City', 'Ravaged Path', 'Wayward Cave', 'Mt. Coronet South', 'Iron Island', 'Mt. Coronet North', 'Victory Road Sinnoh']),\r\n        4: new Set(['Mistralton Cave', 'Seaside Cave', 'Wellspring Cave', 'Twist Mountain', 'Reversal Mountain', 'Cave of Being', 'Relic Passage', 'Relica Castle', 'Victory Road Unova']),\r\n    };\r\n    GameConstants.GemCaveAreas = {\r\n        0: new Set(['Viridian City', 'Cerulean Cave']),\r\n        1: new Set(['Blackthorn City', 'Mt Silver']),\r\n        2: new Set(['Cave of Origin', 'Sky Pillar']),\r\n        3: new Set(['Spear Pillar', 'Hall of Origin', 'Stark Mountain']),\r\n        4: new Set(['Chargestone Cave', 'Driftveil City']),\r\n    };\r\n    GameConstants.PowerPlantAreas = {\r\n        0: new Set(['Vermillion City', 'Power Plant']),\r\n        1: new Set(['Tin Tower']),\r\n        2: new Set(['Mauville City']),\r\n        3: new Set(['Sunyshore City']),\r\n        4: new Set(['Virbank Complex', 'Castelia Sewers', 'Nimbasa City']),\r\n    };\r\n    GameConstants.MansionAreas = {\r\n        0: new Set(['Cinnabar Island', 'Pokemon Mansion']),\r\n        1: new Set(['Olivine City', 'Burned Tower']),\r\n        2: new Set(['Lavaridge Town', 'Petalburg City', 'Jagged Pass', 'Fiery Path', 'Mt. Chimney']),\r\n        3: new Set(['Old Chateau', 'Veilstone City', 'Canalave City', 'Snowpoint Temple']),\r\n        4: new Set(['Liberty Garden', 'Dreamyard', 'Mistralton City', 'Opelucid City']),\r\n    };\r\n    GameConstants.GraveyardAreas = {\r\n        0: new Set(['Saffron City', 'Pokemon Tower']),\r\n        1: new Set(['Ecruteak City']),\r\n        2: new Set(['Mossdeep City', 'Mt. Pyre']),\r\n        3: new Set(['Hearthome City']),\r\n        4: new Set(['Virbank City']),\r\n    };\r\n    let Starter;\r\n    (function (Starter) {\r\n        Starter[Starter[\"None\"] = -1] = \"None\";\r\n        Starter[Starter[\"Bulbasaur\"] = 0] = \"Bulbasaur\";\r\n        Starter[Starter[\"Charmander\"] = 1] = \"Charmander\";\r\n        Starter[Starter[\"Squirtle\"] = 2] = \"Squirtle\";\r\n        Starter[Starter[\"Pikachu\"] = 3] = \"Pikachu\";\r\n    })(Starter = GameConstants.Starter || (GameConstants.Starter = {}));\r\n    let StoneType;\r\n    (function (StoneType) {\r\n        StoneType[StoneType[\"None\"] = -1] = \"None\";\r\n        StoneType[StoneType[\"Fire_stone\"] = 0] = \"Fire_stone\";\r\n        StoneType[StoneType[\"Water_stone\"] = 1] = \"Water_stone\";\r\n        StoneType[StoneType[\"Thunder_stone\"] = 2] = \"Thunder_stone\";\r\n        StoneType[StoneType[\"Leaf_stone\"] = 3] = \"Leaf_stone\";\r\n        StoneType[StoneType[\"Moon_stone\"] = 4] = \"Moon_stone\";\r\n        StoneType[StoneType[\"Sun_stone\"] = 5] = \"Sun_stone\";\r\n        StoneType[StoneType[\"Trade_stone\"] = 6] = \"Trade_stone\";\r\n        StoneType[StoneType[\"Dragon_scale\"] = 7] = \"Dragon_scale\";\r\n        StoneType[StoneType[\"Metal_coat\"] = 8] = \"Metal_coat\";\r\n        StoneType[StoneType[\"Kings_rock\"] = 9] = \"Kings_rock\";\r\n        StoneType[StoneType[\"Upgrade\"] = 10] = \"Upgrade\";\r\n        StoneType[StoneType[\"Soothe_bell\"] = 11] = \"Soothe_bell\";\r\n        StoneType[StoneType[\"Deepsea_tooth\"] = 12] = \"Deepsea_tooth\";\r\n        StoneType[StoneType[\"Deepsea_scale\"] = 13] = \"Deepsea_scale\";\r\n        StoneType[StoneType[\"Dawn_stone\"] = 14] = \"Dawn_stone\";\r\n        StoneType[StoneType[\"Dusk_stone\"] = 15] = \"Dusk_stone\";\r\n        StoneType[StoneType[\"Shiny_stone\"] = 16] = \"Shiny_stone\";\r\n        StoneType[StoneType[\"Dubious_disc\"] = 17] = \"Dubious_disc\";\r\n        StoneType[StoneType[\"Electirizer\"] = 18] = \"Electirizer\";\r\n        StoneType[StoneType[\"Magmarizer\"] = 19] = \"Magmarizer\";\r\n        StoneType[StoneType[\"Protector\"] = 20] = \"Protector\";\r\n        StoneType[StoneType[\"Reaper_cloth\"] = 21] = \"Reaper_cloth\";\r\n        StoneType[StoneType[\"Razor_claw\"] = 22] = \"Razor_claw\";\r\n        StoneType[StoneType[\"Razor_fang\"] = 23] = \"Razor_fang\";\r\n        StoneType[StoneType[\"Prism_scale\"] = 24] = \"Prism_scale\";\r\n        StoneType[StoneType[\"Sachet\"] = 25] = \"Sachet\";\r\n        StoneType[StoneType[\"Whipped_dream\"] = 26] = \"Whipped_dream\";\r\n    })(StoneType = GameConstants.StoneType || (GameConstants.StoneType = {}));\r\n    let BattleItemType;\r\n    (function (BattleItemType) {\r\n        BattleItemType[\"xAttack\"] = \"xAttack\";\r\n        BattleItemType[\"xClick\"] = \"xClick\";\r\n        BattleItemType[\"Lucky_egg\"] = \"Lucky_egg\";\r\n        BattleItemType[\"Token_collector\"] = \"Token_collector\";\r\n        BattleItemType[\"Item_magnet\"] = \"Item_magnet\";\r\n        BattleItemType[\"Lucky_incense\"] = \"Lucky_incense\";\r\n    })(BattleItemType = GameConstants.BattleItemType || (GameConstants.BattleItemType = {}));\r\n    let PokemonItemType;\r\n    (function (PokemonItemType) {\r\n        PokemonItemType[PokemonItemType[\"Eevee\"] = 0] = \"Eevee\";\r\n        PokemonItemType[PokemonItemType[\"Porygon\"] = 1] = \"Porygon\";\r\n        PokemonItemType[PokemonItemType[\"Jynx\"] = 2] = \"Jynx\";\r\n        PokemonItemType[PokemonItemType[\"Mr. Mime\"] = 3] = \"Mr. Mime\";\r\n        PokemonItemType[PokemonItemType[\"Lickitung\"] = 4] = \"Lickitung\";\r\n        PokemonItemType[PokemonItemType[\"Togepi\"] = 5] = \"Togepi\";\r\n        PokemonItemType[PokemonItemType[\"Beldum\"] = 6] = \"Beldum\";\r\n        PokemonItemType[PokemonItemType[\"Skorupi\"] = 7] = \"Skorupi\";\r\n        PokemonItemType[PokemonItemType[\"Combee\"] = 8] = \"Combee\";\r\n        PokemonItemType[PokemonItemType[\"Burmy (plant)\"] = 9] = \"Burmy (plant)\";\r\n        PokemonItemType[PokemonItemType[\"Spiritomb\"] = 10] = \"Spiritomb\";\r\n        PokemonItemType[PokemonItemType[\"Cherubi\"] = 11] = \"Cherubi\";\r\n        PokemonItemType[PokemonItemType[\"Meloetta (pirouette)\"] = 12] = \"Meloetta (pirouette)\";\r\n    })(PokemonItemType = GameConstants.PokemonItemType || (GameConstants.PokemonItemType = {}));\r\n    let PokeBlockColor;\r\n    (function (PokeBlockColor) {\r\n        PokeBlockColor[PokeBlockColor[\"Black\"] = 0] = \"Black\";\r\n        PokeBlockColor[PokeBlockColor[\"Red\"] = 1] = \"Red\";\r\n        PokeBlockColor[PokeBlockColor[\"Gold\"] = 2] = \"Gold\";\r\n        PokeBlockColor[PokeBlockColor[\"Purple\"] = 3] = \"Purple\";\r\n        PokeBlockColor[PokeBlockColor[\"Gray\"] = 4] = \"Gray\";\r\n        PokeBlockColor[PokeBlockColor[\"White\"] = 5] = \"White\";\r\n    })(PokeBlockColor = GameConstants.PokeBlockColor || (GameConstants.PokeBlockColor = {}));\r\n    let VitaminType;\r\n    (function (VitaminType) {\r\n        VitaminType[VitaminType[\"Protein\"] = 0] = \"Protein\";\r\n        VitaminType[VitaminType[\"RareCandy\"] = 1] = \"RareCandy\";\r\n    })(VitaminType = GameConstants.VitaminType || (GameConstants.VitaminType = {}));\r\n    let EnergyRestoreSize;\r\n    (function (EnergyRestoreSize) {\r\n        EnergyRestoreSize[EnergyRestoreSize[\"SmallRestore\"] = 0] = \"SmallRestore\";\r\n        EnergyRestoreSize[EnergyRestoreSize[\"MediumRestore\"] = 1] = \"MediumRestore\";\r\n        EnergyRestoreSize[EnergyRestoreSize[\"LargeRestore\"] = 2] = \"LargeRestore\";\r\n    })(EnergyRestoreSize = GameConstants.EnergyRestoreSize || (GameConstants.EnergyRestoreSize = {}));\r\n    let EggItemType;\r\n    (function (EggItemType) {\r\n        EggItemType[EggItemType[\"Fire_egg\"] = 0] = \"Fire_egg\";\r\n        EggItemType[EggItemType[\"Water_egg\"] = 1] = \"Water_egg\";\r\n        EggItemType[EggItemType[\"Grass_egg\"] = 2] = \"Grass_egg\";\r\n        EggItemType[EggItemType[\"Fighting_egg\"] = 3] = \"Fighting_egg\";\r\n        EggItemType[EggItemType[\"Electric_egg\"] = 4] = \"Electric_egg\";\r\n        EggItemType[EggItemType[\"Dragon_egg\"] = 5] = \"Dragon_egg\";\r\n        EggItemType[EggItemType[\"Pokemon_egg\"] = 6] = \"Pokemon_egg\";\r\n        EggItemType[EggItemType[\"Mystery_egg\"] = 7] = \"Mystery_egg\";\r\n    })(EggItemType = GameConstants.EggItemType || (GameConstants.EggItemType = {}));\r\n    GameConstants.EnergyRestoreEffect = {\r\n        SmallRestore: 0.1,\r\n        MediumRestore: 0.2,\r\n        LargeRestore: 0.5,\r\n    };\r\n    GameConstants.KeyCodeToDirection = {\r\n        'ArrowUp': 'up',\r\n        'ArrowLeft': 'left',\r\n        'ArrowDown': 'down',\r\n        'ArrowRight': 'right',\r\n        'KeyW': 'up',\r\n        'KeyA': 'left',\r\n        'KeyS': 'down',\r\n        'KeyD': 'right',\r\n    };\r\n    GameConstants.FossilToPokemon = {\r\n        'Helix Fossil': 'Omanyte',\r\n        'Dome Fossil': 'Kabuto',\r\n        'Old Amber': 'Aerodactyl',\r\n        'Root Fossil': 'Lileep',\r\n        'Claw Fossil': 'Anorith',\r\n        'Armor Fossil': 'Shieldon',\r\n        'Skull Fossil': 'Cranidos',\r\n        'Cover Fossil': 'Tirtouga',\r\n        'Plume Fossil': 'Archen',\r\n    };\r\n    //Used for image name\r\n    GameConstants.PokemonToFossil = {\r\n        'Omanyte': 'Helix Fossil',\r\n        'Kabuto': 'Dome Fossil',\r\n        'Aerodactyl': 'Old Amber',\r\n        'Lileep': 'Root Fossil',\r\n        'Anorith': 'Claw Fossil',\r\n        'Shieldon': 'Armor Fossil',\r\n        'Cranidos': 'Skull Fossil',\r\n        'Tirtouga': 'Cover Fossil',\r\n        'Archen': 'Plume Fossil',\r\n    };\r\n    // For random quest, name matches entry in gymList (created in Gym.ts)\r\n    GameConstants.KantoGyms = [\r\n        'Pewter City',\r\n        'Cerulean City',\r\n        'Vermillion City',\r\n        'Celadon City',\r\n        'Saffron City',\r\n        'Fuchsia City',\r\n        'Cinnabar Island',\r\n        'Viridian City',\r\n        'Elite Lorelei',\r\n        'Elite Bruno',\r\n        'Elite Agatha',\r\n        'Elite Lance',\r\n        'Champion Blue',\r\n    ];\r\n    GameConstants.JohtoGyms = [\r\n        'Violet City',\r\n        'Azalea Town',\r\n        'Goldenrod City',\r\n        'Ecruteak City',\r\n        'Cianwood City',\r\n        'Olivine City',\r\n        'Mahogany Town',\r\n        'Blackthorn City',\r\n        'Elite Will',\r\n        'Elite Koga',\r\n        'Elite Bruno2',\r\n        'Elite Karen',\r\n        'Champion Lance',\r\n    ];\r\n    GameConstants.HoennGyms = [\r\n        'Rustboro City',\r\n        'Dewford Town',\r\n        'Mauville City',\r\n        'Lavaridge Town',\r\n        'Petalburg City',\r\n        'Fortree City',\r\n        'Mossdeep City',\r\n        'Sootopolis City',\r\n        'Elite Sidney',\r\n        'Elite Phoebe',\r\n        'Elite Glacia',\r\n        'Elite Drake',\r\n        'Champion Wallace',\r\n    ];\r\n    GameConstants.SinnohGyms = [\r\n        'Oreburgh City',\r\n        'Eterna City',\r\n        'Hearthome City',\r\n        'Veilstone City',\r\n        'Pastoria City',\r\n        'Canalave City',\r\n        'Snowpoint City',\r\n        'Sunyshore City',\r\n        'Elite Aaron',\r\n        'Elite Bertha',\r\n        'Elite Flint',\r\n        'Elite Lucian',\r\n        'Champion Cynthia',\r\n    ];\r\n    GameConstants.UnovaGyms = [\r\n        'Aspertia City',\r\n        'Virbank City',\r\n        'Castelia City',\r\n        'Nimbasa City',\r\n        'Driftveil City',\r\n        'Mistralton City',\r\n        'Opelucid City',\r\n        'Humilau City',\r\n        'Elite Shauntal',\r\n        'Elite Marshal',\r\n        'Elite Grimsley',\r\n        'Elite Caitlin',\r\n        'Champion Iris',\r\n    ];\r\n    GameConstants.KalosGyms = [\r\n        'Santalune City',\r\n        'Cyllage City',\r\n        'Shalour City',\r\n        'Coumarine City',\r\n        'Lumiose City',\r\n        'Laverre City',\r\n        'Anistar City',\r\n        'Snowbelle City',\r\n        'Elite Malva',\r\n        'Elite Siebold',\r\n        'Elite Wikstrom',\r\n        'Elite Drasna',\r\n        'Champion Diantha',\r\n    ];\r\n    GameConstants.RegionGyms = [\r\n        GameConstants.KantoGyms,\r\n        GameConstants.JohtoGyms,\r\n        GameConstants.HoennGyms,\r\n        GameConstants.SinnohGyms,\r\n        GameConstants.UnovaGyms,\r\n        GameConstants.KalosGyms,\r\n    ];\r\n    function getGymIndex(gym) {\r\n        return GameConstants.RegionGyms.flat().findIndex(g => g === gym);\r\n    }\r\n    GameConstants.getGymIndex = getGymIndex;\r\n    GameConstants.KantoDungeons = [\r\n        'Viridian Forest',\r\n        'Digletts Cave',\r\n        'Mt. Moon',\r\n        'Rock Tunnel',\r\n        'Power Plant',\r\n        'Pokemon Tower',\r\n        'Seafoam Islands',\r\n        'Pokemon Mansion',\r\n        'Victory Road',\r\n        'Cerulean Cave',\r\n    ];\r\n    GameConstants.JohtoDungeons = [\r\n        'Sprout Tower',\r\n        'Ruins of Alph',\r\n        'Union Cave',\r\n        'Slowpoke Well',\r\n        'Ilex Forest',\r\n        'Burned Tower',\r\n        'Tin Tower',\r\n        'Whirl Islands',\r\n        'Mt Mortar',\r\n        'Ice Path',\r\n        'Dark Cave',\r\n        'Mt Silver',\r\n    ];\r\n    GameConstants.HoennDungeons = [\r\n        'Petalburg Woods',\r\n        'Rusturf Tunnel',\r\n        'Granite Cave',\r\n        'Jagged Pass',\r\n        'Fiery Path',\r\n        'Mt. Chimney',\r\n        'Meteor Falls',\r\n        'Mt. Pyre',\r\n        'New Mauville',\r\n        'Shoal Cave',\r\n        'Seafloor Cavern',\r\n        'Sealed Chamber',\r\n        'Cave of Origin',\r\n        'Sky Pillar',\r\n        'Victory Road Hoenn',\r\n    ];\r\n    GameConstants.SinnohDungeons = [\r\n        'Oreburgh Gate',\r\n        'Ravaged Path',\r\n        'Eterna Forest',\r\n        'Old Chateau',\r\n        'Wayward Cave',\r\n        'Mt. Coronet South',\r\n        'Iron Island',\r\n        'Mt. Coronet North',\r\n        'Lake Verity',\r\n        'Lake Valor',\r\n        'Lake Acuity',\r\n        'Distortion World',\r\n        'Victory Road Sinnoh',\r\n        'Spear Pillar',\r\n        'Fullmoon Island',\r\n        'Newmoon Island',\r\n        'Flower Paradise',\r\n        'Snowpoint Temple',\r\n        'Stark Mountain',\r\n        'Hall of Origin',\r\n    ];\r\n    GameConstants.UnovaDungeons = [\r\n        'Pledge Grove',\r\n        'Floccesy Ranch',\r\n        'Virbank Complex',\r\n        'Liberty Garden',\r\n        'Castelia Sewers',\r\n        'Relic Passage',\r\n        'Desert Resort',\r\n        'Relic Castle',\r\n        'Lostlorn Forest',\r\n        'Chargestone Cave',\r\n        'Mistralton Cave',\r\n        'Celestial Tower',\r\n        'Reversal Mountain',\r\n        'Strange House',\r\n        'Undella Bay',\r\n        'Seaside Cave',\r\n        'Giant Chasm',\r\n        'Abundant Shrine',\r\n        'Cave of Being',\r\n        'Victory Road Unova',\r\n        'Twist Mountain',\r\n        'Dragonspiral Tower',\r\n        'Moor of Icirrus',\r\n        'Pinwheel Forest',\r\n        'Wellspring Cave',\r\n        'Dreamyard',\r\n        'P2 Laboratory',\r\n    ];\r\n    GameConstants.KalosDungeons = [\r\n        'Santalune Forest',\r\n        'Parfum Palace',\r\n        'Connecting Cave',\r\n        'Glittering Cave',\r\n        'Reflection Cave',\r\n        //'Tower of Mastery',\r\n        'Azure Bay',\r\n        //'Sea Spirit's Den',\r\n        //'Kalos Power Plant',\r\n        //'Pokéball Factory',\r\n        'Lost Hotel',\r\n        'Frost Cavern',\r\n        'Team Flare Secret HQ',\r\n        'Terminus Cave',\r\n        'Pokémon Village',\r\n        'Victory Road Kalos',\r\n    ];\r\n    GameConstants.RegionDungeons = [\r\n        GameConstants.KantoDungeons,\r\n        GameConstants.JohtoDungeons,\r\n        GameConstants.HoennDungeons,\r\n        GameConstants.SinnohDungeons,\r\n        GameConstants.UnovaDungeons,\r\n        GameConstants.KalosDungeons,\r\n    ];\r\n    function getDungeonIndex(dungeon) {\r\n        return GameConstants.RegionDungeons.flat().findIndex(d => d === dungeon);\r\n    }\r\n    GameConstants.getDungeonIndex = getDungeonIndex;\r\n    GameConstants.StartingTowns = [\r\n        'Pallet Town',\r\n        'New Bark Town',\r\n        'Littleroot Town',\r\n        'Twinleaf Town',\r\n        'Aspertia City',\r\n        'Vaniville Town',\r\n    ];\r\n    GameConstants.DockTowns = [\r\n        'Vermillion City',\r\n        'Olivine City',\r\n        'Slateport City',\r\n        'Canalave City',\r\n        'Castelia City',\r\n        'Coumarine City',\r\n    ];\r\n})(GameConstants || (GameConstants = {}));\r\n// TODO: Remove namespace after all scripts have been moved to modules\r\nif (true) {\r\n    module.exports = GameConstants;\r\n}\r\n\n\n//# sourceURL=webpack:///./src/scripts/GameConstants.ts?");

/***/ })

/******/ });